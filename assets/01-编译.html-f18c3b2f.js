import{_ as l,M as t,p as r,q as d,R as e,t as n,N as s,a1 as o}from"./framework-7db056f4.js";const p={},c=o(`<h1 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h1><h2 id="手动部署" tabindex="-1"><a class="header-anchor" href="#手动部署" aria-hidden="true">#</a> 手动部署</h2><p>简单点，直奔主题，使用命令：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> build <span class="token operator">-</span>o xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将代码编译为二进制文件，<code>-o</code> 和<code>gcc</code> 中的作用一样，指定二进制目录和名字</p><blockquote><p><code>go build -o abc/xxx</code> 表示把代码编译到<code>./abc/xxx</code></p></blockquote><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>编译的时候为了满足不同平台条件，需要进行比较细致的调节，一般使用以下环境变量调整</p>`,8),i=e("li",null,[e("code",null,"CGO_ENABLED"),e("blockquote",null,[e("p",null,"编译时是否动态连接，如果使用了 cgo, 必须将值设置为 1")])],-1),u=e("code",null,"GOOS",-1),h={href:"https://go.dev/doc/install/source#environment",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"GOARCH",-1),_={href:"https://go.dev/doc/install/source#environment",target:"_blank",rel:"noopener noreferrer"},b=o(`<p>例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 当前指令使用，空格隔开</span>
CGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux GOARCH<span class="token operator">=</span>amd64 <span class="token keyword">go</span> build <span class="token operator">-</span>o main

<span class="token comment">// 如果想永久设置，需要把他们配置成系统的环境变量，具体内容不展开描述</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除调试信息" tabindex="-1"><a class="header-anchor" href="#去除调试信息" aria-hidden="true">#</a> 去除调试信息</h3><p>Go 编译器默认编译出来的程序会带有符号表和调试信息，一般来说 release 版本可以去除调试信息以减小二进制体积。</p><p>使用选项<code>ldflags=&quot;-s -w&quot;</code>,去掉符号表和调试信息，一般能减小 20%的大小</p><p>例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>CGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux GOARCH<span class="token operator">=</span>amd64 <span class="token keyword">go</span> build <span class="token operator">-</span>ldflags<span class="token operator">=</span><span class="token string">&quot;-s -w&quot;</span> <span class="token operator">-</span>o main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用-upx-压缩" tabindex="-1"><a class="header-anchor" href="#使用-upx-压缩" aria-hidden="true">#</a> 使用 upx 压缩</h3><p>upx 是一个常用的压缩动态库和可执行文件的工具，通常可减少 50-70% 的体积。</p>`,9),m={href:"https://github.com/upx/upx/releases/",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"支持 Windows 和 Linux，在 Ubuntu 或 Mac 可以直接使用包管理工具安装。",-1),v=e("p",null,"我个人认为没有什么必要继续压缩了，如果你感兴趣请自行学习",-1),x=e("h2",{id:"make",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#make","aria-hidden":"true"},"#"),n(" Make")],-1),f=e("p",null,"Make 命令一般使用在 C 语言项目的编译，当然也可以使用在 go 语言。",-1),O={href:"https://www.ruanyifeng.com/blog/2015/02/make.html",target:"_blank",rel:"noopener noreferrer"},E=o(`<p>这里放一个简单例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">.</span>PHONY<span class="token punctuation">:</span> build

FILENAME<span class="token operator">=</span>CodeSheep_runcode<span class="token operator">-</span><span class="token number">1.0</span>

all<span class="token punctuation">:</span> build
build<span class="token punctuation">:</span>
	@CGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux GOARCH<span class="token operator">=</span>amd64 <span class="token keyword">go</span> build <span class="token operator">-</span>ldflags<span class="token operator">=</span><span class="token string">&quot;-s -w&quot;</span> <span class="token operator">-</span>o <span class="token string">&quot;\${FILENAME}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function q(G,N){const a=t("ExternalLinkIcon");return r(),d("div",null,[c,e("ul",null,[i,e("li",null,[u,e("blockquote",null,[e("p",null,[n("二进制文件的目标系统，"),e("a",h,[n("详细"),s(a)])])])]),e("li",null,[k,e("blockquote",null,[e("p",null,[n("二进制文件的目标架构，"),e("a",_,[n("详细"),s(a)])])])])]),b,e("p",null,[n("upx 的安装方式非常简单，我们可以直接从 "),e("a",m,[n(" github "),s(a)]),n(" 下载最新的 release 版本")]),g,v,x,f,e("p",null,[n("详细的教程推荐"),e("a",O,[n("阮老师的博客"),s(a)])]),E])}const C=l(p,[["render",q],["__file","01-编译.html.vue"]]);export{C as default};
