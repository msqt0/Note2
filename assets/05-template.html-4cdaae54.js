import{_ as n,p as s,q as a,a1 as t}from"./framework-7db056f4.js";const p={},e=t(`<h1 id="http-template" tabindex="-1"><a class="header-anchor" href="#http-template" aria-hidden="true">#</a> http/Template</h1><p>Web 模板就是预先设计好的 HTML 页面，它可以被模板引擎反复的使用，来产生 HTML 页面</p><p>模板引擎可以合并模板上下文数据，产生最终的 HTML</p><blockquote><p>模板 + 数据 --模板引擎--&gt; HTML</p></blockquote><h2 id="模板简介" tabindex="-1"><a class="header-anchor" href="#模板简介" aria-hidden="true">#</a> 模板简介</h2><p>两种理想的模板引擎</p><ol><li><p>无逻辑模板引擎</p><ul><li>通过占位符，动态数据被替换到模板中</li><li>不做任何逻辑处理，只做字符串替换</li><li>处理完全由 handler 来完成</li><li>目标是展示层和逻辑层完全分离</li></ul></li><li><p>逻辑嵌入模板引擎</p><ul><li>编程语言被嵌入到模板中</li><li>在运行时出模板引擎来执行</li><li>功能强大</li><li>逻辑代码遍布 handler 和模板，难以维护</li></ul></li></ol><p>Go 的标准库提供了<code>text/template(通用模板引擎)</code>，<code>html/template(HTML模板引擎)</code> 两个模板库</p><p>Go 模板引擎主要使用的是 <code>text/template</code>, HTML 相关的部分使用了<code>html/template</code> 是个混合体</p><p>模板可以完全无逻辑，但又具有足够的嵌入特性，和大多数模板引擎一样，Go Web 的模板位于无逻辑和嵌入逻辑之间的某个地方</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>text/template</code> 和 <code>html/template</code> 这两个包的部分函数看起来非常相似，实际功能也确实如此。通常，使用 <code>html/template</code> 来呈现网站。 <code>html/template</code> 包是对 <code>text/template</code> 包的包装。所有模板示例都对 <code>html/template</code> 包同样适用，除了 import 语句无需其他任何修改。HTML 模板提供了上下文感知安全性的额外好处。这可以防止诸如 JavaScript 注入之类的事情。</p></div><h3 id="模板的工作原理" tabindex="-1"><a class="header-anchor" href="#模板的工作原理" aria-hidden="true">#</a> 模板的工作原理</h3><p>在 Web 应用中，通常是由 handler 来处理模板引擎</p><ol><li><p>handler 调用模板引擎，并将使用的模板传递给引擎</p><ul><li>通常是一组模板文件和动态数据</li></ul></li><li><p>模板引擎生成的 HTML，并将其写入到 ResponseWriter</p></li><li><p>ResponseWriter 再将它加入到 HTTP 响应中，返回给客户端</p></li></ol><h3 id="关于模板" tabindex="-1"><a class="header-anchor" href="#关于模板" aria-hidden="true">#</a> 关于模板</h3><p>模板必须是可读的文本格式，扩展名任意。对于 Web 应用通常就是 HTML</p><p>模板里一般会内嵌一些命令，叫做 action, action 位于两层花括号之间</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ . }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>action 可以由命令模板引擎将其替换成一个值</li></ul><h3 id="使用模板引擎" tabindex="-1"><a class="header-anchor" href="#使用模板引擎" aria-hidden="true">#</a> 使用模板引擎</h3><ol><li><p>解析模板源(可以是字符串或模板文件)， 从而创建一个解析好的模板的 struct</p></li><li><p>执行解析好的模板，并传入 ResponseWriter 和数据。</p><ul><li>这会触发模板引擎组合解析好的模板和数据，来产生最终的 HTML，并将它传递给 ResponseWriter</li></ul></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// hello.html</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width-device-width, initial-scale-1.0&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Template<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>

<span class="token comment">// main.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;net/http&quot;</span>
    <span class="token string">&quot;text/template&quot;</span>
<span class="token punctuation">)</span>
<span class="token comment">// main...</span>

<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;hello.html&quot;</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析模板" tabindex="-1"><a class="header-anchor" href="#解析模板" aria-hidden="true">#</a> 解析模板</h2><p>解析模板有三个方法：</p><ol><li><p><code>ParseFiles()</code></p></li><li><p><code>ParseGlob()</code></p></li><li><p><code>Parse()</code></p></li></ol><h3 id="parsefiles" tabindex="-1"><a class="header-anchor" href="#parsefiles" aria-hidden="true">#</a> ParseFiles()</h3><ul><li>解析模板文件，并创建一个解析好的模板 struct, 后续可以被执行</li><li><code>ParseFiles()</code> 函数其实是 Template struct 上 <code>ParseFiles()</code> 方法的简便调用</li><li>调用<code>ParseFiles()</code> 后， 会创建一个新的模板，模板的名字是文件名</li><li><code>New()</code>函数 用以创建模板</li><li><code>ParseFiles()</code> 的参数数量可变，但只返回一个模板 <ul><li>当解析多个文件时，第一个文件作为返回的模板(名，内容)，其余的作为 map,相当与模板集，供后续执行使用</li></ul></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法一</span>
    <span class="token comment">// t, _ := template.ParseFiles(&quot;hello.html&quot;)</span>

    <span class="token comment">// 方法二</span>
    t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;hello.html&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 模板的名字</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;hello.html&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parseglob" tabindex="-1"><a class="header-anchor" href="#parseglob" aria-hidden="true">#</a> ParseGlob</h3><ul><li>使用模式匹配来解析特定的文件</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseGlob</span><span class="token punctuation">(</span><span class="token string">&quot;*.html&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 匹配目录下的所有html文件，返回的模板名字为第一个模板的名字</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse" aria-hidden="true">#</a> Parse</h3><ul><li>可以解析字符串模板，其它的方式最终都会调用 Parse</li></ul><h3 id="lookup-方法" tabindex="-1"><a class="header-anchor" href="#lookup-方法" aria-hidden="true">#</a> Lookup 方法</h3><ul><li>通过模板名来寻找模板，如果没找到就返回 <code>nil</code></li></ul><h3 id="must-函数" tabindex="-1"><a class="header-anchor" href="#must-函数" aria-hidden="true">#</a> Must 函数</h3><ul><li>可以包裹一个函数，返回到一个模板的指针和一个错误 <ul><li>如果错误不为<code>nil</code>, 那么就 <code>panic</code></li></ul></li></ul><p>一般来说，一个 web 应用，如果模板没加载成功，那应用就寄了，所以使用 Must 可以简化我们 Parse 模板时的错误处理，如果失败可以直接 panic 了</p><h2 id="执行模板" tabindex="-1"><a class="header-anchor" href="#执行模板" aria-hidden="true">#</a> 执行模板</h2><ol><li><p><code>Execute()</code></p><ul><li>参数是 ResponseWriter、数据</li><li>单模板：很适用</li><li>模板集：只用第一个模板</li></ul></li><li><p><code>ExecuteTemplate()</code></p><ul><li>参数是：ResponseWriter、模板名、数据</li><li>模板集：很适用</li></ul></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;t1.html&quot;</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>

    ts<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;t1.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;t2.html&quot;</span><span class="token punctuation">)</span>
    ts<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;t2.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析和执行的综合例子" tabindex="-1"><a class="header-anchor" href="#解析和执行的综合例子" aria-hidden="true">#</a> 解析和执行的综合例子</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;html/template&quot;</span>
    <span class="token string">&quot;log&quot;</span>
    <span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    templates <span class="token operator">:=</span> <span class="token function">loadTemplates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fileName <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        t <span class="token operator">:=</span> templates<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
        <span class="token keyword">if</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/css/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">&quot;wwwroot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/img/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">&quot;wwwroot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">loadTemplates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>template<span class="token punctuation">.</span>Template <span class="token punctuation">{</span>
    result <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;templates&quot;</span><span class="token punctuation">)</span>
    template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">ParseGlob</span><span class="token punctuation">(</span><span class="token string">&quot;templates/*.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="action" tabindex="-1"><a class="header-anchor" href="#action" aria-hidden="true">#</a> Action</h2><p>Action 就是 Go 模板中嵌入的命令，位于两组花括号之间 <code>{{ xxx }}</code></p><ul><li><code>.</code> 就是一个 Action， 而且是最重要的一个。它代表了传入模板的数据</li></ul><p>Action 主要可以分为五类：</p><ol><li>条件类</li><li>迭代/遍历类</li><li>设置类</li><li>包含类</li><li>定义类</li></ol><h3 id="条件类" tabindex="-1"><a class="header-anchor" href="#条件类" aria-hidden="true">#</a> 条件类</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">if</span> arg <span class="token punctuation">}</span><span class="token punctuation">}</span>
    some content
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>


<span class="token comment">// 可以使用 else</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">if</span> arg <span class="token punctuation">}</span><span class="token punctuation">}</span>
    some content
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">else</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    other content
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tmpl.html</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    Number is greater than <span class="token number">5</span><span class="token operator">!</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">else</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    Number is <span class="token number">5</span> or less<span class="token operator">!</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;tmpl.html&quot;</span><span class="token punctuation">)</span>
    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代-遍历类" tabindex="-1"><a class="header-anchor" href="#迭代-遍历类" aria-hidden="true">#</a> 迭代/遍历类</h3><p>这类 Action 用来遍历数组、slice、map 或 channel 等数据结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> array<span class="token punctuation">}</span><span class="token punctuation">}</span>
    Dot is set to the element <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 这里的. 表示不是传入的上下问数据，而是遍历array里的元素</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tmpl.html</span>
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;tmpl.html&quot;</span><span class="token punctuation">)</span>
    daysOfWeek <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Mon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fri&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sun&quot;</span><span class="token punctuation">}</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> daysOfWeek<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回落机制</p><p>如果 array 为 空， 可以执行 else</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> array<span class="token punctuation">}</span><span class="token punctuation">}</span>
    Dot is set to the element <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">else</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    The array is Empty
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置类" tabindex="-1"><a class="header-anchor" href="#设置类" aria-hidden="true">#</a> 设置类</h3><p>它允许在指定范围内，让 <code>.</code> 来表示其它指定的值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> with arg <span class="token punctuation">}</span><span class="token punctuation">}</span>
    Dot is set to arg <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tmpl.html</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>The dot is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> with <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
Now the dot is set to <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>The dot is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> again<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;tmpl.html&quot;</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回落机制</p><p>如果 arg 为 &quot;&quot;, 执行 else</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>The dot is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> with <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
Now the dot is set to <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">else</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
The dot is still <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>The dot is <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> again<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包含类" tabindex="-1"><a class="header-anchor" href="#包含类" aria-hidden="true">#</a> 包含类</h3><p>允许在模板中包含其它的模板</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;name&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// t1.html</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>This is t1<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>This is the value of the dot in t1<span class="token punctuation">.</span>html <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;t2.html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>This is t1<span class="token punctuation">.</span>html after<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token comment">// t2.html</span>
<span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;background-color: yellow;&quot;</span><span class="token operator">&gt;</span>
    This is t2<span class="token punctuation">.</span>html <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    This is the value of the dot in t2 html <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;t1.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;t2.html&quot;</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：上面的例子，t2.html 中<code>.</code> 的位置为空，这是因为没有传入上下文数据数据</mark></p><p>如果要传入参数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;name&quot;</span> arg <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类" aria-hidden="true">#</a> 定义类</h3><p>define action</p><h2 id="函数与管道" tabindex="-1"><a class="header-anchor" href="#函数与管道" aria-hidden="true">#</a> 函数与管道</h2><h3 id="参数-argument" tabindex="-1"><a class="header-anchor" href="#参数-argument" aria-hidden="true">#</a> 参数(argument)</h3><p>参数就是模板里面用到的值</p><ul><li>可以是 bool 整数、string</li><li>也可以是 struct、struct 的字段、数组的 key 等等</li></ul><p>参数可以是变量、方法(返回单个值或返回一个值和一个错误)或函数</p><p>参数可以是一个 <code>.</code>, 就是传入模板引擎的哪个值</p><h3 id="在-action-中设置变量" tabindex="-1"><a class="header-anchor" href="#在-action-中设置变量" aria-hidden="true">#</a> 在 Action 中设置变量</h3><p>可以在 action 中设置变量，变量以<code>$</code> 开头: - <code>$variable := value</code></p><p>一个迭代 action 的例子:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">range</span> $key<span class="token punctuation">,</span> $value <span class="token operator">:=</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
The key is <span class="token punctuation">{</span><span class="token punctuation">{</span> $key <span class="token punctuation">}</span><span class="token punctuation">}</span> and the value is <span class="token punctuation">{</span><span class="token punctuation">{</span> $value <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="管道-pipeline" tabindex="-1"><a class="header-anchor" href="#管道-pipeline" aria-hidden="true">#</a> 管道(pipeline)</h3><p>管道是按顺序连接到一起的参数、函数和方法 - 与 Unix 的管道类似</p><p>管道允许把参数的输出发给下一个参数，下一个参数由<code>|</code>分隔开</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">12.3456</span> <span class="token operator">|</span> printf <span class="token string">&quot;%.2f&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>参数可以是函数</p><p>Go 模板引擎提供了一些内置函数，功能比较有限。例如 <code>fmt.Sprint</code> 的各类变体等</p><p>开发者可以定义函数： - 可以接收任意数量的输入参数</p><ul><li>返回 <ul><li>一个值</li><li>一个值和一个错误</li></ul></li></ul><h4 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h4><ul><li><p>define、template、block</p></li><li><p>html、js、urlquery 对字符串进行转义，防止安全问题</p><ul><li>如果是 Web 模板，那么不会需要经常使用这些函数</li></ul></li><li><p>index</p></li><li><p>print/printf/println</p></li><li><p>len</p></li><li><p>with</p></li></ul><h4 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数" aria-hidden="true">#</a> 自定义函数</h4><ul><li><p><code>template.Funcs(funcMap FuncMap) *Template</code></p></li><li><p><code>type FuncMap map[string]interface{}</code></p><ul><li>value 是函数 <ul><li>可以有任意数量的参数</li><li>返回单个值的函数或返回一个值+一个错误的函数</li></ul></li></ul></li></ul><p>步骤：</p><ol><li><p>创建一个 FuncMap (map 类型)</p><ul><li>key 是函数</li><li>value 就是函数</li></ul></li><li><p>把 FuncMap 附加到模板</p></li></ol><p>常见用法：<code>template.New(&quot;&quot;).Funcs(funcMap).Parse(...)</code></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>调用方法的顺序不能错误</p></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    funcMap <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">&quot;fdate&quot;</span><span class="token punctuation">:</span> formatDate<span class="token punctuation">}</span>
    t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;t1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcMap<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;t1.html&quot;</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    layout <span class="token operator">:=</span> <span class="token string">&quot;2006-01-02&quot;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合模板" tabindex="-1"><a class="header-anchor" href="#组合模板" aria-hidden="true">#</a> 组合模板</h3><p>Layout 模板是网页中固定的部分，它可以被多个网页重复使用</p><h4 id="制作-layout-模板" tabindex="-1"><a class="header-anchor" href="#制作-layout-模板" aria-hidden="true">#</a> 制作 layout 模板</h4><p>Include (包含) action 的形式：<code>{{ template &quot;name&quot; .}}</code> 只以这种方式做 layout 模板是不可行的 正确的做法是在模板文件里面使用 define action 再定义一个模板</p><p>也可以在多个模板文件中，定义同名的模板</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// layout.html</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">&quot;layout&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token operator">&lt;</span>Nav<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;content&quot;</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>Footer<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">...</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// home.html</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">&quot;content&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Here is home and <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// about.html</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">&quot;content&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Here is about and <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>


<span class="token comment">// main.go</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;layout.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;home.html&quot;</span><span class="token punctuation">)</span>
        t<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;layout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;layout.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;about.html&quot;</span><span class="token punctuation">)</span>
        t<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;layout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-block-action-定义默认模板" tabindex="-1"><a class="header-anchor" href="#使用-block-action-定义默认模板" aria-hidden="true">#</a> 使用 block action 定义默认模板</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> block arg <span class="token punctuation">}</span><span class="token punctuation">}</span>
Dot is set to arg
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>block action: 可以定义模板，并同时就使用它</li><li>template: 模板必须使用, 不存在 Execute 时会返回错误</li><li>block: 模板可以不存在，不存在则显示内容</li></ul><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><ul><li><code>eq/ne</code>，等或不等</li><li><code>lt/gt</code>，小于或大于</li><li><code>le/ge</code>，小等于或大等于</li><li><code>and</code>，与</li><li><code>or</code>，或</li><li><code>not</code>，非</li></ul>`,113),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","05-template.html.vue"]]);export{r as default};
