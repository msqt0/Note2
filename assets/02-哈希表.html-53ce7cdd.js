import{_ as k,M as u,p as h,q as f,R as e,t as a,N as s,V as n,a1 as i}from"./framework-7db056f4.js";const v={},_=i('<h1 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h1><p>首先什么是 哈希表，哈希表（英文名字为 Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指 hash table 就可以了）。</p><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p><p>这么这官方的解释可能有点懵，其实直白来讲其实数组就是一张哈希表。</p><p>哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p><p><img src="https://user-images.githubusercontent.com/94043894/188271985-e34b0544-c396-4e3a-b848-ad583dc6f938.png" alt="image"></p><p>那么哈希表能解决什么问题呢，<b>一般哈希表都是用来快速判断一个元素是否出现集合里</b>。</p><p>例如要查询一个名字是否在这所学校里。</p><p>要枚举的话时间复杂度是 O(n)，但如果使用哈希表的话， 只需要 O(1)就可以做到。</p><p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><p>将学生姓名映射到哈希表上就涉及到了 hash function ，也就是哈希函数</p><h2 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h2><p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p><p>哈希函数如下图所示，通过 hashCode 把名字转化为数值，一般 hashcode 是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p><img src="https://user-images.githubusercontent.com/94043894/188272110-d65dba02-4798-4b2e-b47b-26ea9a36aa12.png" alt="image"></p><p>如果 hashCode 得到的数值大于 哈希表的大小了，也就是大于 tableSize 了，怎么办呢？</p><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p><p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p><p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><p>接下来<b>哈希碰</b>登场</p><h2 id="哈希碰撞" tabindex="-1"><a class="header-anchor" href="#哈希碰撞" aria-hidden="true">#</a> 哈希碰撞</h2><p>如图所示，小李和小王都映射到了索引下标 1 的位置，<b>这一现象叫做哈希碰</b>。</p><p><img src="https://user-images.githubusercontent.com/94043894/188273537-471f3104-ccec-4e4e-87a5-9d964ee6d87a.png" alt="image"></p><p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p><h3 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法" aria-hidden="true">#</a> 拉链法</h3><p>刚刚小李和小王在索引 1 的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p><p><img src="https://user-images.githubusercontent.com/94043894/188273628-f76018a7-fd72-4f22-bfbc-2655312454ba.png" alt="img"></p><p>（数据规模是 dataSize， 哈希表的大小为 tableSize）</p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><h3 id="线性探测法" tabindex="-1"><a class="header-anchor" href="#线性探测法" aria-hidden="true">#</a> 线性探测法</h3><p>使用线性探测法，一定要保证 tableSize 大于 dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p><p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求 tableSize 一定要大于 dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p><p><img src="https://user-images.githubusercontent.com/94043894/188274033-f3259130-ebc4-4410-a853-00b6347588c4.png" alt="image"></p><h2 id="整数哈希" tabindex="-1"><a class="header-anchor" href="#整数哈希" aria-hidden="true">#</a> 整数哈希</h2>',34),b={class:"katex"},g={class:"katex-mathml"},y=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span>',1),x=i(`<blockquote><p>这样的写法是为了在 cpp 里不会出现负数的哈希值</p></blockquote><p>数学上，哈希数组的长度，也就是 <code>k</code> 的值，最好取质数，这样碰撞的概率最小</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token comment">// 线性</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> null <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        k <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> N<span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        k <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> N<span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string op<span class="token punctuation">;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> op <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 拉链</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string op<span class="token punctuation">;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> op <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串哈希-哈希函数" tabindex="-1"><a class="header-anchor" href="#字符串哈希-哈希函数" aria-hidden="true">#</a> 字符串哈希（哈希函数）</h2><p>如果我们把一个字母看成一个数字，那么一串字符就可以看成是一个<code>p</code>进制的数字</p>`,5),z={class:"katex"},w={class:"katex-mathml"},N=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mrel">=</span><span class="mord mathit">A</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),q={class:"katex-display"},C={class:"katex"},B={class:"katex-mathml"},A=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8641079999999999em;"></span><span class="strut bottom" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">A</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),L={class:"katex"},S={class:"katex-mathml"},O=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),V=e("code",null,"1331",-1),U=e("code",null,"131",-1),P=e("blockquote",null,[e("p",null,[a("又因为 "),e("code",null,"unsigned long long"),a(" 表示的范围为 "),e("code",null,"0 ~ 2^64 - 1"),a(", 我们可以用这个类型存储哈希值，计算机会自动帮我们取模")])],-1),Y={class:"katex"},I={class:"katex-mathml"},E=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span>',1),H={class:"katex"},M={class:"katex-mathml"},R=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mbin">−</span><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),T={class:"katex"},j={class:"katex-mathml"},D=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),F=e("code",null,"[lenght, r]",-1),G=e("code",null,"[lenght, l]",-1),J=i(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 判断两段子字符串是否完全相同</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">,</span> P <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span>

ULL p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ULL h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

ULL <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P<span class="token punctuation">,</span>
        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l1<span class="token punctuation">,</span> r1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> r2<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> l1 <span class="token operator">&gt;&gt;</span> r1 <span class="token operator">&gt;&gt;</span> l2 <span class="token operator">&gt;&gt;</span> r2<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> r1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="滚动哈希" tabindex="-1"><a class="header-anchor" href="#滚动哈希" aria-hidden="true">#</a> 滚动哈希</h2>`,2);function K(Q,W){const t=u("mi"),p=u("mo"),o=u("mrow"),r=u("annotation"),d=u("semantics"),m=u("math"),l=u("mn"),c=u("msup");return h(),f("div",null,[_,e("p",null,[a("哈希函数可以简单的设计为: "),e("span",b,[e("span",g,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("s")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("x")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("m")]),_:1}),s(t,null,{default:n(()=>[a("o")]),_:1}),s(t,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("k")]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(t,null,{default:n(()=>[a("k")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("m")]),_:1}),s(t,null,{default:n(()=>[a("o")]),_:1}),s(t,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("k")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("hash(x) = ( x mod k + k ) mod k")]),_:1})]),_:1})]),_:1})]),y])]),x,e("p",null,[a("即: "),e("span",z,[e("span",w,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("A")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("A")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("0")]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("ABC = A * p^2 + B * p^1 + C * p^0")]),_:1})]),_:1})]),_:1})]),N]),a("，如果字符串太长了，不方便存储，因此可以模上一个数，这就是 字符串的哈希函数")]),e("p",null,[e("span",q,[e("span",C,[e("span",B,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("s")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("A")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("A")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(l,null,{default:n(()=>[a("0")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("m")]),_:1}),s(t,null,{default:n(()=>[a("o")]),_:1}),s(t,null,{default:n(()=>[a("d")]),_:1}),s(c,null,{default:n(()=>[s(l,null,{default:n(()=>[a("2")]),_:1}),s(o,null,{default:n(()=>[s(l,null,{default:n(()=>[a("6")]),_:1}),s(l,null,{default:n(()=>[a("4")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("hash(ABC) = ( A * p^2 + B * p^1 + C * p^0 ) mod 2^{64} ")]),_:1})]),_:1})]),_:1})]),A])])]),e("p",null,[a("一般上，习惯把这个模上的数定为"),e("span",L,[e("span",S,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(c,null,{default:n(()=>[s(l,null,{default:n(()=>[a("2")]),_:1}),s(o,null,{default:n(()=>[s(l,null,{default:n(()=>[a("6")]),_:1}),s(l,null,{default:n(()=>[a("4")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("2^{ 64 }")]),_:1})]),_:1})]),_:1})]),O]),a("，p 定为"),V,a(" 或"),U]),P,e("p",null,[a("如果我们有了一个字符串的所有前缀 hash 值，那么我们能在"),e("span",Y,[e("span",I,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("O")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(1)")]),_:1})]),_:1})]),_:1})]),E]),a("内求出任意一段子字符串的 hash 值")]),e("p",null,[a("公式为： "),e("span",H,[e("span",M,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("s")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(p,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(t,null,{default:n(()=>[a("r")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("s")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(t,null,{default:n(()=>[a("e")]),_:1}),s(t,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a("g")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("t")]),_:1}),s(p,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(t,null,{default:n(()=>[a("r")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("s")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(p,null,{default:n(()=>[a("(")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(t,null,{default:n(()=>[a("e")]),_:1}),s(t,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a("g")]),_:1}),s(t,null,{default:n(()=>[a("h")]),_:1}),s(t,null,{default:n(()=>[a("t")]),_:1}),s(p,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1}),s(p,null,{default:n(()=>[a(")")]),_:1}),s(p,null,{default:n(()=>[a("∗")]),_:1}),s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("r")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("hash(l, r) = hash(lenght, r) - hash(lenght, l - 1) * p^{r - l + 1}")]),_:1})]),_:1})]),_:1})]),R])]),e("p",null,[a("乘上 "),e("span",T,[e("span",j,[s(m,null,{default:n(()=>[s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(c,null,{default:n(()=>[s(t,null,{default:n(()=>[a("p")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("r")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(t,null,{default:n(()=>[a("l")]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(l,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("p^{r - l + 1}")]),_:1})]),_:1})]),_:1})]),D]),a(" 表示把两个前缀字符串的最高位对齐，即把"),F,a(" 向左移动到 与 "),G,a(" 对齐，才能相减")]),J])}const Z=k(v,[["render",K],["__file","02-哈希表.html.vue"]]);export{Z as default};
