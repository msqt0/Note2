import{_ as p,M as o,p as i,q as c,R as n,t as a,N as t,a1 as s}from"./framework-7db056f4.js";const l={},u=s('<h1 id="常用库" tabindex="-1"><a class="header-anchor" href="#常用库" aria-hidden="true">#</a> 常用库</h1><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery" aria-hidden="true">#</a> jQuery</h2><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h3>',3),r=s(`<li>在<code>&lt;head&gt;</code>元素中添加：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),d={href:"https://jquery.com/download/",target:"_blank",rel:"noopener noreferrer"},k=s(`<h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><p><code>$(selector)</code>，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.big-div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div &gt; p&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>selector</code> 类似于 CSS 选择器。</p><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token comment">//绑定事件，例如：</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token comment">//删除事件，例如：</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当存在多个相同类型的事件触发函数时，可以通过 <code>click.name</code> 来区分，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click.first&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;click.first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在事件触发的函数中的 <code>return false</code> 等价于同时执行：</p><ul><li><code>e.stopPropagation()</code>：阻止事件向上传递</li><li><code>e.preventDefault()</code>：阻止事件的默认行为</li></ul><h3 id="元素的隐藏、展现" tabindex="-1"><a class="header-anchor" href="#元素的隐藏、展现" aria-hidden="true">#</a> 元素的隐藏、展现</h3><ul><li><code>$A.hide()</code>：隐藏，可以添加参数，表示消失时间</li><li><code>$A.show()</code>：展现，可以添加参数，表示出现时间</li><li><code>$A.fadeOut()</code>：慢慢消失，可以添加参数，表示消失时间</li><li><code>$A.fadeIn()</code>：慢慢出现，可以添加参数，表示出现时间</li></ul><h3 id="元素的添加、删除" tabindex="-1"><a class="header-anchor" href="#元素的添加、删除" aria-hidden="true">#</a> 元素的添加、删除</h3><ul><li><code>$(&#39;&lt;div class=&quot;mydiv&quot;&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;/div&gt;&#39;)</code>：构造一个 jQuery 对象</li><li><code>$A.append($B)</code>：将<code>$B</code> 添加到<code>$A</code> 的末尾</li><li><code>$A.prepend($B)</code>：将<code>$B</code> 添加到<code>$A</code> 的开头</li><li><code>$A.remove()</code>：删除元素$A</li><li><code>$A.empty()</code>：清空元素$A 的所有儿子</li></ul><h3 id="对类的操作" tabindex="-1"><a class="header-anchor" href="#对类的操作" aria-hidden="true">#</a> 对类的操作</h3><ul><li><code>$A.addClass(class_name)</code>：添加某个类</li><li><code>$A.removeClass(class_name)</code>：删除某个类</li><li><code>$A.hasClass(class_name)</code>：判断某个类是否存在</li></ul><h3 id="对-css-的操作" tabindex="-1"><a class="header-anchor" href="#对-css-的操作" aria-hidden="true">#</a> 对 CSS 的操作</h3><ul><li><code>$(&quot;div&quot;).css(&quot;background-color&quot;)</code>：获取某个 CSS 的属性</li><li><code>$(&quot;div&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;)</code>：设置某个 CSS 的属性</li><li>同时设置多个 CSS 的属性：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&quot;200px&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&quot;200px&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;background-color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对标签属性的操作" tabindex="-1"><a class="header-anchor" href="#对标签属性的操作" aria-hidden="true">#</a> 对标签属性的操作</h3><ul><li><code>$(&#39;div&#39;).attr(&#39;id&#39;)</code>：获取属性</li><li><code>$(&#39;div&#39;).attr(&#39;id&#39;, &#39;ID&#39;)</code>：设置属性</li></ul><h3 id="对-html-内容、文本的操作" tabindex="-1"><a class="header-anchor" href="#对-html-内容、文本的操作" aria-hidden="true">#</a> 对 HTML 内容、文本的操作</h3><p>不需要背每个标签该用哪种，用到的时候 Google 或者百度即可。</p><ul><li><code>$A.html()</code>：获取、修改 HTML 内容</li><li><code>$A.text()</code>：获取、修改文本信息</li><li><code>$A.val()</code>：获取、修改文本的值</li></ul><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><ul><li><code>$(selector).parent(filter)</code>：查找父元素</li><li><code>$(selector).parents(filter)</code>：查找所有祖先元素</li><li><code>$(selector).children(filter)</code>：在所有子元素中查找</li><li><code>$(selector).find(filter)</code>：在所有后代元素中查找</li></ul><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> ajax</h3><h4 id="get-方法" tabindex="-1"><a class="header-anchor" href="#get-方法" aria-hidden="true">#</a> GET 方法：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="post-方法" tabindex="-1"><a class="header-anchor" href="#post-方法" aria-hidden="true">#</a> POST 方法：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="settimeout-与-setinterval" tabindex="-1"><a class="header-anchor" href="#settimeout-与-setinterval" aria-hidden="true">#</a> setTimeout 与 setInterval</h2><h3 id="settimeout-func-delay" tabindex="-1"><a class="header-anchor" href="#settimeout-func-delay" aria-hidden="true">#</a> setTimeout(func, delay)</h3><p>delay 毫秒后，执行函数 func()。</p><h3 id="cleartimeout" tabindex="-1"><a class="header-anchor" href="#cleartimeout" aria-hidden="true">#</a> clearTimeout()</h3><p>关闭定时器，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> timeout_id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2 秒后在控制台输出&quot;Hello World&quot;</span>

<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout_id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清除定时器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setinterval-func-delay" tabindex="-1"><a class="header-anchor" href="#setinterval-func-delay" aria-hidden="true">#</a> setInterval(func, delay)</h3><p>每隔 delay 毫秒，执行一次函数 func()。 第一次在第 delay 毫秒后执行。</p><h3 id="clearinterval" tabindex="-1"><a class="header-anchor" href="#clearinterval" aria-hidden="true">#</a> clearInterval()</h3><p>关闭周期执行的函数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> interval_id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 每隔 2 秒，输出一次&quot;Hello World&quot;</span>

<span class="token function">clearTimeout</span><span class="token punctuation">(</span>interval_id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清除周期执行的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestanimationframe" tabindex="-1"><a class="header-anchor" href="#requestanimationframe" aria-hidden="true">#</a> requestAnimationFrame</h2><h3 id="requestanimationframe-func" tabindex="-1"><a class="header-anchor" href="#requestanimationframe-func" aria-hidden="true">#</a> requestAnimationFrame(func)</h3><p>该函数会在下次浏览器刷新页面之前执行一次，通常会用递归写法使其每秒执行 60 次<code>func</code>函数。调用时会传入一个参数，表示函数执行的时间戳，单位为毫秒。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">step</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 每帧将 div 的宽度增加 1 像素</span>
    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> div<span class="token punctuation">.</span>clientWidth <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与-settimeout-和-setinterval-的区别" tabindex="-1"><a class="header-anchor" href="#与-settimeout-和-setinterval-的区别" aria-hidden="true">#</a> 与 setTimeout 和 setInterval 的区别：</h3><ul><li>requestAnimationFrame 渲染动画的效果更好，性能更加。</li></ul><blockquote><p>该函数可以保证每两次调用之间的时间间隔相同，但 <code>setTimeout</code> 与 <code>setInterval</code> 不能保证这点。<code>setTmeout</code> 两次调用之间的间隔包含回调函数的执行时间；<code>setInterval</code> 只能保证按固定时间间隔将回调函数压入栈中，但具体的执行时间间隔仍然受回调函数的执行时间影响。</p></blockquote><ul><li>当页面在后台时，因为页面不再渲染，因此 <code>requestAnimationFrame</code> 不再执行。但 <code>setTimeout</code> 与 <code>setInterval</code> 函数会继续执行。</li></ul><h2 id="map-与-set" tabindex="-1"><a class="header-anchor" href="#map-与-set" aria-hidden="true">#</a> Map 与 Set</h2><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p>Map 对象保存键值对。</p><ul><li>用<code>for...of</code>或者<code>forEach</code>可以按插入顺序遍历。</li><li>键值可以为任意值，包括函数、对象或任意基本类型。</li></ul><p>常用 API：</p><ul><li>set(key, value)：插入键值对，如果 key 已存在，则会覆盖原有的 value</li><li>get(key)：查找关键字，如果不存在，返回 undefined</li><li>size：返回键值对数量</li><li>has(key)：返回是否包含关键字 key</li><li>delete(key)：删除关键字 key</li><li>clear()：删除所有元素</li></ul><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><ul><li>用<code>for...of</code>或者<code>forEach</code>可以按插入顺序遍历。</li></ul><p>常用 API：</p><ul><li>add()：添加元素</li><li>has()：返回是否包含某个元素</li><li>size：返回元素数量</li><li>delete()：删除某个元素</li><li>clear()：删除所有元素</li></ul><h2 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h2><p>可以在用户的浏览器上存储键值对。</p><p>常用 API：</p><ul><li>setItem(key, value)：插入</li><li>getItem(key)：查找</li><li>removeItem(key)：删除</li><li>clear()：清空</li></ul><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><p>JSON 对象用于序列化对象、数组、数值、字符串、布尔值和 null。</p><p>常用 API：</p><ul><li>JSON.parse()：将字符串解析成对象</li><li>JSON.stringify()：将对象转化为字符串</li></ul><h2 id="日期" tabindex="-1"><a class="header-anchor" href="#日期" aria-hidden="true">#</a> 日期</h2><p>返回值为整数的 API，数值为 1970-1-1 00:00:00 UTC（世界标准时间）到某个时刻所经过的毫秒数：</p><ul><li><p><code>Date.now()</code>：返回现在时刻。</p></li><li><p><code>Date.parse(&quot;2022-04-15T15:30:00.000+08:00&quot;)</code>：返回北京时间 2022年4月15日 15:30:00 的时刻。 与 Date 对象的实例相关的 API：</p></li><li><p>new Date()：返回现在时刻。</p></li><li><p>new Date(&quot;2022-04-15T15:30:00.000+08:00&quot;)：返回北京时间 2022年4月15日 15:30:00 的时刻。</p></li><li><p>两个 Date 对象实例的差值为毫秒数</p></li><li><p>getDay()：返回星期，0 表示星期日，1-6 表示星期一至星期六</p></li><li><p>getDate()：返回日，数值为 1-31</p></li><li><p>getMonth()：返回月，数值为 0-11</p></li><li><p>getFullYear()：返回年份</p></li><li><p>getHours()：返回小时</p></li><li><p>getMinutes()：返回分钟</p></li><li><p>getSeconds()：返回秒</p></li><li><p>getMilliseconds()：返回毫秒</p></li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><p>与服务器建立全双工连接。</p><p>常用 API：</p><ul><li>new WebSocket(&#39;ws://localhost:8080&#39;);：建立 ws 连接。</li><li>send()：向服务器端发送一个字符串。一般用 JSON 将传入的对象序列化为字符串。</li><li>onopen：类似于 onclick，当连接建立时触发。</li><li>onmessage：当从服务器端接收到消息时触发。</li><li>close()：关闭连接。</li><li>onclose：当连接关闭后触发。</li></ul><h2 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> Windows</h2><ul><li>window.open(&quot;https://www.acwing.com&quot;)在新标签栏中打开页面。</li><li>location.reload()刷新页面。</li><li>location.href = &quot;https://www.acwing.com&quot;：在当前标签栏中打开页面</li></ul><h2 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas" aria-hidden="true">#</a> Canvas</h2>`,79),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial",target:"_blank",rel:"noopener noreferrer"};function h(m,b){const e=o("ExternalLinkIcon");return i(),c("div",null,[u,n("ul",null,[r,n("li",null,[a("按 "),n("a",d,[a(" jQuery "),t(e)]),a(" 官网提示下载")])]),k,n("p",null,[n("a",v,[a("Canvas"),t(e)])])])}const g=p(l,[["render",h],["__file","11-常用库.html.vue"]]);export{g as default};
