import{_ as s,p as n,q as a,a1 as e}from"./framework-7db056f4.js";const d={},t=e(`<h1 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h1><h2 id="数据查询" tabindex="-1"><a class="header-anchor" href="#数据查询" aria-hidden="true">#</a> 数据查询</h2><p>查询关键字：select</p><p><strong>语法：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
    字段列表
<span class="token keyword">from</span>
    表名列表
<span class="token keyword">where</span>
    条件列表
<span class="token keyword">group</span> <span class="token keyword">by</span>
    分组字段列表
<span class="token keyword">having</span>
    分组后条件列表
<span class="token keyword">order</span> <span class="token keyword">by</span>
    排序字段列表
<span class="token keyword">limit</span>
    分页参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本查询" tabindex="-1"><a class="header-anchor" href="#基本查询" aria-hidden="true">#</a> 基本查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>查询多个字段
<span class="token keyword">select</span> 字段 <span class="token number">1</span><span class="token punctuation">,</span>字段 <span class="token number">2</span><span class="token punctuation">,</span>字段 <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名；

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名；

设置别名
<span class="token keyword">select</span> 字段 <span class="token number">1</span><span class="token punctuation">[</span><span class="token keyword">as</span> 别名 <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>字段 <span class="token number">2</span>【<span class="token keyword">as</span> 别名】<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名；

 去除重复查询记录
<span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段列表 <span class="token keyword">from</span> 表名；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件列表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>条件：</strong></p><table><thead><tr><th>比较运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code></td><td><code>!=</code></td></tr><tr><td><code>between...and...</code></td><td>在某个范围之内（含最小、最大值）</td></tr><tr><td><code>in(...)</code></td><td>在 in 之后的列表中的值，多选一</td></tr><tr><td><code>like 占位符</code></td><td>模糊匹配（<code>_</code>匹配单个字符，<code>%</code> 匹配任意个字符）</td></tr><tr><td><code>is NULL</code></td><td>是 NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td>AND 或 <code>&amp;&amp;</code></td><td>并且</td></tr><tr><td>OR 或 \`</td><td></td></tr><tr><td>NOT 或 <code>!</code></td><td>非，不是</td></tr></tbody></table><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><h4 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总" aria-hidden="true">#</a> 汇总</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><blockquote><p>AVG() 会忽略 NULL 行</p></blockquote><p>可以使用 distinct 可以汇总不同的值</p><p>例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="文本处理" tabindex="-1"><a class="header-anchor" href="#文本处理" aria-hidden="true">#</a> 文本处理</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()</td><td>左边的字符</td></tr><tr><td>RIGHT()</td><td>右边的字符</td></tr><tr><td>LOWER()</td><td>转换为小写字符</td></tr><tr><td>UPPER()</td><td>转换为大写字符</td></tr><tr><td>LTRIM()</td><td>去除左边的空格</td></tr><tr><td>RTRIM()</td><td>去除右边的空格</td></tr><tr><td>LENGTH()</td><td>长度</td></tr><tr><td>SOUNDEX()</td><td>转换为语音值</td></tr></tbody></table><p>其中，SOUNDEX()可以将一个字符串转换为描述其语音表示的字母数字模式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> mytable
<span class="token keyword">where</span> soundex<span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token operator">=</span> soundex<span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 【<span class="token keyword">where</span> 条件】
<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段名 【<span class="token keyword">having</span> 分组后过滤条件】<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>where 与 having 区别：</p><ol><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件，不参与分组；而 having 是分组之后对结果进行过滤。</li><li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以</li></ol></blockquote><blockquote><p>注意：</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul></blockquote><p>例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询" aria-hidden="true">#</a> 排序查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 字段 <span class="token number">1</span> 排序方式 <span class="token number">1</span><span class="token punctuation">,</span> 字段 <span class="token number">2</span><span class="token punctuation">,</span> 排序方式 <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>排列方式：</p><ul><li>ASC: 升序</li><li>DESC: 升序</li></ul><blockquote><p>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p></blockquote><p>例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> 起始索引，查询记录数；

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>起始索引从 0 开始，起始索引=（查询页码-1） * 每页显示记录数</li><li>分页查询住不同数据库有不同的实现，mysql 中是 LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写成 limit10</li></ul></blockquote><h2 id="dql-执行顺序" tabindex="-1"><a class="header-anchor" href="#dql-执行顺序" aria-hidden="true">#</a> DQL 执行顺序</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">from</span>
    表名列表
<span class="token keyword">where</span>
    条件列表
<span class="token keyword">group</span> <span class="token keyword">by</span>
    分组字段控制
<span class="token keyword">having</span>
    分组后后条件判断
<span class="token keyword">select</span>
    字段列表
<span class="token keyword">order</span> <span class="token keyword">by</span>
    排列字段列表
<span class="token keyword">limit</span>
    分页参数

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),l=[t];function i(r,o){return n(),a("div",null,l)}const p=s(d,[["render",i],["__file","04-DQL.html.vue"]]);export{p as default};
