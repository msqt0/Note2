import{_ as n,p as s,q as a,a1 as t}from"./framework-7db056f4.js";const p={},e=t(`<h1 id="sql-构建器" tabindex="-1"><a class="header-anchor" href="#sql-构建器" aria-hidden="true">#</a> SQL 构建器</h1><h2 id="原生-sql" tabindex="-1"><a class="header-anchor" href="#原生-sql" aria-hidden="true">#</a> 原生 SQL</h2><p>原生查询 SQL 和 Scan</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
  Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result Result
db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>

<span class="token keyword">var</span> age <span class="token builtin">int</span>
db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT SUM(age) FROM users WHERE role = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>

<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE users SET name = ? WHERE age = ? RETURNING id, name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exec-原生-sql" tabindex="-1"><a class="header-anchor" href="#exec-原生-sql" aria-hidden="true">#</a> Exec 原生 SQL</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;DROP TABLE users&quot;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE orders SET shipped_at = ? WHERE id IN ?&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Exec with SQL Expression</span>
db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE users SET money = ? WHERE name = ?&quot;</span><span class="token punctuation">,</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;money * ? + ?&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>GORM 允许缓存预编译 SQL 语句来提高性能，查看 性能 获取详情</p></div><h2 id="命名参数" tabindex="-1"><a class="header-anchor" href="#命名参数" aria-hidden="true">#</a> 命名参数</h2><p>GORM 支持 <code>sql.NamedArg、map[string]interface{}{}</code> 或 <code>struct</code> 形式的命名参数，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name1 = @name OR name2 = @name&quot;</span><span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name1 = &quot;jinzhu&quot; OR name2 = &quot;jinzhu&quot;</span>

db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name1 = @name OR name2 = @name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result3<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name1 = &quot;jinzhu2&quot; OR name2 = &quot;jinzhu2&quot; ORDER BY \`users\`.\`id\` LIMIT 1</span>

<span class="token comment">// 原生 SQL 及命名参数</span>
db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users WHERE name1 = @name OR name2 = @name2 OR name3 = @name&quot;</span><span class="token punctuation">,</span>
   sql<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM users WHERE name1 = &quot;jinzhu1&quot; OR name2 = &quot;jinzhu2&quot; OR name3 = &quot;jinzhu1&quot;</span>

db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE users SET name1 = @name, name2 = @name2, name3 = @name&quot;</span><span class="token punctuation">,</span>
   sql<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhunew&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhunew2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// UPDATE users SET name1 = &quot;jinzhunew&quot;, name2 = &quot;jinzhunew2&quot;, name3 = &quot;jinzhunew&quot;</span>

db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users WHERE (name1 = @name AND name3 = @name) AND name2 = @name2&quot;</span><span class="token punctuation">,</span>
   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name2&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jinzhu2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span>

<span class="token keyword">type</span> NamedArgument <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Name2 <span class="token builtin">string</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users WHERE (name1 = @Name AND name3 = @Name) AND name2 = @Name2&quot;</span><span class="token punctuation">,</span>
     NamedArgument<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">,</span> Name2<span class="token punctuation">:</span> <span class="token string">&quot;jinzhu2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM users WHERE (name1 = &quot;jinzhu&quot; AND name3 = &quot;jinzhu&quot;) AND name2 = &quot;jinzhu2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dryrun-模式" tabindex="-1"><a class="header-anchor" href="#dryrun-模式" aria-hidden="true">#</a> DryRun 模式</h2><p>在不执行的情况下生成 SQL 及其参数，可以用于准备或测试生成的 SQL，详情请参考 Session</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>stmt <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>DryRun<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Statement
stmt<span class="token punctuation">.</span>SQL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; SELECT * FROM \`users\` WHERE \`id\` = $1 ORDER BY \`id\`</span>
stmt<span class="token punctuation">.</span>Vars         <span class="token comment">//=&gt; []interface{}{1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tosql" tabindex="-1"><a class="header-anchor" href="#tosql" aria-hidden="true">#</a> ToSQL</h2><p>返回生成的 SQL 但不执行。</p><p>GORM使用 database/sql 的参数占位符来构建 SQL 语句，它会自动转义参数以避免 SQL 注入，但我们不保证生成 SQL 的安全，请只用于调试。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>sql <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">ToSQL</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>
  <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;age desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
sql <span class="token comment">//=&gt; SELECT * FROM &quot;users&quot; WHERE id = 100 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL ORDER BY age desc LIMIT 10</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="row-rows" tabindex="-1"><a class="header-anchor" href="#row-rows" aria-hidden="true">#</a> Row &amp; Rows</h2><p>获取 <code>*sql.Row</code> 结果</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 使用 GORM API 构建 SQL</span>
row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span>

<span class="token comment">// 使用原生 SQL</span>
row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;select name, age, email from users where name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>email<span class="token punctuation">)</span>
获取 <span class="token operator">*</span>sql<span class="token punctuation">.</span>Rows 结果

<span class="token comment">// 使用 GORM API 构建 SQL</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name, age, email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>email<span class="token punctuation">)</span>

  <span class="token comment">// 业务逻辑...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原生 SQL</span>
rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;select name, age, email from users where name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>email<span class="token punctuation">)</span>

  <span class="token comment">// 业务逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转到 FindInBatches 获取如何在批量中查询和处理记录的信息， 转到 Group 条件 获取如何构建复杂 SQL 查询的信息</p><p>将 sql.Rows 扫描至 model 使用 ScanRows 将一行记录扫描至 struct，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinzhu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name, age, email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (*sql.Rows, error)</span>
<span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> user User
<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ScanRows 将一行扫描至 user</span>
  db<span class="token punctuation">.</span><span class="token function">ScanRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

  <span class="token comment">// 业务逻辑...</span>
<span class="token punctuation">}</span>
Connection
Run mutliple SQL in same db tcp connection <span class="token punctuation">(</span>not in a transaction<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;SET my.role = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>

  tx<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced" aria-hidden="true">#</a> Advanced</h2><h3 id="子句-clause" tabindex="-1"><a class="header-anchor" href="#子句-clause" aria-hidden="true">#</a> 子句（Clause）</h3><p>GORM uses SQL builder generates SQL internally, for each operation, GORM creates a <code>*gorm.Statement</code> object, all GORM APIs add/change Clause for the Statement, at last, GORM generated SQL based on those clauses</p><p>For example, when querying with First, it adds the following clauses to the Statement</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>clause<span class="token punctuation">.</span>Select<span class="token punctuation">{</span>Columns<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">}</span>
clause<span class="token punctuation">.</span>From<span class="token punctuation">{</span>Tables<span class="token punctuation">:</span> clause<span class="token punctuation">.</span>CurrentTable<span class="token punctuation">}</span>
clause<span class="token punctuation">.</span>Limit<span class="token punctuation">{</span>Limit<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
clause<span class="token punctuation">.</span>OrderByColumn<span class="token punctuation">{</span>
  Column<span class="token punctuation">:</span> clause<span class="token punctuation">.</span>Column<span class="token punctuation">{</span>Table<span class="token punctuation">:</span> clause<span class="token punctuation">.</span>CurrentTable<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> clause<span class="token punctuation">.</span>PrimaryKey<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then GORM build finally querying SQL in the Query callbacks like:</p><p><code>Statement.Build(&quot;SELECT&quot;, &quot;FROM&quot;, &quot;WHERE&quot;, &quot;GROUP BY&quot;, &quot;ORDER BY&quot;, &quot;LIMIT&quot;, &quot;FOR&quot;)</code> Which generate SQL:</p><p><code>SELECT * FROM </code>users<code>ORDER BY</code>users<code>.</code>id<code> LIMIT 1</code> You can define your own Clause and use it with GORM, it needs to implements Interface</p><p>Check out examples for reference</p><h3 id="子句构造器" tabindex="-1"><a class="header-anchor" href="#子句构造器" aria-hidden="true">#</a> 子句构造器</h3><p>For different databases, Clauses may generate different SQL, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// Generated for SQL Server</span>
<span class="token comment">// SELECT * FROM &quot;users&quot; OFFSET 10 ROW FETCH NEXT 5 ROWS ONLY</span>
<span class="token comment">// Generated for MySQL</span>
<span class="token comment">// SELECT * FROM \`users\` LIMIT 5 OFFSET 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which is supported because GORM allows database driver register Clause Builder to replace the default one, take the Limit as example</p><h3 id="子句选项" tabindex="-1"><a class="header-anchor" href="#子句选项" aria-hidden="true">#</a> 子句选项</h3><p>GORM defined Many Clauses, and some clauses provide advanced options can be used for your application</p><p>Although most of them are rarely used, if you find GORM public API can’t match your requirements, may be good to check them out, for example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Insert<span class="token punctuation">{</span>Modifier<span class="token punctuation">:</span> <span class="token string">&quot;IGNORE&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// INSERT IGNORE INTO users (name,age...) VALUES (&quot;jinzhu&quot;,18...);</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="statementmodifier" tabindex="-1"><a class="header-anchor" href="#statementmodifier" aria-hidden="true">#</a> StatementModifier</h3><p>GORM provides interface StatementModifier allows you modify statement to match your requirements, take Hints as example</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;gorm.io/hints&quot;</span>

db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;hint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * /*+ hint */ FROM \`users\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[e];function c(u,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","19-sql构造器.html.vue"]]);export{r as default};
