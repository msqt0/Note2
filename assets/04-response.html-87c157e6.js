import{_ as n,p as s,q as a,a1 as e}from"./framework-7db056f4.js";const t={},p=e(`<h1 id="http-response" tabindex="-1"><a class="header-anchor" href="#http-response" aria-hidden="true">#</a> http/Response</h1><h2 id="responsewriter" tabindex="-1"><a class="header-anchor" href="#responsewriter" aria-hidden="true">#</a> ResponseWriter</h2><p>从服务器向客户端返回响应需要使用 ResponseWriter</p><ul><li><p>ResponseWriter 是一个接口, handler 使用它来返回响应</p></li><li><p>ResponseWriter 是由非导出的<code>http.response</code> struct 支撑的</p><ul><li>在原码中, <code>*http.response</code> 实现了 <code>ResponseWriter</code>接口， 那么可以说 handlerFunc 的 <code>w http.ResponseWriter</code>参数也是按引用传递</li></ul></li></ul><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> Write()</h3><p><code>Write()</code>方法 接受 一个 <code>[]byte</code> 作为参数，然后把它写入到 HTTP 响应的 Body 里面</p><p>如果在 Write 方法被调用时，header 里面没有设置 <code>content-type</code>, 那么数据的前 512 字节就会被用来检测 <code>content-type</code></p><p>即 html 代码会被检测为 <code>Content-type: text/html; charset=utf-8</code></p><h3 id="writeheader" tabindex="-1"><a class="header-anchor" href="#writeheader" aria-hidden="true">#</a> WriteHeader()</h3><p><code>WriteHeader()</code> 方法接受一个整数类型(HTTP 状态码) 参数，并把它作为 HTTP 响应的状态码返回</p><ul><li>如果该方法没有被显式调用，那么在第一次调用 <code>Write()</code> 方法前，会隐式调用<code>WriteHeader(http.StatusOk)</code></li></ul><p>因此, <code>WriteHeader()</code> 主要用来发送错误类的 HTTP 状态码</p><p>调用完 WriteHeader 方法后，仍然可以写入到 ResponseWriter,但无法再修改 header 了</p><h3 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> Header()</h3><p><code>Header()</code> 方法返回 headers 的 map, 可以进行修改</p><p>修改后的 headers 将会体现在返回给客户端的 HTTP 响应里</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>Header()</code> 必须在 <code>WriteHeader()</code>前调用, <code>WriteHeader()</code> 调用后就无法修改 headers 里的值了</p></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">exampleHandlerFunc</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Localtion&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://google.com&quot;</span><span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">exampleHandlerFunc</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
    post <span class="token operator">:=</span> <span class="token operator">&amp;</span>Post<span class="token punctuation">{</span>
        User<span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span>
        Threads<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;third&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    json<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置-response" tabindex="-1"><a class="header-anchor" href="#内置-response" aria-hidden="true">#</a> 内置 Response</h2><ul><li>NotFound 函数, 包装一个 404 状态码和一个额外的信息</li><li>ServeFile 函数， 从文件系统提供文件，返回给请求者</li><li>ServeContent 函数，它可以把实现了 io.ReadSeeker 接口的任何东西里面的内容返回给请求者 <ul><li>还可以处理 Range 请求(范围请求)，如果只请求了资源的一部分内容，那么 ServeContent 就可以如此响应。而 ServeFile 或 io.Copy 则不行</li></ul></li><li>Redirect 函数，告诉客户端重定向到另一个 URL</li></ul>`,20),o=[p];function c(i,u){return s(),a("div",null,o)}const l=n(t,[["render",c],["__file","04-response.html.vue"]]);export{l as default};
