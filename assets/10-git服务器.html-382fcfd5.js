import{_ as e,p as a,q as s,a1 as n}from"./framework-7db056f4.js";const i={},d=n(`<h1 id="搭建-git-服务器" tabindex="-1"><a class="header-anchor" href="#搭建-git-服务器" aria-hidden="true">#</a> 搭建 Git 服务器</h1><p>远程仓库实际上和本地仓库没啥不同，纯粹为了 7x24 小时开机并交换大家的修改。</p><p>GitHub 就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给 GitHub 交保护费，那就只能自己搭建一台 Git 服务器作为私有仓库使用。</p><p>搭建 Git 服务器需要准备一台运行 Linux 的机器，仅以 ubuntu 为例：</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>
<span class="token comment"># 安装 git</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户" aria-hidden="true">#</a> 创建用户</h2><p>创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> adduser <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建登录证书" tabindex="-1"><a class="header-anchor" href="#创建登录证书" aria-hidden="true">#</a> 创建登录证书</h2><p>创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的 <code>id_rsa.pub</code> 文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code> 文件里，一行一个。</p><h2 id="初始化-git-仓库" tabindex="-1"><a class="header-anchor" href="#初始化-git-仓库" aria-hidden="true">#</a> 初始化 Git 仓库</h2><p>先选定一个目录作为 Git 仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code> 目录下输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">git</span> init <span class="token parameter variable">--bare</span> sample.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Git 就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的 Git 仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的 Git 仓库通常都以<code>.git</code> 结尾。然后，把 owner 改为 <code>git</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> git:git sample.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="禁用-shell-登录" tabindex="-1"><a class="header-anchor" href="#禁用-shell-登录" aria-hidden="true">#</a> 禁用 shell 登录</h2><p>出于安全考虑，第二步创建的 git 用户不允许登录 <code>shell</code>，这可以通过编辑<code>/etc/passwd</code> 文件完成。找到类似下面的一行：</p><p><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code></p><p>改为：</p><p><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p><p>这样，git 用户可以正常通过 ssh 使用 git，但无法登录 <code>shell</code>，因为我们为 git 用户指定的 <code>git-shell</code> 每次一登录就自动退出。</p><h2 id="克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆远程仓库" aria-hidden="true">#</a> 克隆远程仓库</h2><p>现在，可以通过 git clone 命令克隆远程仓库了，在各自的电脑上运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git clone git@server:/srv/sample.git</span>
<span class="token comment"># Cloning into &#39;sample&#39;...</span>
<span class="token comment"># warning: You appear to have cloned an empty repository.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),t=[d];function c(o,l){return a(),s("div",null,t)}const p=e(i,[["render",c],["__file","10-git服务器.html.vue"]]);export{p as default};
