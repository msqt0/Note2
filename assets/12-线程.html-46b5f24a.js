import{_ as s,p as a,q as e,a1 as n,R as t}from"./framework-7db056f4.js";const p={},c=n(`<h1 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h1><h2 id="进程的相关概念" tabindex="-1"><a class="header-anchor" href="#进程的相关概念" aria-hidden="true">#</a> 进程的相关概念</h2><ol><li><p>进程之运行中的程序。</p></li><li><p>进程是程序一次执行过程，或是正在运行的一个程序。是动态过程：有它自身的产生、存在和消亡的过程</p></li></ol><h2 id="线程的相关概念" tabindex="-1"><a class="header-anchor" href="#线程的相关概念" aria-hidden="true">#</a> 线程的相关概念</h2><ol><li>线程又进程创建的，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ol><p>其他：</p><ul><li>单线程：同一个时刻，只允许执行一个线程</li><li>多线程：同一时刻，可以执行多个线程</li><li>并发：同一时刻，多个任务交替执行，造成一种”貌似同时“的错觉， 简单的说，单核 cpu 实现的多任务就是并发 <blockquote><p>cpu 在不同的进程中反复切换焦点</p></blockquote></li><li>并行：同一时刻，多个任务同时执行。多核 cpu 可以实现并行 <blockquote><p>由不同的核心同时承担任务的执行</p></blockquote></li></ul><h2 id="线程基本使用" tabindex="-1"><a class="header-anchor" href="#线程基本使用" aria-hidden="true">#</a> 线程基本使用</h2><h3 id="创建线程" tabindex="-1"><a class="header-anchor" href="#创建线程" aria-hidden="true">#</a> 创建线程</h3><ol><li>继承 Thread 类，重写 run 方法</li><li>实现 Runnable 接口，重写 run 方法</li><li>使用一个 Thread 对象的 start 方法开启线程</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果是实现 Runnable 接口的类，可以使用这个方式开启线程</span>
<span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 代理设计模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://user-images.githubusercontent.com/94043894/170499745-df3abd94-7b7c-416e-ab7e-2964bd08887c.png" style="zoom:50%;"><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>请尽量使用实现 Runnable 接口的方式，因为 java 是单继承的，如果继承了 Thread 就无法再继承其他类</p></div><blockquote><ol><li><code>start()</code>方法底层调用了<code>start0()</code>方法，并由 jvm 执行 start0()</li><li><code>start0()</code>在不同系统下的算法不同。</li><li><code>start0()</code>方法只是让线程变成了可运行状态，具体运行取决于 cpu，由 cpu 统一调度</li></ol></blockquote><h3 id="线程常用方法" tabindex="-1"><a class="header-anchor" href="#线程常用方法" aria-hidden="true">#</a> 线程常用方法</h3><ul><li>常用方法一</li></ul><ol><li><code>setName()</code> 设置线程名称，和 name 参数相同</li><li><code>getName()</code> 返回该线程的名称</li><li><code>start()</code> 是线程开始执行</li><li><code>run()</code> 调用线程对象 run 方法</li><li><code>setPriority()</code> 更改线程的优先级</li><li><code>getPriority()</code> 获取线程的优先级</li><li><code>sleep()</code> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li><li><code>interrupt()</code> 中断线程</li></ol><blockquote><ol><li>start 底层会粗行间新的线程，调用 run, run 就是一个简单的方法调用，不会启动新线程</li><li>线程优先级的范围 <ul><li>MAX_PRIORITY 10</li><li>MIN_PRIORITY 1</li><li>NORM_PRIORITY 5</li></ul></li><li>interrupt，中断线程，但并没有真正的结束线程。所以一般用于中断正在休眠进程，即提前结束休眠</li><li>sleep 线程的静态方法，使当前线程休眠</li></ol></blockquote><ul><li>常用方法二</li></ul><ol><li><code>yield()</code> 线程的礼让。让出 cpu，让其他线程执行，但礼让时间不确定，因此不一定成功</li><li><code>join()</code> 线程的插队。插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任务</li></ol><ul><li>用户进程和守护进程</li></ul><ol><li>用户进程：也叫工作进程，当线程的任务执行完或通知方式结束</li><li>守护进程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="线程的生命周期" tabindex="-1"><a class="header-anchor" href="#线程的生命周期" aria-hidden="true">#</a> 线程的生命周期</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span>
<span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>线程状态：</p><ul><li>NEW 尚未启动的线程处于此状态</li><li>RUNNABLE 在 Java 虚拟机中执行的线程处于此状态</li><li>BLOCKED 被阻塞等待监视器锁定的线程处于此状态</li><li>WAITING 正在等待另一个线程执行特定动作的线程处于此状态</li><li>TIMED_WAITING 正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li><li>TERMINATED 已退出的线程处于此状态</li></ul><p><strong>关系逻辑图：</strong></p>`,28),o=t("iframe",{frameborder:"0",style:{width:"100%",height:"463px"},src:"https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&title=JavaThreadState.drawio#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fmosqu1t0%2FSources%2Fmaster%2Fmap%2FJavaThreadState.drawio"},null,-1),l=n(`<h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> Synchronized</h2><p><strong>线程同步机制：</strong></p><ol><li>在多线程编程里，一些敏感数据不运行被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</li><li>当有一个线程对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</li></ol><blockquote><p>互斥锁</p><ol><li>每个对象都对应一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>关键字 synchronized 来与对象的互斥锁联系。当某个对象用 sychronized 修饰时，表明该对象在任一时刻只能由一个线程访问</li><li>同步的局限性：导致程序的执行效率要降低</li><li>同步方法（非静态的）的锁可以是 this，也可以是其他对象（要求是同一个对象）</li><li>同步方法（静态的）的锁为当前类本身。</li></ol></blockquote><h3 id="具体方法" tabindex="-1"><a class="header-anchor" href="#具体方法" aria-hidden="true">#</a> 具体方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//同步代码块</span>
<span class="token keyword">synchronized</span> （对象） <span class="token punctuation">{</span>
    <span class="token comment">//得到对象的锁，才能操作同步代码</span>
    <span class="token comment">//需要被同步代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//synchronized 还可以放在方法声明中，表示整个方法为同步方法</span>

<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> m <span class="token punctuation">(</span><span class="token class-name">Strring</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//需要被同步的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> m <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token comment">/* this */</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;m1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;m2&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>同步方法如果没有使用 static 修饰：默认锁对象为 this</li><li>如果方法使用 static 修饰，默认锁对象：当前类.class</li><li>实现的落地步骤： <ul><li>需要先分析上锁的代码</li><li>选择同步代码块或同步方法</li><li>要求多个线程的锁对象为同一个即可</li></ul></li></ol></div><h3 id="线程的死锁" tabindex="-1"><a class="header-anchor" href="#线程的死锁" aria-hidden="true">#</a> 线程的死锁</h3><p>基本介绍 多个线程都占用对方的锁资源，但不肯相让，导致了死锁，在编程是一定要避免死锁的发生</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Object</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 进入了 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 进入了 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 进入了 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 进入了 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DeadLock</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;线程 A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DeadLock</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;线程 B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里两个线程互相抢夺锁，都进入 BLOCKED 状态后无法释放锁，进入死锁状态</p><h3 id="释放锁" tabindex="-1"><a class="header-anchor" href="#释放锁" aria-hidden="true">#</a> 释放锁</h3><p>会释放锁：</p><ol><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到 break、return</li><li>当前线程在同步代码块、同步方法中出现了未处理的 Error 或 Exception，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的 wait()方法，当线程暂停，并释放锁</li></ol><p>不会释放锁：</p><ol><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()</code>、<code>Thread.yield()</code>方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的<code>suspend()</code>方法将该线程挂起，该线程不会释放锁</li></ol><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>尽量避免使用 <code>suspend()</code> 和 <code>resume()</code> 来控制线程，方法已经不再推荐使用</p></div>`,19),i=[c,o,l];function u(d,k){return a(),e("div",null,i)}const v=s(p,[["render",u],["__file","12-线程.html.vue"]]);export{v as default};
