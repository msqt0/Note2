import{_ as t,p as e,q as a,a1 as n}from"./framework-7db056f4.js";const s={},o=n(`<h1 id="restful" tabindex="-1"><a class="header-anchor" href="#restful" aria-hidden="true">#</a> RESTFul</h1><h2 id="restful-简介" tabindex="-1"><a class="header-anchor" href="#restful-简介" aria-hidden="true">#</a> RESTFul 简介</h2><p>RESTFul 是一种软件架构思想</p><p>REST: <code>Representational State Transfer</code>,表现层资源资源状态转移</p><ul><li>资源</li></ul><blockquote><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成.每个资源组成.每个资源是服务器上一个可命名的抽象概念.因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许并且客户端应用开发者能够理解.与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词.一个资源可以由一个或多个 URL 来标识.URL 既是资源的名称，也是资源在 web 上的地址，对某个资源感兴趣的客户端应用，可以通过资源的 URL 既是资源的名称与其进行交互</p></blockquote><ul><li>资源的表述</li></ul><blockquote><p>资源的表述是一段对于资源在某个特定时刻的状态的描述.可以在客户端，服务端之间转移（交换）.资源的表述可以有多种格式，例如<code>HTML/XML/JSON/纯文本/图片/视频/音频</code>等等.资源的表述格式可以通过协商机制来确定.请求-相应方向的表述通常使用不同的格式。</p></blockquote><ul><li>状态转移</li></ul><blockquote><p>状态转移说的是：在客户端和服务端之间转移(transfer)代表资源状态的表述.通过转移和操作资源的表述，来间接实现操作资源的目的。</p></blockquote><h2 id="restful-的实现" tabindex="-1"><a class="header-anchor" href="#restful-的实现" aria-hidden="true">#</a> RESTFul 的实现</h2><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code></p><p>它们分别对应四种基本操作：<code>GET 用来获取资源</code>,<code>POST 用来新建资源</code>,<code>PUT 用来更新资源</code>,<code>DELETE 用来删除资源</code></p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST 风格</th></tr></thead><tbody><tr><td>查询操作</td><td><code>getUserById?id=1</code></td><td><code>user/1</code>, get 请求方式</td></tr><tr><td>保存操作</td><td><code>saveUser</code></td><td><code>user</code>, post 请求方式</td></tr><tr><td>删除操作</td><td><code>deleteUser?id=1</code></td><td><code>user/1</code>, delete 请求方式</td></tr><tr><td>更新操作</td><td><code>updateUser</code></td><td><code>user</code>, put 请求方式</td></tr></tbody></table><h2 id="hiddenhttpmethodfilter" tabindex="-1"><a class="header-anchor" href="#hiddenhttpmethodfilter" aria-hidden="true">#</a> HiddenHttpMethodFilter</h2><p>在浏览器中除了使用<code>ajax</code>外，默认只能使用表单提交<code>GET</code>和<code>POST</code>请求。</p><p>其他请求方式都默认变为<code>GET</code></p><p>因此可以使用<code>HiddenHttpMethodFilter</code>过滤器模拟除了<code>GET</code>和<code>POST</code>外的请求方式</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>以<code>PUT</code>举例：</p><ol><li>通过在前端表单内放一个<code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;/&gt;</code>隐藏标签，传输类似<code>_method=PUT</code>的 param</li><li><code>HiddenHttpMethodFilter</code>在<code>Servlet</code>识别请求前，把请求类的请求方式伪装为<code>PUT</code></li><li><code>Servlet</code>识别到的请求方式为<code>PUT</code>,相应的<code>Controller</code>处理请求</li></ol><p><img src="https://user-images.githubusercontent.com/94043894/176838688-209e6751-b583-4a4b-9605-d58d187bc04c.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/94043894/176854346-2cbd0a88-b4b2-4815-a5d7-31ed96b80a23.png" alt="image"></p><h3 id="注册过滤器" tabindex="-1"><a class="header-anchor" href="#注册过滤器" aria-hidden="true">#</a> 注册过滤器</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- web.xml --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>任何过滤器必须要配置在<code>CharacterEncodingFilter</code>前面，因为一旦其他过滤器使用获取了 request 对象，<code>CharacterEncodingFilter</code>就会失效</p></div>`,27),c=[o];function d(p,l){return e(),a("div",null,c)}const r=t(s,[["render",d],["__file","07-RESTFul.html.vue"]]);export{r as default};
