import{_ as e,p as n,q as a,a1 as s}from"./framework-7db056f4.js";const i={},l=s(`<h1 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h1><p>##标签选择器 选择所有 div 标签：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="id-选择器" tabindex="-1"><a class="header-anchor" href="#id-选择器" aria-hidden="true">#</a> ID 选择器</h2><p>选择 ID 为 rect-1 的标签：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#rect-1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类选择器" tabindex="-1"><a class="header-anchor" href="#类选择器" aria-hidden="true">#</a> 类选择器</h2><p>选择所有 rectangle 类的标签：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.rectangle</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="伪类选择器" tabindex="-1"><a class="header-anchor" href="#伪类选择器" aria-hidden="true">#</a> 伪类选择器</h2><p>伪类用于定义元素的特殊状态。</p><p>链接伪类选择器：</p><ul><li><code>:link</code>：链接访问前的样式</li><li><code>:visited</code>：链接访问后的样式</li><li><code>:hover</code>：鼠标悬停时的样式</li><li><code>:active</code>：鼠标点击后长按时的样式</li><li><code>:focus</code>：聚焦后的样式</li></ul><p>位置伪类选择器：</p><ul><li><code>:nth-child(n)</code>：选择是其父标签第 n 个子元素的所有元素。</li></ul><p>目标伪类选择器：</p><ul><li><code>:target</code>：当 url 指向该元素时生效。</li></ul><h3 id="表单相关" tabindex="-1"><a class="header-anchor" href="#表单相关" aria-hidden="true">#</a> 表单相关</h3><ul><li><code>:required</code> 和<code>:option</code><ul><li>匹配表单必填的标签 和 表单选填的标签</li></ul></li><li><code>:in-range</code>和<code>:out-of-range</code><ul><li>匹配在范围内的标签 和 大于最大值的标签</li></ul></li><li><code>:valid</code>和<code>:innalid</code><ul><li>匹配符合表单验证的标签 和 不符合表单验证的标签</li></ul></li><li><code>:read-only</code>和<code>:read-write</code><ul><li>匹配 disable，read-only 的标签 和 可以写的标签 contenteditable</li></ul></li></ul><h2 id="复合选择器" tabindex="-1"><a class="header-anchor" href="#复合选择器" aria-hidden="true">#</a> 复合选择器</h2><p>由两个及以上基础选择器组合而成的选择器。</p><ul><li><code>element1, element2</code>：同时选择元素 element1 和元素 element2。</li><li><code>element.class</code>：选则包含某类的 element 元素。</li><li><code>element1 + element2</code>：选择紧跟 element1 的 element2 元素。</li><li><code>element1 element2</code>：选择 element1 内的所有 element2 元素。</li><li><code>element1 &gt; element2</code>：选择父标签是 element1 的所有 element2 元素。</li></ul><h2 id="通配符选择器" tabindex="-1"><a class="header-anchor" href="#通配符选择器" aria-hidden="true">#</a> 通配符选择器</h2><p><code>*</code>：选择所有标签</p><ul><li><code>[attribute]</code>：选择具有某个属性的所有标签</li><li><code>[attribute=value]</code>：选择 attribute 值为 value 的所有标签</li></ul><h2 id="伪元素选择器" tabindex="-1"><a class="header-anchor" href="#伪元素选择器" aria-hidden="true">#</a> 伪元素选择器</h2><p>将特定内容当做一个元素，选择这些元素的选择器被称为伪元素选择器。</p><ul><li><code>::first-letter</code>：选择第一个字母</li><li><code>::first-line</code>：选择第一行</li><li><code>::selection</code>：选择已被选中的内容</li><li><code>::after</code>：可以在元素后插入内容</li><li><code>::before</code>：可以在元素前插入内容</li></ul><h2 id="样式渲染优先级" tabindex="-1"><a class="header-anchor" href="#样式渲染优先级" aria-hidden="true">#</a> 样式渲染优先级</h2><p>权重大小，越具体的选择器权重越大：<code>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类与伪类选择器 &gt; 标签选择器 &gt; 通用选择器</code> 权重相同时，后面的样式会覆盖前面的样式 继承自父元素的权重最低</p>`,30),c=[l];function t(d,o){return n(),a("div",null,c)}const r=e(i,[["render",t],["__file","02-选择器.html.vue"]]);export{r as default};
