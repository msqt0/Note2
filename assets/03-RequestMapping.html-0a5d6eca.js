import{_ as n,p as a,q as s,a1 as e}from"./framework-7db056f4.js";const t={},p=e(`<h1 id="requestmapping-注解" tabindex="-1"><a class="header-anchor" href="#requestmapping-注解" aria-hidden="true">#</a> @RequestMapping 注解</h1><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><p>从注解名称上我们可以看到，<code>@RequestMapping</code>注解的作用就是请求和处理请求的控制器方法关联起来，建立映射关系</p><p>SpringMVC 接收到指定请求，就会来找到在映射关系中对应的控制器来处理这个请求</p><h2 id="位置" tabindex="-1"><a class="header-anchor" href="#位置" aria-hidden="true">#</a> 位置</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@RequestMapping 的元注解</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@RequestMapping 标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping 标识一个方法：设置映射请求的请求路径的具体信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> demoController <span class="token punctuation">{</span>
<span class="token comment">//    此时请求映射所映射的请求的请求路径为：/demo/test</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h3 id="value-属性" tabindex="-1"><a class="header-anchor" href="#value-属性" aria-hidden="true">#</a> value 属性</h3><p><code>@RequestMapping</code>注解的 value 属性通过请求的请求地址匹配请求映射</p><p><code>@RequestMapping</code>注解的 value 属性是一个<strong>字符串类型的数组</strong>，表示该请求映射能够匹配多个请求地址所对应的请求</p><p><code>@RequestMapping</code>注解的 value 属性必须设置，至少通过请求地址匹配请求映射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="method-属性" tabindex="-1"><a class="header-anchor" href="#method-属性" aria-hidden="true">#</a> method 属性</h3><p><code>@RequestMapping</code>注解的 method 属性通过请求的请求方式(get 或 post)匹配请求映射</p><p><code>@RequestMapping</code>注解的 method 属性是一个 RequestMethod 类型的枚举数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的 value 属性，但是请求方式不满足 method 属性，则浏览器报错 405: <code>Request method &#39;POST&#39; not supported</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>method 属性表示的是约束条件，即只有通过该条件发送请求才能被正确地处理（只满足其中一个条件即可）</p><p>默认表示没有限制，什么方式的请求都会被处理</p></div><details class="custom-container details"><summary>更多</summary><ol><li><p>对于处理指定请求方式的控制器方法，SpringMVC 中提供了@RequestMapping 的派生注解处理 get 请求的映射</p><ul><li><code>@GetMapping</code> 处理 get 请求的映射</li><li><code>@PostMapping</code> 处理 post 请求的映射</li><li><code>@PutMapping</code> 处理 put 请求的映射</li><li><code>@DeleteMapping</code> 处理 delete 请求的映射</li></ul></li><li><p>常用的请求方式有 get，post，put，delete 但是目前浏览器只支持 get 和 post，若在<code>form</code>表单提交时，为 method 设置了其他请求方式的字符串(put 或 delete)，则按照默认的请求方式 get 处理</p></li></ol><p>若要发送 put 和 delete 请求，则需要通过 spring 提供的过滤器 HiddenHttpMethodFilter</p></details><h3 id="params-属性" tabindex="-1"><a class="header-anchor" href="#params-属性" aria-hidden="true">#</a> params 属性</h3><p><code>@RequestMapping</code>注解的 params 属性通过请求的请求参数匹配请求映射</p><p><code>@RequestMapping</code>注解的 params 属性是一个字符串类型数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><ul><li><code>param</code>: 要求请求映射所匹配的请求必须携带 param 请求参数</li><li><code>!param</code>: 要求请求映射所匹配的请求必须不能携带 param 请求参数</li><li><code>param = value</code>: 要求请求映射所匹配的请求必须携带 param 请求参数且<code>param</code>值等于<code>value</code></li><li><code>param != value</code>: 要求请求映射所匹配的请求必须携带 param 请求参数但是 <code>param</code>值不等于<code>value</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>
            value <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
            params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;user=admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password!=123456&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>user=admin</code>,等号两边不能有空格</p></div><h3 id="header-属性" tabindex="-1"><a class="header-anchor" href="#header-属性" aria-hidden="true">#</a> header 属性</h3><p><code>@RequestMapping</code>注解的 headers 属性通过请求的请求头信息匹配请求映射</p><p><code>@RequestMapping</code>注解的 headers 属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><ul><li><code>header</code>: 要求请求映射所匹配的请求必须携带 header 请求头信息</li><li><code>!header</code>: 要求请求映射所匹配的请求必须不能携带 header 请求头信息</li><li><code>header = value</code>: 要求请求映射所匹配的请求必须携带 header 请求头信息且<code>header</code>值等于<code>value</code></li><li><code>header != value</code>: 要求请求映射所匹配的请求必须携带 header 请求头信息但是 <code>header</code>值不等于<code>value</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>若当前请求满足<code>@RequestMapping</code>注解的 value 和 method 属性，但是不满足 header 属性，此时页面显示 404 错误，即资源未找到</p></div><details class="custom-container details"><p>总结一下报错代码：</p><ul><li>value 不匹配：404</li><li>method 不匹配：405</li><li>params 不匹配：400</li><li>headers 不匹配：404</li></ul></details><h3 id="springmvc-支持-ant-风格的路径" tabindex="-1"><a class="header-anchor" href="#springmvc-支持-ant-风格的路径" aria-hidden="true">#</a> SpringMVC 支持 ant 风格的路径</h3><ol><li><code>?</code>: 表示任意单个字符</li><li><code>*</code>: 表示任意 0 或多个字符</li><li><code>**</code>: 表示任意的一层或多层目录</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>
            value <span class="token operator">=</span> <span class="token string">&quot;/abc?d*e/**/test&quot;</span><span class="token punctuation">,</span>
            params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;!user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password!=123456&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>在使用<code>**</code>时，只能使用<code>/**/xxx</code>的方式</p></div><h3 id="×springmvc-支持路径中的占位符" tabindex="-1"><a class="header-anchor" href="#×springmvc-支持路径中的占位符" aria-hidden="true">#</a> ×SpringMVC 支持路径中的占位符</h3><p>原始方法：<code>/deleteUser?id=1</code></p><p>rest 方法：<code>/deleteUser/1</code></p><p>SpringMVC 路径中的占位符常用于 restful 风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的<code>@RequestMapping</code>注解的 value 属性中通过占位符号{xxx}表示传输的数据，在通过<code>@PathVariable</code>注解，将占位符所表示的数据赋值给控制器方法的形参</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/test/1}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>test!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id:&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","03-RequestMapping.html.vue"]]);export{d as default};
