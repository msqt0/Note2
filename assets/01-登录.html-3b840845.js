import{_ as e,p as s,q as a,a1 as t}from"./framework-7db056f4.js";const d={},n=t(`<h1 id="登录篇" tabindex="-1"><a class="header-anchor" href="#登录篇" aria-hidden="true">#</a> 登录篇</h1><p>这里以 Web 前后端的简单部署为例做个笔记</p><h2 id="发行版选择" tabindex="-1"><a class="header-anchor" href="#发行版选择" aria-hidden="true">#</a> 发行版选择</h2><ul><li>ubuntu</li><li>centos</li></ul><p>这两都是免费开源的，用户很多，很适合部署我的小项目</p><p>我会选择 ubuntu 20 为例</p><blockquote><p>个人感觉 centos 的包管理有时候安东西会出现很奇怪的错误，其实区别也不大</p></blockquote><h2 id="终端选择" tabindex="-1"><a class="header-anchor" href="#终端选择" aria-hidden="true">#</a> 终端选择</h2><p>linux 需要输入指令的地方比较多，需要一个终端来操作，这里可以选择一个你喜欢的终端，无论操作系统</p><blockquote><p>windows 也有 xshell 等工具可以方便地使用，这里不在笔记里详细描述了。</p></blockquote><h2 id="ssh-登录" tabindex="-1"><a class="header-anchor" href="#ssh-登录" aria-hidden="true">#</a> ssh 登录</h2><h3 id="开启-ssh" tabindex="-1"><a class="header-anchor" href="#开启-ssh" aria-hidden="true">#</a> 开启 ssh</h3><p>首先，unbuntu 默认未开启 ssh 服务器喔，因此我们可能还无法通过服务器运营商提供的工具以外的方式访问服务器（如果运营商默认开启了，当我没说，直接跳到登录部分吧）</p><p>所以，首先使用官方提供的工具（一般就是网页控制台啥的）进入系统</p><p><b>以腾讯云为例：</b></p><p><img src="https://user-images.githubusercontent.com/94043894/184609254-74a555be-d8ee-48f4-a2e7-0204b0760ce4.png" alt="image"></p><p><b>登录后，使用命令：</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">passwd</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置 root 用户 密码</p><p><img src="https://user-images.githubusercontent.com/94043894/184610272-0d846161-24eb-475a-980a-c65b25971587.png" alt="image"></p><p><b>成功后，可以开始开启 ssh 服务了，使用命令：</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用 vim 编辑 ssh 配置文件</p><p>没学过 vim 的先熟悉一下基础的使用，linux 需要经常使用（用 nano 或者图形化工具的当我没说吧）</p><p><b>需要修改的地方：</b></p><ul><li>找到 <code>#Authentication</code> 下的 <code>#PermitRootLogin</code>, 把注释<code>#</code>去掉，并把紧跟它之后的参数改为 <code>yes</code></li><li>找到 <code>#Authentication</code> 下的 <code>#PasswordAuthentication</code>, 把注释<code>#</code>去掉，并把紧跟它之后的参数改为 <code>yes</code></li></ul><table><thead><tr><th>修改后 be like</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/184612083-1024b9f6-51bc-4ca3-b85e-2bd3d5a683fd.png" alt="image"></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>记得保存，vim 按<code>&lt;ESC&gt;</code>进入 normal 模式，使用<code>:wq</code>保存退出</p></div><p><b>退出后，重启 ssh 服务使用命令：</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="端口放行" tabindex="-1"><a class="header-anchor" href="#端口放行" aria-hidden="true">#</a> 端口放行</h3><p>一般这个步骤是不用操作的，因为运营商早已经在控制台防火墙内把<code>22</code>端口默认放行了，如果你的服务器没有，或者你更改过 ssh 服务的端口号，必须要手动放行才能访问，具体操作自行搜索学习</p><p><b>以腾讯云为例：</b></p><table><thead><tr><th>防火墙</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/184619764-ccdae88b-8939-4c87-b06b-3ce3721aaee4.png" alt="image"></td></tr></tbody></table><h3 id="登录-ssh" tabindex="-1"><a class="header-anchor" href="#登录-ssh" aria-hidden="true">#</a> 登录 ssh</h3><p>你如果更倾向使用<code>xshell</code>等方便的工具连接 ssh，可以不必继续看下面的内容了，但如果你更倾向用操作系统原生的终端连接 ssh，或者有点好奇，请继续往下看</p><blockquote><p>前提是你的操作系统安装了 openssh 软件包（一般来说，主流操作系统默认都安装有）</p></blockquote><p>登录 ssh 可以选择两种验证方式：</p><ul><li>密码验证</li><li>rsa 密钥验证</li></ul><h4 id="需要密码的登录" tabindex="-1"><a class="header-anchor" href="#需要密码的登录" aria-hidden="true">#</a> 需要密码的登录</h4><p>只要你拥有该系统上任意账户的密码，你就可以使用这个方法登录</p><p>打开你的终端，输入命令：</p><p><b>命令：</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> username@127.0.0.1
<span class="token comment"># username 为目标用户名 127.0.0.1 为目标服务器外网 ip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在很多场景下都是使用密码验证的方式，但是每次输入密码都很麻烦，因此如果是经常使用的服务器，推荐使用 rsa 密钥验证</p><h4 id="不用-密码-的登录" tabindex="-1"><a class="header-anchor" href="#不用-密码-的登录" aria-hidden="true">#</a> 不用&quot;密码&quot;的登录</h4><p>当然所谓的不用&quot;密码&quot;，并不是不需要真正的密码，其实是既需要用户密码，又需要 rsa 公钥</p><p>关于 rsa 加密及验证的细节不在这篇笔记的重点上，感兴趣自行搜索学习</p><p><b>总而言之，言而总之，登录过程可以简单描述成：</b></p><p>使用 rsa 登录 ssh，只需要第一次登录时使用用户的密码验证，ssh 同时会把你在本地生成好的<code>rsa_pub</code>公钥发送保存到<b>目标用户家目录下</b>的<code>.ssh/authorized_keys</code>里，可以简单理解为白名单。从此以后，每当你 ssh 到目标服务器的目标用户时，ssh 都会自动地把服务器保存的<code>rsa_pub</code>公钥和你本地的<code>rsa</code>私钥进行验证，验证通过即可直接登录。</p><p>因此，实现步骤的第一步是，<b>在本地生成 rsa 密钥（包括公钥和私钥）</b></p><p><b>使用命令：</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-o</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ssh 会提示<code>.ssh</code>，保存的目录，建议不要更换，之后或许你还会使用同一个密钥来验证其他业务，这样比较方便（比如 git）</p><p>然后 ssh 会提示你输入两次密码，这个是验证 rsa 的密码，可以为空，若不填写直接回车</p><table><thead><tr><th>例子</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/184626262-1537d337-38f9-4412-bd67-7de6bd96806f.png" alt="image"></td></tr></tbody></table><p>默认情况下，生成的密钥文件（私钥：<code>id_rsa</code>，公钥：<code>id_rsa.pub</code>）都会在家目录下，如果你使用的是 Linux/macOS， 则会在<code>~/.ssh/</code>,如果是 windows,自行找到它是你的功课了：)</p><table><thead><tr><th>.ssh 目录</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/184627354-af54aa2b-d9e0-4ef0-8ec5-80dfd87027b0.png" alt="image"></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>-o</code> 选项是它会以比默认格式更能抗暴力破解的格式保存私钥，如你输入了密码，请务必加上这个选项</p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>建议最好不要修改 ssh 密钥存放的目录，我个人认为原因有 3 个：</p><ol><li>安全问题：不应当把私钥暴露给他人，家目录相对其他公共目录更加安全</li><li>个人原因：忘记密钥存放目录</li><li>冲突原因：虽然我没见过，但若有其他需要密钥验证的业务，它们可能会找不到你的密钥，导致不必要的麻烦</li></ol></div><p>第二步，<b>将公钥存入目标 ssh 服务器的目标账户</b></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub username@127.0.0.1
<span class="token comment"># username 为目标用户名 127.0.0.1 为目标服务器外网 ip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是第一次连接到的 ssh 服务器需要记录，输入 yes 就好了</p><p>输入目标用户的密码</p><table><thead><tr><th>例子</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/184628410-3eff90e1-28f7-4d55-a026-0dea4e2749b0.png" alt="image"></td></tr></tbody></table><p>好的，如果到这里全部执行成功，恭喜你大功告成了，最后一步就是登录了</p><p>从此之后你，只需要在终端输入<code>ssh user@127.0.0.1</code></p><p>就可以直接连上目标服务器了</p>`,68),i=[n];function c(o,r){return s(),a("div",null,i)}const h=e(d,[["render",c],["__file","01-登录.html.vue"]]);export{h as default};
