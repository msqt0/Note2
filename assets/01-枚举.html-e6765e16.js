import{_ as m,M as k,p as v,q as _,R as t,N as n,V as s,t as a,a1 as l}from"./framework-7db056f4.js";const b={},h=t("h1",{id:"枚举",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#枚举","aria-hidden":"true"},"#"),a(" 枚举")],-1),f=t("h2",{id:"前缀和",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前缀和","aria-hidden":"true"},"#"),a(" 前缀和")],-1),g=t("p",null,"就是把某下标前的元素都加起来，结果作为在这个下标下的前缀和",-1),y=t("p",null,"例如： 有数组 a[1~n], 存在 S[1~n] 满足",-1),x={class:"katex-display"},w={class:"katex"},L={class:"katex-mathml"},R=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span></span></span>',1),S={class:"katex-display"},O={class:"katex"},q={class:"katex-mathml"},j=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span></span></span>',1),I={class:"katex-display"},N={class:"katex"},V={class:"katex-mathml"},E=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathrm">3</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">3</span><span class="mclose">]</span></span></span>',1),B={class:"katex-display"},T={class:"katex"},C={class:"katex-mathml"},P=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.10556em;"></span><span class="strut bottom" style="height:0.10556em;vertical-align:0em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span></span></span>',1),A=t("p",null,[a("就称 "),t("code",null,"S"),a(" 为 "),t("code",null,"a"),a(" 的前缀和")],-1),D=t("p",null,"前缀和的特点：",-1),M={class:"katex"},z={class:"katex-mathml"},F=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),G={class:"katex"},H={class:"katex-mathml"},J=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span>',1),K=t("code",null,"a[l] +...+a[r]",-1),Q={class:"katex"},U={class:"katex-mathml"},W=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span>',1),X=t("h3",{id:"差分",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#差分","aria-hidden":"true"},"#"),a(" 差分")],-1),Y=t("p",null,"差分是前缀和的逆运算",-1),Z=t("p",null,"例如： 有数组 a[1~n], 存在 b[1~n] 满足",-1),$={class:"katex-display"},nn={class:"katex"},sn={class:"katex-mathml"},an=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">b</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span></span></span>',1),tn={class:"katex-display"},pn={class:"katex"},en={class:"katex-mathml"},ln=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">b</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">−</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span></span></span>',1),on={class:"katex-display"},cn={class:"katex"},un={class:"katex-mathml"},rn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">b</span><span class="mopen">[</span><span class="mord mathrm">3</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">3</span><span class="mclose">]</span><span class="mbin">−</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span></span></span>',1),dn={class:"katex-display"},kn={class:"katex"},mn={class:"katex-mathml"},vn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.10556em;"></span><span class="strut bottom" style="height:0.10556em;vertical-align:0em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span></span></span>',1),_n=t("p",null,"差分的特点：",-1),bn={class:"katex"},hn={class:"katex-mathml"},fn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),gn={class:"katex"},yn={class:"katex-mathml"},xn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span>',1),wn=t("code",null,"(a[l] ~ a[r]) + c",-1),Ln={class:"katex"},Rn={class:"katex-mathml"},Sn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mbin">+</span><span class="mrel">=</span><span class="mord mathit">c</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">−</span><span class="mrel">=</span><span class="mord mathit">c</span></span></span>',1),On=l('<h2 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h2><p>这个比较难梳理，双指针算法在很多场景中都常见，包括很多算法，最常见的场景是<b>数组和链表（即线性的表中）</b></p><p><b>描述：</b> 使用两个指针（抽象概念的指针），通过适当的条件移动它们达到在不同的数据间（或同一数据的不同位置）进行灵活处理的目的</p><h3 id="尺取法" tabindex="-1"><a class="header-anchor" href="#尺取法" aria-hidden="true">#</a> 尺取法</h3><p>其实就是普通的双指针思想</p><p>思路就是两个指针指向头尾，在不同的条件下移动首尾指针以遍历所有可能性结果</p>',6),qn=t("b",null,"时间复杂度：",-1),jn={class:"katex"},In={class:"katex-mathml"},Nn=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),Vn=t("p",null,[t("b",null,"例如：")],-1),En={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},Bn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">var</span> st <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token keyword">for</span> l <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span>
            r <span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">--</span>
            l <span class="token operator">++</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每次移动尾指针后，若重复字符增加，就左移指针直到两指针围成字符串合法，并取合法字符串的最大长度，最后得到答案</p></blockquote><p><b>对撞指针</b></p>`,3),Tn={href:"https://leetcode.cn/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"},Cn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    h <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">{</span>
        <span class="token keyword">if</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
            l <span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span>
            r <span class="token operator">--</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> h <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> max <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> b
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>初始时，首尾指针构成的底边最长，每次把矮的边向里移动，若矮边变长则能获得更大的面积，直到两指针相遇，取其中最大的面积（具体证明看题解吧）</p></blockquote><h3 id="经典类型的模板" tabindex="-1"><a class="header-anchor" href="#经典类型的模板" aria-hidden="true">#</a> 经典类型的模板</h3>`,3),Pn={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},An=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> r <span class="token operator">&lt;</span> <span class="token builtin">len</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>l <span class="token operator">++</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span>
        r <span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Dn={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},Mn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    idx <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">if</span> v <span class="token operator">!=</span> val <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>idx <span class="token operator">++</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> idx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),zn={href:"https://leetcode.cn/problems/3sum/",target:"_blank",rel:"noopener noreferrer"},Fn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    res <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res
    <span class="token punctuation">}</span>
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        L <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span>
        R <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token punctuation">{</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>L <span class="token operator">++</span><span class="token punctuation">}</span>
                <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>R <span class="token operator">--</span><span class="token punctuation">}</span>
                L <span class="token operator">++</span>
                R <span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                L <span class="token operator">++</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                R <span class="token operator">--</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gn={href:"https://leetcode.cn/problems/4sum/",target:"_blank",rel:"noopener noreferrer"},Hn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">len</span> <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span>  j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            L<span class="token punctuation">,</span> R <span class="token operator">:=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token punctuation">{</span>
                <span class="token keyword">if</span> sum <span class="token operator">:=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>sum <span class="token operator">==</span> target <span class="token punctuation">{</span>
                    res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>L <span class="token operator">++</span><span class="token punctuation">}</span>
                    <span class="token keyword">for</span> L <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>R <span class="token operator">--</span><span class="token punctuation">}</span>
                    L <span class="token operator">++</span>
                    R <span class="token operator">--</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target <span class="token punctuation">{</span>
                    L <span class="token operator">++</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    R <span class="token operator">--</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这些题相似的地方都是在枚举，且在适当的条件下移动指针以优化</p></div><h2 id="分而治之" tabindex="-1"><a class="header-anchor" href="#分而治之" aria-hidden="true">#</a> 分而治之</h2><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h3><p>二分查找(binary search) <b>描述：</b></p><p>是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使<b>搜索范围</b>缩小一半。</p><blockquote><p>搜索范围，我个人倾向于把二分理解成：搜索是在由<code>l</code> 和 <code>r</code>围成的区间内进行的，而每次搜索得到的信息都可以帮助减小区间，从而得以优化搜索时间</p></blockquote>`,7),Jn=t("b",null,"时间复杂度：",-1),Kn={class:"katex"},Qn={class:"katex-mathml"},Un=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),Wn=l(`<p>二分查找的本质是<b>边界</b>, 即查找出<b>由满足条件的值</b>组成集合的边界值</p><p><b>模板：</b></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">bsearch_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>

    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token comment">// check()判断 mid 是否满足性质</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">bsearch_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里，cpp 中加法优先级比右移动高可以不加括号</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b>例如：</b></p>`,4),Xn={href:"https://leetcode.cn/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"},Yn=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">for</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">{</span>
        mid <span class="token operator">:=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">{</span><span class="token keyword">return</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> l
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找的是满足条件<code>nums[mid] &gt;= target</code>的集合左边界（即大于等于 target 的第一个数），满足此条件时<code>r</code>应该向左移动以缩小范围，因此选择模板一</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>根据<code>check()</code>条件来选择模板，要查找左边界还是右边界（有些情况下，集合的概念会淡化，两个模板的使用就没有区别，因此需要据条件分析）</p><p>死记硬背的话，+1 为右边界，不+1 为左边界:()</p></div><blockquote><p>当使用到第二个模板时，<code>mid = ( l + r + 1 ) &gt;&gt; 1</code>，多加一是为了防止进入死循环；若没有加一<code>mid = ( l + r ) &gt;&gt; 1</code>，当 <code>r = l + 1</code> 时（即查找进入尾声，只有两个元素在查找区间） <code>mid = ( 2*l + 1 ) &gt;&gt; 1 = l</code>（cpp 默认向下取整）, 这导致了，本应当满足条件 <code>l = r </code>退出循环的情况变成<code>l = mid = l != r</code>从而无限循环；因此加一可以避免 cpp 向下取整带来的整数二分 bug</p></blockquote><h4 id="特别题目" tabindex="-1"><a class="header-anchor" href="#特别题目" aria-hidden="true">#</a> 特别题目</h4>`,5),Zn={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"},$n=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>
    l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">for</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">{</span>
        mid <span class="token operator">:=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>

        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> target <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> l <span class="token operator">==</span> mid <span class="token punctuation">{</span>
                l <span class="token operator">++</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> r <span class="token operator">==</span> mid <span class="token punctuation">{</span>
                r <span class="token operator">--</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这道题和平常二分法查找的不同就在于，把一个有序递增的数组分成了，两个递增的数组，我们需要做的就是判断这个数在哪一个递增的数组中，然后再去用常规的二分法去解决</p></blockquote>`,2);function ns(ss,as){const e=k("mi"),p=k("mo"),o=k("mn"),c=k("mrow"),u=k("annotation"),i=k("semantics"),r=k("math"),d=k("ExternalLinkIcon");return v(),_("div",null,[h,f,g,y,t("p",null,[t("span",x,[t("span",w,[t("span",L,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[1] = a[1] ")]),_:1})]),_:1})]),_:1})]),R])])]),t("p",null,[t("span",S,[t("span",O,[t("span",q,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[2] = a[1] + a[2] ")]),_:1})]),_:1})]),_:1})]),j])])]),t("p",null,[t("span",I,[t("span",N,[t("span",V,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("3")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("3")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[3] = a[1] + a[2] + a[3] ")]),_:1})]),_:1})]),_:1})]),E])])]),t("p",null,[t("span",B,[t("span",T,[t("span",C,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("... ")]),_:1})]),_:1})]),_:1})]),P])])]),A,D,t("ul",null,[t("li",null,[a("构造只需要"),t("span",M,[t("span",z,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(e,null,{default:s(()=>[a("n")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(n)")]),_:1})]),_:1})]),_:1})]),F]),a(" 的时间复杂度")]),t("li",null,[a("能在"),t("span",G,[t("span",H,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(1)")]),_:1})]),_:1})]),_:1})]),J]),a("的时间复杂度求解数组任意区间的和 "),t("blockquote",null,[t("p",null,[a("例如，求解"),K,a("，使用前缀和有"),t("span",Q,[t("span",U,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("r")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("−")]),_:1}),n(e,null,{default:s(()=>[a("S")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("l")]),_:1}),n(p,null,{default:s(()=>[a("−")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("l")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("r")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[r] - S[l - 1] = a[l] + ... + a[r]")]),_:1})]),_:1})]),_:1})]),W])])])])]),X,Y,Z,t("p",null,[t("span",$,[t("span",nn,[t("span",sn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("b")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("b[1] = a[1] ")]),_:1})]),_:1})]),_:1})]),an])])]),t("p",null,[t("span",tn,[t("span",pn,[t("span",en,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("b")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("−")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("b[2] = a[2] - a[1] ")]),_:1})]),_:1})]),_:1})]),ln])])]),t("p",null,[t("span",on,[t("span",cn,[t("span",un,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("b")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("3")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("3")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("−")]),_:1}),n(e,null,{default:s(()=>[a("a")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(o,null,{default:s(()=>[a("2")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("b[3] = a[3] - a[2] ")]),_:1})]),_:1})]),_:1})]),rn])])]),t("p",null,[t("span",dn,[t("span",kn,[t("span",mn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1}),n(e,{mathvariant:"normal"},{default:s(()=>[a(".")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("... ")]),_:1})]),_:1})]),_:1})]),vn])])]),_n,t("ul",null,[t("li",null,[a("使用差分数组构造前缀和只需要"),t("span",bn,[t("span",hn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(e,null,{default:s(()=>[a("n")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(n)")]),_:1})]),_:1})]),_:1})]),fn]),a(" 的时间复杂度")]),t("li",null,[a("能在"),t("span",gn,[t("span",yn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(1)")]),_:1})]),_:1})]),_:1})]),xn]),a("的时间复杂度内对数组任意期间内的数进行运算 "),t("blockquote",null,[t("p",null,[a("例如，要操作"),wn,a(", 使用差分数组要"),t("span",Ln,[t("span",Rn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("b")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("l")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("c")]),_:1}),n(p,{separator:"true"},{default:s(()=>[a(",")]),_:1}),n(e,null,{default:s(()=>[a("b")]),_:1}),n(p,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("r")]),_:1}),n(p,null,{default:s(()=>[a("+")]),_:1}),n(o,null,{default:s(()=>[a("1")]),_:1}),n(p,null,{default:s(()=>[a("]")]),_:1}),n(p,null,{default:s(()=>[a("−")]),_:1}),n(p,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("c")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("b[l] += c, b[r+1] -= c")]),_:1})]),_:1})]),_:1})]),Sn]),a("，差分数组的前缀和即是答案")])])])]),On,t("p",null,[qn,a("一般为"),t("span",jn,[t("span",In,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(e,null,{default:s(()=>[a("n")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(n)")]),_:1})]),_:1})]),_:1})]),Nn])]),Vn,t("p",null,[t("a",En,[a(" 3. 无重复字符的最长子串 "),n(d)])]),Bn,t("p",null,[t("a",Tn,[a("11. 盛最多水的容器"),n(d)])]),Cn,t("p",null,[t("a",Pn,[a(" 26. 删除有序数组中的重复项 "),n(d)])]),An,t("p",null,[t("a",Dn,[a(" 27. 移除元素 "),n(d)])]),Mn,t("p",null,[t("a",zn,[a(" 15. 三数之和 "),n(d)])]),Fn,t("p",null,[t("a",Gn,[a(" 18. 四数之和 "),n(d)])]),Hn,t("p",null,[Jn,t("span",Kn,[t("span",Qn,[n(r,null,{default:s(()=>[n(i,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("O")]),_:1}),n(p,null,{default:s(()=>[a("(")]),_:1}),n(e,null,{default:s(()=>[a("l")]),_:1}),n(e,null,{default:s(()=>[a("o")]),_:1}),n(e,null,{default:s(()=>[a("g")]),_:1}),n(e,null,{default:s(()=>[a("n")]),_:1}),n(p,null,{default:s(()=>[a(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("O(logn)")]),_:1})]),_:1})]),_:1})]),Un])]),Wn,t("p",null,[t("a",Xn,[a("35. 搜索插入位置"),n(d)])]),Yn,t("p",null,[t("a",Zn,[a(" 33. 搜索旋转排序数组 "),n(d)])]),$n])}const ps=m(b,[["render",ns],["__file","01-枚举.html.vue"]]);export{ps as default};
