import{_ as n,p as s,q as a,a1 as e}from"./framework-7db056f4.js";const t={},p=e(`<h1 id="基础内容" tabindex="-1"><a class="header-anchor" href="#基础内容" aria-hidden="true">#</a> 基础内容</h1><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 单行注释</span>

<span class="token comment">--[[
    多行注释
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h3><p>在默认情况下，变量总是认为是全局的。</p><p>全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil</p><p>如果你想删除一个全局变量，只需要将变量赋值为 nil。</p><p>这样变量 b 就好像从没被使用过一样。换句话说, 当且仅当一个变量不等于 nil 时，这个变量即存在。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 创建了一个全局变量</span>
var<span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span>

<span class="token comment">-- 把它删除了</span>
var<span class="token operator">=</span><span class="token keyword">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>表示一个无效值（在条件表达式中相当于 false）</td></tr><tr><td>boolean</td><td>包含两个值：false 和 true</td></tr><tr><td>number</td><td>双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个&quot;关联数组&quot;（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过&quot;构造表达式&quot;来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 可以使用type函数测试给定变量或者值的类型</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">--&gt; string</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token number">10.4</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">--&gt; number</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">--&gt; function</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">--&gt; function</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">--&gt; boolean</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">--&gt; nil</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">--&gt; string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua-变量" tabindex="-1"><a class="header-anchor" href="#lua-变量" aria-hidden="true">#</a> Lua 变量</h2><p>变量在使用前，必须在代码中进行声明，即创建该变量。</p><p>编译程序执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。</p><p>Lua 变量有三种类型：</p><ul><li>全局变量</li><li>局部变量</li><li>表中的域</li></ul><p>Lua 中的变量全是全局变量, 哪怕是语句块或是函数里， 除非用<code>local</code>显示声明为局部变量</p><p>局部变量的作用域为从声明位置开始到所在语句块结束。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- test.lua 文件脚本</span>
a <span class="token operator">=</span> <span class="token number">5</span>               <span class="token comment">-- 全局变量</span>
<span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span>         <span class="token comment">-- 局部变量</span>

<span class="token keyword">function</span> <span class="token function">joke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c <span class="token operator">=</span> <span class="token number">5</span>           <span class="token comment">-- 全局变量</span>
    <span class="token keyword">local</span> d <span class="token operator">=</span> <span class="token number">6</span>     <span class="token comment">-- 局部变量</span>
<span class="token keyword">end</span>

<span class="token function">joke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span>          <span class="token comment">--&gt; 5 nil</span>

<span class="token keyword">do</span>
    <span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">6</span>     <span class="token comment">-- 局部变量</span>
    b <span class="token operator">=</span> <span class="token number">6</span>           <span class="token comment">-- 全局变量</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">--&gt; 6 6</span>
<span class="token keyword">end</span>

<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>      <span class="token comment">--&gt; 5 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h3 id="repeat-until-循环" tabindex="-1"><a class="header-anchor" href="#repeat-until-循环" aria-hidden="true">#</a> repeat...until 循环</h3><p>如果条件判断语句（condition）为 false，循环会重新开始执行，直到条件判断语句（condition）为 true 才会停止执行, 像 do--while, 就是条件反过来</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--[ 变量定义 --]</span>
a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment">--[ 执行循环 --]</span>
<span class="token keyword">repeat</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a的值为:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
   a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">until</span> a <span class="token operator">&gt;</span> <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>a<span class="token operator">=</span><span class="token number">10</span>
<span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">20</span>
<span class="token keyword">do</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 的值为:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
   a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><h4 id="step-型" tabindex="-1"><a class="header-anchor" href="#step-型" aria-hidden="true">#</a> step 型</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">for</span> var<span class="token operator">=</span>exp1<span class="token punctuation">,</span>exp2<span class="token punctuation">,</span>exp3 <span class="token keyword">do</span>
    <span class="token operator">&lt;</span>执行体<span class="token operator">&gt;</span>
<span class="token keyword">end</span>

<span class="token comment">--[[
var从exp1变化到exp2，每次变化以exp3为步长递增var，并执行一次&quot;执行体&quot;。exp3是可选的，如果不指定，默认为1
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="foreach-型" tabindex="-1"><a class="header-anchor" href="#foreach-型" aria-hidden="true">#</a> foreach 型</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Suanday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>i 是数组索引值，v 是对应索引的数组元素值。ipairs 是 Lua 提供的一个迭代器函数，用来迭代数组。</p><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><p>控制结构的条件表达式结果可以是任何值，Lua 认为 false 和 nil 为假，true 和非 nil 为真</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>要注意的是 Lua 中 0 为 true</p></div><p>lua 只有 if-else 型条件语句</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>
<span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">&quot;hello world&quot;</span> <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a说&quot;</span><span class="token operator">..</span>a<span class="token punctuation">)</span>
<span class="token keyword">elseif</span> a
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a存在&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a不存在&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua-函数" tabindex="-1"><a class="header-anchor" href="#lua-函数" aria-hidden="true">#</a> Lua 函数</h2><p>在 Lua 中，函数是被看作是&quot;第一类值（First-Class Value）&quot;，函数可以存在变量里</p><p>function 可以以匿名函数（anonymous function）的方式通过参数传递</p><p>lua 的函数可以是多返回值的</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">maximum</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">local</span> mi <span class="token operator">=</span> <span class="token number">1</span>             <span class="token comment">-- 最大值索引</span>
    <span class="token keyword">local</span> m <span class="token operator">=</span> a<span class="token punctuation">[</span>mi<span class="token punctuation">]</span>          <span class="token comment">-- 最大值</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span>val <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span>
       <span class="token keyword">if</span> val <span class="token operator">&gt;</span> m <span class="token keyword">then</span>
           mi <span class="token operator">=</span> i
           m <span class="token operator">=</span> val
       <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> m<span class="token punctuation">,</span> mi
<span class="token keyword">end</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h3><p>Lua 函数可以接受可变数目的参数，和 C 语言类似在函数参数列表中使用三点<code>（...)</code> 表示函数有可变的参数。</p><ul><li>Lua 将函数的参数放在一个叫 arg 的表中，<code>#arg</code>表示传入参数的个数。</li></ul><p>例如，我们计算几个数的平均值:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>
   result <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">local</span> arg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>
   <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">do</span>
      result <span class="token operator">=</span> result <span class="token operator">+</span> v
   <span class="token keyword">end</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;总共传入 &quot;</span> <span class="token operator">..</span> <span class="token operator">#</span>arg <span class="token operator">..</span> <span class="token string">&quot; 个数&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> result<span class="token operator">/</span><span class="token operator">#</span>arg
<span class="token keyword">end</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;平均值为&quot;</span><span class="token punctuation">,</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">--[[
总共传入 6 个数
平均值为	5.5
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>运算符是一个特殊的符号，用于告诉解释器执行特定的数学或逻辑运算。Lua 提供了以下几种运算符类型</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>其他运算符</li></ul><h3 id="算术" tabindex="-1"><a class="header-anchor" href="#算术" aria-hidden="true">#</a> 算术</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>^</td><td>幂运算</td></tr><tr><td>-</td><td>负号</td></tr></tbody></table><h3 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>是否相等</td></tr><tr><td>~=</td><td>是否不等</td></tr><tr><td>&gt;</td><td>是否大于</td></tr><tr><td>&lt;</td><td>是否小于</td></tr><tr><td>&gt;=</td><td>是否大于等于</td></tr><tr><td>&lt;=</td><td>是否小于等于</td></tr></tbody></table><h3 id="逻辑" tabindex="-1"><a class="header-anchor" href="#逻辑" aria-hidden="true">#</a> 逻辑</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>与</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>取反</td></tr></tbody></table><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>..</td><td>连接字符串</td></tr><tr><td>#</td><td>返回字符串或数组长度</td></tr></tbody></table><h3 id="优先级别" tabindex="-1"><a class="header-anchor" href="#优先级别" aria-hidden="true">#</a> 优先级别</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">^</span>
<span class="token keyword">not</span>    <span class="token operator">-</span> <span class="token punctuation">(</span>unary<span class="token punctuation">)</span>
<span class="token operator">*</span>      <span class="token operator">/</span>
<span class="token operator">+</span>      <span class="token operator">-</span>
<span class="token operator">..</span>
<span class="token operator">&lt;</span>      <span class="token operator">&gt;</span>      <span class="token operator">&lt;=</span>     <span class="token operator">&gt;=</span>     <span class="token operator">~=</span>     <span class="token operator">==</span>
<span class="token keyword">and</span>
<span class="token keyword">or</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了<code>^</code>和<code>..</code>外所有的二元运算符都是左连接的。</p><h2 id="lua-string" tabindex="-1"><a class="header-anchor" href="#lua-string" aria-hidden="true">#</a> Lua string</h2><p>字符串由一对双引号或单引号来表示,可以用 2 个方括号 <code>[[]]</code> 来表示&quot;一块&quot;字符串, 就像 js 的&quot;\`\`&quot;</p><p>在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字, 而字符串连接使用的是 <code>..</code></p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span>
<span class="token number">8.0</span>
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span>
<span class="token number">8.0</span>
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;2 + 6&quot;</span><span class="token punctuation">)</span>
<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span>
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;-2e2&quot;</span> <span class="token operator">*</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1200.0</span>
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
stdin<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> attempt to perform arithmetic on a string value
stack traceback<span class="token punctuation">:</span>
    stdin<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">in</span> main chunk
    <span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">in</span> ?

<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token operator">..</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
ab
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">157</span> <span class="token operator">..</span> <span class="token number">428</span><span class="token punctuation">)</span>
<span class="token number">157428</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>#</code> 来计算字符串的长度，放在字符串前面</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">&gt;</span> len<span class="token operator">=</span><span class="token string">&quot;www.liudanbing.com&quot;</span>
<span class="token operator">&gt;</span> <span class="token operator">#</span>len
<span class="token number">18</span>
<span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>len<span class="token punctuation">)</span>
<span class="token number">18</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h3><p>Lua 提供了很多的方法来支持字符串的操作：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>string.upper(argument)</code></td><td>字符串全部转为大写字母</td></tr><tr><td><code>string.lower(argument)</code></td><td>字符串全部转为小写字母</td></tr><tr><td><code>string.gsub(mainString,findString,replaceString,num)</code></td><td>在字符串中替换, mainString 为操作字符串，findString 为要被替换的字符串，replaceString 为要替换成的字符串 num 替换次数（可以忽略，则全部替换）</td></tr><tr><td><code>string.find(str, substr, [init, [end]])</code></td><td>在 str 中查找 substr, init 为开始查找位置，end 为结束索引,返回开始和结束位置，不存在返回 nil</td></tr><tr><td><code>string.reverse(arg)</code></td><td>反转字符串</td></tr><tr><td><code>string.format(...)</code></td><td>放回一个格式化字符串，相当于 sprintf</td></tr><tr><td><code>string.char(arg) 和 string.byte(arg[,int]) </code></td><td>char 将整型数字转成字符并连接, byte 转换字符为整数值(可以指定某个字符，默认第一个字符)</td></tr><tr><td><code>string.len(arg)</code></td><td>计算字符串长度，不是有<code>#</code>了吗 💩</td></tr><tr><td><code>string.rep(str, n))</code></td><td>返回 n 个 str 拼接在一起的字符串</td></tr></tbody></table><h2 id="lua-数组" tabindex="-1"><a class="header-anchor" href="#lua-数组" aria-hidden="true">#</a> Lua 数组</h2><p>Lua 数组的索引键值可以使用整数表示，数组的大小不是固定的。</p><h3 id="一维数组" tabindex="-1"><a class="header-anchor" href="#一维数组" aria-hidden="true">#</a> 一维数组</h3><p>一维数组是最简单的数组，其逻辑结构是线性表</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tutorial&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">do</span>
   <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">--[[
    nil
    lua
    Tutorial
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>在 Lua 索引值是以 1 为起始，但你也可以在 0 储存。除此外我们还可以以负数为数组索引值</mark></p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">do</span>
   array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span><span class="token number">2</span>
<span class="token keyword">end</span>

<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">do</span>
   <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">--[[
    -4
    -2
    0
    2
    4
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组" aria-hidden="true">#</a> 多维数组</h3><p>多维数组即数组中包含数组或一维数组的索引键对应一个数组</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 初始化数组</span>
array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">do</span>
   array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">do</span>
         array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span>j
      <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">-- 访问数组</span>
<span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">do</span>
   <span class="token keyword">for</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">do</span>
      <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">-- 行三列的阵列二维数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua-迭代器" tabindex="-1"><a class="header-anchor" href="#lua-迭代器" aria-hidden="true">#</a> Lua 迭代器</h2><p>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址</p><p>在 Lua 中迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素</p><p>泛型 for 在自己内部保存迭代函数，实际上它保存三个值：迭代函数、状态常量、控制变量</p><p>泛型 for 迭代器提供了集合的 key/value 对，语法格式如下</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>ipairs 与 pairs 的区别：</p><ul><li>ipairs 遍历时遇到 nil 就退出</li><li>pairs 直到遍历完 table 所有元素才退出</li></ul></div><p>下面我们看看范性 for 的执行过程：</p><ul><li>首先，初始化，计算 in 后面表达式的值，表达式应该返回范性 for 需要的三个值：<b>迭代函数、状态常量、控制变量</b>；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。</li><li>第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for 结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。</li><li>第三，将迭代函数返回的值赋给变量列表。</li><li>第四，如果返回的第一个值为 nil 循环结束，否则执行循环体。</li><li>第五，回到第二步再次调用迭代函数</li></ul><p>在 Lua 中我们常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。Lua 的迭代器包含以下两种类型:</p><ul><li>无状态的迭代器</li><li>多状态的迭代器</li></ul><h3 id="无状态的迭代器" tabindex="-1"><a class="header-anchor" href="#无状态的迭代器" aria-hidden="true">#</a> 无状态的迭代器</h3><p>无状态的迭代器是指不保留任何状态的迭代器，因此在循环中我们可以利用无状态迭代器避免创建闭包花费额外的代价。</p><p>每一次迭代，迭代函数都是用两个变量（状态常量和控制变量）的值作为参数被调用，一个无状态的迭代器只利用这两个值可以获取下一个元素。</p><p>这种无状态迭代器的典型的简单的例子是 ipairs，他遍历数组的每一个元素。</p><p>以下实例我们使用了一个简单的函数来实现迭代器，实现 数字 n 的平方</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>iteratorMaxCount<span class="token punctuation">,</span>currentNumber<span class="token punctuation">)</span>
   <span class="token keyword">if</span> currentNumber<span class="token operator">&lt;</span>iteratorMaxCount
   <span class="token keyword">then</span>
      currentNumber <span class="token operator">=</span> currentNumber<span class="token operator">+</span><span class="token number">1</span>
   <span class="token keyword">return</span> currentNumber<span class="token punctuation">,</span> currentNumber<span class="token operator">*</span>currentNumber
   <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span>n <span class="token keyword">in</span> square<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span>
<span class="token keyword">do</span>
   <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">--[[
    1    1
    2    4
    3    9
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Lua 调用<code>ipairs(a)</code>开始循环时，他获取三个值：迭代函数 iter、状态常量 a、控制变量初始值 0；然后 Lua 调用<code>iter(a,0)</code>返回<code>1,a[1]</code>（除非<code>a[1]=nil</code>）；第二次迭代调用<code>iter(a,1)</code>返回 2,<code>a[2]</code>……直到第一个<code>nil</code>元素</p><h3 id="多状态的迭代器" tabindex="-1"><a class="header-anchor" href="#多状态的迭代器" aria-hidden="true">#</a> 多状态的迭代器</h3><p>很多情况下，迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，最简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到<code>table</code>内，将<code>table</code>作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在<code>table</code>内，所以迭代函数通常不需要第二个参数。</p><p>以下实例我们创建了自己的迭代器</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tutorial&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">elementIterator</span> <span class="token punctuation">(</span>collection<span class="token punctuation">)</span>
   <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">local</span> count <span class="token operator">=</span> <span class="token operator">#</span>collection
   <span class="token comment">-- 闭包函数</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
      index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> count
      <span class="token keyword">then</span>
         <span class="token comment">--  返回迭代器的当前元素</span>
         <span class="token keyword">return</span> collection<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
      <span class="token keyword">end</span>
   <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">for</span> element <span class="token keyword">in</span> <span class="token function">elementIterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
<span class="token keyword">do</span>
   <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua-table" tabindex="-1"><a class="header-anchor" href="#lua-table" aria-hidden="true">#</a> Lua table</h2><p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。</p><p>Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。</p><p>Lua table 是不固定大小的，你可以根据自己需要进行扩容。</p><p>Lua 也是通过<code>table</code>来解决模块<code>（module）</code>、包<code>（package</code>和对象<code>（Object）</code>的。 例如<code>string.format</code>表示使用&quot;format&quot;来索引<code>table string</code>。</p><h3 id="table-表-的构造" tabindex="-1"><a class="header-anchor" href="#table-表-的构造" aria-hidden="true">#</a> Table(表)的构造</h3><p>构造器是创建和初始化表的表达式。表是 Lua 特有的功能强大的东西。最简单的构造函数是<code>{}</code>，用来创建一个空表。可以直接初始化数组</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 初始化表</span>
mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">-- 指定值</span>
mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">&quot;Lua&quot;</span>

<span class="token comment">-- 移除引用</span>
mytable <span class="token operator">=</span> <span class="token keyword">nil</span>
<span class="token comment">-- lua 垃圾回收会释放内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们为 <code>table a</code> 并设置元素，然后将 <code>a</code> 赋值给 <code>b</code>，则 <code>a</code> 与 <code>b</code> 都指向同一个内存。如果 <code>a</code> 设置为 <code>nil</code> ，则 <code>b</code> 同样能访问 <code>table</code> 的元素。如果没有指定的变量指向 a，Lua 的垃圾回收机制会清理相对应的内存。</p><h3 id="table-操作" tabindex="-1"><a class="header-anchor" href="#table-操作" aria-hidden="true">#</a> Table 操作</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>..</td><td>连接字符串</td></tr><tr><td><code>table.concat(table[, sep [, start[, end]]])</code></td><td>concat 是 concatenate(连锁, 连接)的缩写, 列出参数中指定 table 的数组部分从 start 位置到 end 位置的所有元素, 元素间以指定的分隔符(sep)隔开</td></tr><tr><td><code>table.insert (table, [pos,] value)</code></td><td>table 的数组部分指定位置(pos)插入值为 value 的一个元素. pos 参数可选, 默认为数组部分末尾</td></tr><tr><td><code>table.remove (table [, pos])</code></td><td>返回 table 数组部分位于 pos 位置的元素. 其后的元素会被前移. pos 参数可选, 默认为 table 长度, 即从最后一个元素删起</td></tr><tr><td><code>table.sort (table [, comp])</code></td><td>对给定的 table 进行升序排序。</td></tr></tbody></table><h2 id="lua-模块与包" tabindex="-1"><a class="header-anchor" href="#lua-模块与包" aria-hidden="true">#</a> Lua 模块与包</h2><p>模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度</p><p>Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。以下为创建自定义模块 <code>module.lua</code>，文件代码格式如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 文件名为 module.lua</span>
<span class="token comment">-- 定义一个名为 module 的模块</span>
module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">-- 定义一个常量</span>
module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">&quot;这是一个常量&quot;</span>

<span class="token comment">-- 定义一个函数</span>
<span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个公有函数！\\n&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个私有函数！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">return</span> module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可知，模块的结构就是一个 table 的结构，因此可以像操作调用 table 里的元素那样来操作调用模块里的常量或函数。</p><p>上面的 func2 声明为程序块的局部变量，即表示一个私有函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用.</p><h3 id="require-函数" tabindex="-1"><a class="header-anchor" href="#require-函数" aria-hidden="true">#</a> require 函数</h3><p>Lua 提供了一个名为<code>require</code>的函数用来加载模块。要加载一个模块，只需要简单地调用就可以了</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;模块名&gt;&quot;</span><span class="token punctuation">)</span>

require <span class="token string">&quot;&lt;模块名&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 require 后会返回一个由模块常量或函数组成的 table，并且还会定义一个包含该 table 的全局变量</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- test_module.lua 文件</span>
<span class="token comment">-- module 模块为上文提到到 module.lua</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者给加载的模块定义一个别名变量，方便调用</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- test_module2.lua 文件</span>
<span class="token comment">-- module 模块为上文提到到 module.lua</span>
<span class="token comment">-- 别名变量 m</span>
<span class="token keyword">local</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>

m<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载机制" tabindex="-1"><a class="header-anchor" href="#加载机制" aria-hidden="true">#</a> 加载机制</h3><p>对于自定义的模块，模块文件不是放在哪个文件目录都行，函数 require 有它自己的文件路径加载策略，它会尝试从 Lua 文件或 C 程序库中加载模块。</p><p>require 用于搜索 Lua 文件的路径是存放在全局变量 <code>package.path</code> 中，当 Lua 启动后，会以环境变量 <code>LUA_PATH</code> 的值来初始这个环境变量。如果没有找到该环境变量，则使用一个编译时定义的默认路径来初始化。</p><p>当然，如果没有 <code>LUA_PATH</code> 这个环境变量，也可以自定义设置，在当前用户根目录下打开 <code>.profile</code> 文件（没有则创建，打开 <code>.bashrc</code> 文件也可以），例如把 &quot;~/lua/&quot; 路径加入 <code>LUA_PATH</code> 环境变量里：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#LUA_PATH</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LUA_PATH</span><span class="token operator">=</span><span class="token string">&quot;~/lua/?.lua;;&quot;</span>
<span class="token comment"># 文件路径以 &quot;;&quot; 号分隔，最后的 2 个 &quot;;;&quot; 表示新加的路径后面加上原来的默认路径。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，更新环境变量参数，使之立即生效。</p><p>这时假设 <code>package.path</code> 的值是</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/Users/aceld/lua/?.lua;
./?.lua;
/usr/local/share/lua/5.1/?.lua;
/usr/local/share/lua/5.1/?/init.lua;
/usr/local/lib/lua/5.1/?.lua;
/usr/local/lib/lua/5.1/?/init.lua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么调用 <code>require(&quot;module&quot;)</code> 时就会尝试打开以下文件目录去搜索目标。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">/</span>Users<span class="token operator">/</span>aceld<span class="token operator">/</span>lua<span class="token operator">/</span>module<span class="token punctuation">.</span>lua<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token operator">/</span>module<span class="token punctuation">.</span>lua
<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>share<span class="token operator">/</span>lua<span class="token operator">/</span><span class="token number">5.1</span><span class="token operator">/</span>module<span class="token punctuation">.</span>lua
<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>share<span class="token operator">/</span>lua<span class="token operator">/</span><span class="token number">5.1</span><span class="token operator">/</span>module<span class="token operator">/</span>init<span class="token punctuation">.</span>lua
<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>lib<span class="token operator">/</span>lua<span class="token operator">/</span><span class="token number">5.1</span><span class="token operator">/</span>module<span class="token punctuation">.</span>lua
<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>lib<span class="token operator">/</span>lua<span class="token operator">/</span><span class="token number">5.1</span><span class="token operator">/</span>module<span class="token operator">/</span>init<span class="token punctuation">.</span>lua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果找过目标文件，则会调用 <code>package.loadfile</code> 来加载模块。否则，就会去找 C 程序库。</p><p>搜索的文件路径是从全局变量 <code>package.cpath</code> 获取，而这个变量则是通过环境变量 <code>LUA_CPATH</code> 来初始。</p><p>搜索的策略跟上面的一样，只不过现在换成搜索的是 so 或 dll 类型的文件。如果找得到，那么 <code>require</code> 就会通过 <code>package.loadlib</code> 来加载它。</p>`,141),o=[p];function l(i,c){return s(),a("div",null,o)}const r=n(t,[["render",l],["__file","01-base.html.vue"]]);export{r as default};
