import{_ as n,p as a,q as s,a1 as e}from"./framework-7db056f4.js";const t={},o=e(`<h1 id="http-request" tabindex="-1"><a class="header-anchor" href="#http-request" aria-hidden="true">#</a> http/Request</h1><h2 id="http-消息" tabindex="-1"><a class="header-anchor" href="#http-消息" aria-hidden="true">#</a> HTTP 消息</h2><p>回忆一下 HTTP 消息结构</p><ul><li>HTTP Request 和 HTTP Response (请求和响应) <ul><li>请求和(响应)行</li><li>0 个或多个 Header</li><li>空行</li><li>可选消息体(Body)</li></ul></li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/index.html</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.wtf.com</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0</span></span>
(空行)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h2><p>go 语言中提供了表示 http request 的 struct <code>Request</code>， 表示客户端发送的 HTTP 请求消息</p><p>重要字段:</p><ul><li>URL</li><li>Header</li><li>Body</li><li>Form、PostForm、MultipartForm</li></ul><p>也可以通过 Request 方法访问请求中的 Cookie、URL、User Agent 等信息</p><p>Request 既可以代表发送到服务器的请求，又可以代表客户端发出的请求</p><h3 id="请求-url" tabindex="-1"><a class="header-anchor" href="#请求-url" aria-hidden="true">#</a> 请求 URL</h3><ul><li>Request 的 URL 字段就代表了请求行(请求信息第一行) 里面的部分内容</li><li>URL 字段是指向 url.URL 类型的一个指针，url.URL 是一个 struct:</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> URL <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Scheme   <span class="token builtin">string</span>
    Opaque   <span class="token builtin">string</span>
    User     <span class="token operator">*</span>Userinfo
    Host     <span class="token builtin">string</span>
    RawQuery <span class="token builtin">string</span>
    Fragment <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>url 通用形式：<code>scheme://[userinfo@]host/path[?query][#fragment]</code></p><ul><li>不以斜杠开头的 URL 被解释为： <code>scheme:&#39;opaque[?query][#fragment]</code></li></ul><h4 id="query" tabindex="-1"><a class="header-anchor" href="#query" aria-hidden="true">#</a> Query</h4><p>例如：<code>http://www.example.com/post?id=123&amp;thread_id=456</code></p><ul><li><p>r.URL.RawQuery 表示<code>id=123&amp;thread_id=456</code></p><blockquote><p>一般使用 Request 的 Form 字段来获取 Key-value 对</p></blockquote></li><li><p>r.URL.Query() 会提供查询字符串对应的 <code>map[string][]string</code></p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>query <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
id <span class="token operator">:=</span> query<span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 返回数组</span>
id1 <span class="token operator">:=</span> query<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 返回数组第一个</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="url-fragment" tabindex="-1"><a class="header-anchor" href="#url-fragment" aria-hidden="true">#</a> URL Fragment</h4><p>如果从浏览器发出的请求，那么你无法提取出 Fragment 字段的值</p><ul><li>浏览器发出请求时，会把 fragment 部分去掉</li><li>HTTP 客户端包发出的请求就会保留</li></ul><h4 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> Header</h4><p>Request 和 Response 的 Header 是通过 Header 类型来描述的，它是一个 map, 用来描述 HTTP Header 里的 Key-Value 对</p><ul><li>Header map 的 key 是 string 类型，value 是<code>[]string</code></li><li>设置 key 时，会创建一个空的<code>[]string </code>作为 value, value 里第一个元素就是新 header 的值 <ul><li><code>r.Header </code>返回 map</li><li><code>r.Header</code>[&quot;Accept-Encoding&quot;] 返回指定 key 对应 value <code>[]string</code>类型</li><li><code>r.Header.Get(&quot;Accept-Encoding&quot;)</code> 返回 string, 以<code>,</code>分隔</li></ul></li></ul><h4 id="body" tabindex="-1"><a class="header-anchor" href="#body" aria-hidden="true">#</a> Body</h4><p>请求和响应的 Bodies 都是使用 Body 字段表示的 Body 是一个 <code>io.ReadCloser</code> 接口</p><ul><li><p>一个 Reader 接口</p></li><li><p>一个 Closer 接口</p></li><li><p>Reader 接口定义了一个<code>Open([]byte) (int error)</code>方法，返回 byte 的数量，可选的错误</p></li><li><p>Closer 接口定义了一个 Close 方法：</p><ul><li>没有参数，返回可选的错误</li></ul></li></ul><p>使用 Body 的 Read 方法，读取请求 body 内容</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    length <span class="token operator">:=</span> r<span class="token punctuation">.</span>ContentLength
    body <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表单" tabindex="-1"><a class="header-anchor" href="#表单" aria-hidden="true">#</a> 表单</h2><p>一般 HTML 表单里面的数据会以 <code>name-value</code> 的形式，通过<code>POST</code>请求发送出去</p><ul><li><p>它的数据内容会放在 POST 请求的 Body 里面</p></li><li><p>通过 POST 发送的 name-value 数据对的格式可以通过表单的 <code>Content Type</code> 来指定，也就是 <code>enctype</code> 属性:</p><ul><li>浏览器被要求至少要支持：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code></li><li>HTML5 的话，还需要支持<code>text/plain</code></li></ul></li></ul><ol><li><p><code>enctype</code> 默认值为 <code>application/x-www-form-urlencoded</code> 表示以 url 编码发送数据, 将查询字符串里的表单数据编码</p></li><li><p><code>enctype</code> 为 <code>multipart/form-data</code>：</p><ul><li>每一个<code>name-value</code> 对都会被转换为一个<code>MIME</code> 消息部分</li><li>每一个部分都有自己的 <code>Content Type</code> 和 <code>Content Dispostion</code></li></ul></li></ol><p>如何选择<code>enctype</code></p><ul><li>简单文本使用 表单 URL 编码</li><li>大量数据，例如上传数据：<code>multipart-MIME</code><ul><li>可以把二进制数据通过选择 <code>Base64</code> 编码，来当作文本进行发送</li></ul></li></ul><h3 id="form" tabindex="-1"><a class="header-anchor" href="#form" aria-hidden="true">#</a> Form</h3><p>Request 上的函数允许我们从 URL/Body 中获取数据，通过这些<mark>字段</mark>:</p><ul><li><code>Form</code>, 实际上是 <code>map[string][]string</code> 即一个 key 可以对应多个 value <ul><li>如果表单和 URL 里有同样的 key, 那么它们都会放在一个 <code>slice</code> 里: 表单里的值靠前，URL 的值靠后</li></ul></li><li><code>PostForm</code><ul><li>和 Form 类似，但 PostForm 只会返回 表单里的 value</li></ul></li><li><code>MultipartForm</code><ul><li>需要先调用<code>ParseMultipartForm()</code>方法才能使用 <code>MultipartForm</code></li><li><code>ParseMultipartForm()</code> 该方法在必要时调用<code>ParseForm()</code>方法</li><li>参数是需要读取的数据长度(字节数), 返回类型是一个 struct , 这个 struct 里有两个 map: <ol><li>key 是 <code>string</code>, value 是<code>[]string</code></li><li>key 是 <code>string</code>, value 是 文件</li></ol></li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>其中 Form 和 PostForm 字段只支持 enctype 为<code>application/x-www-form-urlencoded</code>的请求，如果 enctype 为<code>multipart/form-data</code>只能使用 MultipartForm 字段获取数据</p></div><p>用法:</p><ol><li>先调用 <code>ParseForm</code> 或 <code>ParseMultipartForm</code> 来解析 <code>Request</code></li><li>然后相应的访问 <code>Form</code>、<code>PostForm</code> 或 <code>MultipartForm</code> 字段</li></ol><h3 id="formvalue-postformvalue" tabindex="-1"><a class="header-anchor" href="#formvalue-postformvalue" aria-hidden="true">#</a> FormValue() &amp; PostFormValue()</h3><p>这两个方法里自动调用了 <code>ParseMultipartForm()</code>, 而<code>ParseMultipartForm()</code> 会自动调用<code>ParseForm()</code>因此无需手动调用<code>ParseForm</code></p><ul><li><code>FormValue()</code> 方法会返回 Form 字段中指定 key 对应的第一个 value</li><li><code>PostFormValue()</code> 方法只会返回 PostForm 字段(表单中的 value)中指定 key 对应的第一个 value</li></ul><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3><p><code>multipart/form-data</code> 最常见的例子就是上传文件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">exampleHandlerFunc</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    fileHeader <span class="token operator">:=</span> r<span class="token punctuation">.</span>MultipartForm<span class="token punctuation">.</span>File<span class="token punctuation">[</span><span class="token string">&quot;uploader-name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// map[string][]FileHeader</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> fileHeader<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简便，go 提供了类似的 <code>Form()</code> 的 <code>FormFile()</code> 方法， 它只返回第一个 file 与 fileHeader, 且自动调用 <code>ParseMultipartForm()</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">exampleHandlerFunc</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span> <span class="token string">&quot;uploader-name&quot;</span> <span class="token punctuation">)</span> <span class="token comment">// 忽略了 FileHeader</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="multiparreader" tabindex="-1"><a class="header-anchor" href="#multiparreader" aria-hidden="true">#</a> MultiparReader()</h4><ul><li><p><code>func(r *Request) MultiparReader()(*multipart.Reader, error)</code></p></li><li><p>如果请求是 <code>multipart/form-data</code> 或 <code>multipart</code> 混合的 POST 请求：</p><ul><li>MultiparReader 返回一个 MIHE multipart Reader</li><li>否则返回一个 nil 和一个错误</li></ul></li></ul><p>可以使用该方法代替 <code>ParseMultipartForm()</code> 来把请求的 body 作为 stream 进行处理， 而不是作为对象处理，不是一次性获取整个 map, 逐个检查来自表单的值，然后每次处理一个</p><h3 id="post-json" tabindex="-1"><a class="header-anchor" href="#post-json" aria-hidden="true">#</a> POST Json</h3><ul><li>不是所有的 POST 请求都来自 Form</li><li>客户端 会以不同的方式对 POST 请求编码 <ul><li>jQuery 通常使用 <code>application/x-www-form-urlencoded</code></li><li>Angular 是 <code>application/json</code></li></ul></li></ul><p>ParseForm 无法处理 <code>application/json</code></p>`,57),p=[o];function l(i,c){return a(),s("div",null,p)}const r=n(t,[["render",l],["__file","03-request.html.vue"]]);export{r as default};
