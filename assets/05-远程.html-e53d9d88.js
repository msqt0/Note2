import{_ as e,p as a,q as n,a1 as s}from"./framework-7db056f4.js";const i={},t=s(`<h1 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h1><p>git 既允许你在本地进行版本管理，也允许你在一些仓库托管平台管理你的仓库，这样一来你就可以让远程仓库和本地仓库同步！</p><p>远程仓库的既可以让我们备份项目文件，也可以让其他人通过该仓库来实现协作</p><h2 id="创建一个远程仓库" tabindex="-1"><a class="header-anchor" href="#创建一个远程仓库" aria-hidden="true">#</a> 创建一个远程仓库</h2><table><thead><tr><th>New Repo</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/197455140-25c483c5-fc29-44ae-bf1b-2b8aff01e9d6.png" alt="image"></td></tr></tbody></table><p>成功创建仓库后，github 会提示你有三个选项：</p><ol><li>在本地创建一个 新的 repo 把它与这个远程仓库关联起来</li><li>把本地已经存在的仓库和这个远程仓库关联起来</li><li>直接导入代码到这个远程仓库</li></ol><table><thead><tr><th>Next</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/94043894/197455208-1e71a78d-15dc-4e03-8b60-661950a5b97a.png" alt="image"></td></tr></tbody></table><h3 id="本地仓库关联远程仓库" tabindex="-1"><a class="header-anchor" href="#本地仓库关联远程仓库" aria-hidden="true">#</a> 本地仓库关联远程仓库</h3><p>可以发现，前两个选项都需要输同一条指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/reponame.git

<span class="token comment"># git remote add origin git@github.com:username.reponame.git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的作用就是把本地仓库与远程仓库关联起来，其中<code>origin</code> 是远程库的名字</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>origin</code> 是可以改的，但是为了规范并不建议更改</p></div><h3 id="推送文件到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送文件到远程仓库" aria-hidden="true">#</a> 推送文件到远程仓库</h3><p>到达这一步前请确认一下你是否在本地已经存在了版本库，并把它与远程仓库关联起来了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master

<span class="token comment"># 把本地的master分支推送到远程仓库的master分支</span>
<span class="token comment"># -u参数是第一次推送时使用作用是把 origin/master 分支 和本地master 关联，这样一来，以后推送仓库就可以简化命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大功告成, 我们已经有自己的远程仓库了！</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>除了使用 https 协议认证，还可以使用 ssh 的密钥来认证。</p><ul><li>https 每次推送都需要输入帐号和密码认证</li><li>ssh 只需要把本地生成的 rsa 公钥存入托管网站，以后每次提交都无需登录</li></ul><blockquote><p>听说 ssh 认证的方式传输速度比 https 快，可以自行学习使用</p></blockquote></div><h4 id="删除远程库" tabindex="-1"><a class="header-anchor" href="#删除远程库" aria-hidden="true">#</a> 删除远程库</h4><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
<span class="token comment"># 比如 git remote rm origin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>也可以直接使用 <code>git remote set-url origin &lt;url&gt;</code> 更改</p></div><h2 id="克隆一个远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆一个远程仓库" aria-hidden="true">#</a> 克隆一个远程仓库</h2><p>实际上这个部分的内容才是最常用的功能，毕竟互联网上有非常非常多优秀且开源的项目可以供我们学习、使用</p><p>选择一个合适的位置，打开终端</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/username/reponame.git
<span class="token comment"># git clone git@github.com:username/reponame.git</span>


<span class="token comment"># Cloning into &#39;gitskills&#39;...</span>
<span class="token comment"># remote: Counting objects: 3, done.</span>
<span class="token comment"># remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3</span>
<span class="token comment"># Receiving objects: 100% (3/3), done.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样整个项目的文件都被下载了</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果你没有这个仓库的权限，那么你是无法 push 的, 如果你想修改这个分支的文件，需要先 fork ,改完后再 pr，等 owenr 同意，这个过程其实就是 git 多人协作开发的主要方式</p></div>`,28),r=[t];function c(d,o){return a(),n("div",null,r)}const p=e(i,[["render",c],["__file","05-远程.html.vue"]]);export{p as default};
