import{_ as n,p as a,q as s,a1 as t}from"./framework-7db056f4.js";const e={},o=t(`<h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h1><blockquote><p>注解是 JDK1.5 版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p></blockquote><p>注解基础：</p><ul><li>生存文档，通过代码里标识的元数据生成 javadoc 文档</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><p>注解常用分类：</p><ul><li>Java 自带的标准注解，包括<code>@Override</code>，<code>@Deprecated</code>和<code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li>元注解，元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code>、<code>@Retention</code>用于标明注解被保留的阶段，<code>@Target</code>用于标明注解使用的范围，<code>@Inherited</code>用于标明注解可继承，<code>@Documented</code>用于标明是否生成 javadoc 文档。</li><li>自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解</li></ul><h2 id="java-内置注解" tabindex="-1"><a class="header-anchor" href="#java-内置注解" aria-hidden="true">#</a> Java 内置注解</h2><p>从最为常见的 Java 内置的注解开始说起。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在使用 Annotation 时要在其前面添加<code>@</code>符号，并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</p></div><h3 id="override" tabindex="-1"><a class="header-anchor" href="#override" aria-hidden="true">#</a> @Override</h3><ul><li><p>限定某方法，是重写父类方法，该注解只能用于方法</p></li><li><p>如果没有写<code>@Override</code>还是重写了父类的方法，编译器一样能判断是否进行了重写</p></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>语法校验：<br> 如果写了@Override 注解，编译器就会其检查该方法是否真的重写了父类的方法。如果的确重写了，则编译通过，如果没有构成重写，则编译错误</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解读：</strong></p><ul><li><code>@interface</code>表示一个注解类</li><li><code>@Target(ElementType.METHOD)</code>,说明只能修饰方法，即元素的类型为方法</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>@Target 是修饰注解的注解称为元注解</p></div><h3 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated" aria-hidden="true">#</a> @Deprecated</h3><ul><li>用于表示某个程序元素（类，方法，字段，包，参数等）已过时</li><li>不推荐使用，但是仍然可以使用</li><li><code>@Deprecated</code> 一般做版本升级过度使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PACKAGE</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Deprecated</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从它的定义我们可以知道，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被“废弃”，不再建议用户使用。</p><p><strong>解读：</strong></p><ul><li>CONSTRUCTOR 构造器，FIELD 字段（属性），LOCAL_VARIABLE （局部变量），METHOD 方法，PACKAGE 包，PARAMETER 参数，TYPE 类型</li></ul><h3 id="suppresswarnings" tabindex="-1"><a class="header-anchor" href="#suppresswarnings" aria-hidden="true">#</a> @Suppresswarnings</h3><ul><li>当不希望看到警告时，可以使用 Suppresswarnings 注解来抑制编译器警告</li><li>在{&quot;&quot;}中，写入希望抑制的信息 <ul><li>unchecked 忽略没有检查的警告</li><li>rawtypes 忽略没有指定泛型的警告（传参时没有指定泛型的警告错误）</li><li>unused 忽略没有使用某个变量的警告错误</li></ul></li><li>作用范围和放的位置相关，一般放在合适的位置就行了</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token constant">MODULE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解读：</strong></p><ul><li><code>String[] value()</code>是传入的信息数组</li></ul><h2 id="jdk-元注解" tabindex="-1"><a class="header-anchor" href="#jdk-元注解" aria-hidden="true">#</a> JDK 元注解</h2><ul><li>元 Annotation 用于修饰其他 Annotation</li><li>元注解的作用不大，了解它方便读懂源码</li></ul><p><strong>种类：</strong></p><ol><li><strong>Retention</strong> 指定注解的作用范围（指定注解可以保留多长时间），RetentionPolicy 成员变量 value 要指定以下的值 <ul><li>SOURCE（编译器使用后，直接丢弃这种策略的注解）</li><li>CLASS（编译器将把注解记录在 class 文件中，当运行 java 程序时，JVM 不会保留注解。默认值）</li><li>RUNTIME（编译器将把注解记录在 class 文件中。当运行 Java 程序时，jvm 会保留注解。程序可以通过反射获取该注解）</li></ul></li><li><strong>Target</strong> 指定注解可以在哪些地方使用，包含一个 value 变量</li><li><strong>Documented</strong> 指定该注解是否会在 javadoc 体现，即生成文档时，是否看得到该注解</li><li><strong>Inherited</strong> 子类会继承父类的该注解</li></ol>`,31),c=[o];function p(i,l){return a(),s("div",null,c)}const d=n(e,[["render",p],["__file","11-注解.html.vue"]]);export{d as default};
