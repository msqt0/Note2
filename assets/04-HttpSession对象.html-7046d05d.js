import{_ as n,p as s,q as a,a1 as t}from"./framework-7db056f4.js";const e={},p=t(`<h1 id="httpsession对象" tabindex="-1"><a class="header-anchor" href="#httpsession对象" aria-hidden="true">#</a> HttpSession对象</h1><p>  <strong>HttpSession对象</strong> 是javax.servlet.http.HttpSession的实例，该接口并不像HttpServletRequest或HttpSerletResponse还存在一个父接口，该接口只是一个纯粹的接口。这因为session本身就属于HTTP协议的范畴。</p><p>  对于服务器而言每一个连接到它的客户端都是一个session，servlet容器使用此接口创建HTTP客户端和HTTP服务器之间的会话。会话将保留指定的时间段，跨多个连接或来自用户的页面请求。一个会话通常对应于一时间和最后一次访问时间。在整个session中，最重要的就是属性的操作。</p><p>  session 无论客户端还是服务端都可以感知到，若重新打开一个新的浏览器，则无法取得之前设置的session，因为每一个session只保存在当前浏览器中，并在相关的页面取得。</p><p>  Session 的作用就是为了标识一次会话，或者说确认一个用户；并且在一次会话（一个用户的多次请求）期间共享数据。 我们可以通过request.getSession()方法，来获取当前会话的session对象。</p><blockquote><p>客户端与服务端进行一次会话以后，每一次请求都要在cookie中带上服务端创建的sessionid</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取一个session对象，若session对象存在则获取，不存在则创建</span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取session的会话标识符</span>
<span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取最后一次访问时间</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getLastAccessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断是否是新的session对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="session-对象作用域" tabindex="-1"><a class="header-anchor" href="#session-对象作用域" aria-hidden="true">#</a> Session 对象作用域</h2><p>  Session 用来表示一次会话，在一次会话中数据是可以共享的，这时session作为域对象存在，可以通过setAttribute(name, value)方法向域对象中添加数据，通过getAttribute(name)从域对象中获取数据，通过removeAttribute(name)从域对象中移除数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取一个session对象，若session对象存在则获取，不存在则创建</span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置session域对象</span>
session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取指定名称的session域对象</span>
<span class="token class-name">String</span> uname <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  数据储存在session域对象中，当session对象不存在了，或者是两个不同的session对象时，数据也不能共享了。这就不得不谈session的生命周期</p><h2 id="session-对象的销毁" tabindex="-1"><a class="header-anchor" href="#session-对象的销毁" aria-hidden="true">#</a> Session 对象的销毁</h2><h3 id="默认时间到期" tabindex="-1"><a class="header-anchor" href="#默认时间到期" aria-hidden="true">#</a> 默认时间到期</h3><p>  当用户第一次请求servlet 并且操作 session 时，session 对象生成，Tomcat中session默认的存活时间为30min，即你不操作界面的时间，一旦有操作，session会重新计时。</p><p>  session 默认到期时间可以到Tomcat中的conf 目录下的web.xml文件中修改。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- session 默认的最大不活动时间，单位：分钟 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自己设置到期时间" tabindex="-1"><a class="header-anchor" href="#自己设置到期时间" aria-hidden="true">#</a> 自己设置到期时间</h3><p>  除了以上方法，也可以在程序中自己设置session的生命周期，通过session.setMaxinactiverval(int) 来设定session的最大不活动时间，单位为秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取指定名称的session域对象</span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置session的最大不活动时间</span>
session<span class="token punctuation">.</span><span class="token function">setMaxInactiverval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  也可以使用<code>getMaxInactiverval()</code>方法来查看当前session对象的最大不活动时间。</p><h3 id="立即失效" tabindex="-1"><a class="header-anchor" href="#立即失效" aria-hidden="true">#</a> 立即失效</h3><p>  或者我们也可以通过session.invalidate()的方法让session立刻失效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//销毁session对象</span>
session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭浏览器" tabindex="-1"><a class="header-anchor" href="#关闭浏览器" aria-hidden="true">#</a> 关闭浏览器</h3><p>  从前面的JESSION可知道，session的底层依赖cookie实现，并且该cookie的有效时间为关闭浏览器，从而session在浏览器关闭时也失效了(因为没有JESSION再与之对应)</p><h3 id="关闭服务器" tabindex="-1"><a class="header-anchor" href="#关闭服务器" aria-hidden="true">#</a> 关闭服务器</h3><h2 id="servletcontext-对象" tabindex="-1"><a class="header-anchor" href="#servletcontext-对象" aria-hidden="true">#</a> ServletContext 对象</h2><p>  每一个web应用都有且仅有一个ServletContext对象，又称Application对象，从名称中可知，该对象是与应用程序相关信息。例如可以通过<code>getSerInfo()</code>方法获取当前服务器的信息，<code>getRealPath(String path)</code>获取资源的真实路径等。</p><h3 id="servletcontext-对象的获取" tabindex="-1"><a class="header-anchor" href="#servletcontext-对象的获取" aria-hidden="true">#</a> ServletContext 对象的获取</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//通过</span>
<span class="token class-name">ServletContext</span> servletContext1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//通过session对象获取</span>
<span class="token class-name">ServletContext</span> servletContext2 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//通过ServletConfig对象获取</span>
<span class="token class-name">ServletContext</span> servletContext3 <span class="token operator">=</span> getServletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//直接获取(只能在servlet方法中获取)</span>

<span class="token class-name">ServletContext</span> servletContext4 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//常用方法</span>
<span class="token comment">//1.获取当前服务器的版本信息</span>
<span class="token class-name">String</span> servletInfo <span class="token operator">=</span> request<span class="token punctuation">.</span>getServletContext<span class="token punctuation">.</span><span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前服务器的版本信息：&quot;</span> <span class="token operator">+</span> servletInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.获取项目的真实路径</span>
<span class="token class-name">String</span> realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="servletcontext-对象-1" tabindex="-1"><a class="header-anchor" href="#servletcontext-对象-1" aria-hidden="true">#</a> ServletContext 对象</h2><p>  每一个web应用都有且仅有一个ServletContext对象，又称Application对象，从名称中可知，该对象是与应用程序相关信息。例如可以通过<code>getSerInfo()</code>方法获取当前服务器的信息，<code>getRealPath(String path)</code>获取资源的真实路径等。</p><h3 id="servletcontext-对象的获取-1" tabindex="-1"><a class="header-anchor" href="#servletcontext-对象的获取-1" aria-hidden="true">#</a> ServletContext 对象的获取</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//通过</span>
<span class="token class-name">ServletContext</span> servletContext1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//通过session对象获取</span>
<span class="token class-name">ServletContext</span> servletContext2 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//通过ServletConfig对象获取</span>
<span class="token class-name">ServletContext</span> servletContext3 <span class="token operator">=</span> getServletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//直接获取(只能在servlet方法中获取)</span>

<span class="token class-name">ServletContext</span> servletContext4 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//常用方法</span>
<span class="token comment">//1.获取当前服务器的版本信息</span>
<span class="token class-name">String</span> servletInfo <span class="token operator">=</span> request<span class="token punctuation">.</span>getServletContext<span class="token punctuation">.</span><span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前服务器的版本信息：&quot;</span> <span class="token operator">+</span> servletInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.获取项目的真实路径</span>
<span class="token class-name">String</span> realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servletcontext-域对象" tabindex="-1"><a class="header-anchor" href="#servletcontext-域对象" aria-hidden="true">#</a> ServletContext 域对象</h3><p>  ServletContext也可以当作域对象来使用，通过向ServletContext中储存数据，可以使得整个应用程序共享某些数据。当然不建议存放过多数据，因为ServletContext中的数据一旦存储进去没有手动移除将会一直保存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取ServletContext对象</span>
<span class="token class-name">SevletContext</span> servletContext <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置域对象</span>
servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取域对象</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 移除域对象</span>
servletContext<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>servlet的三大域对象</p><p>1.request域对象<br> 在一次请求中有效。请求转发有效，重定向失效。</p><p>2.session域对象<br> 在一次会话中有效。请求转发和重定向有效，session销毁后失效</p><p>3.servletContext域对象<br> 在整个应用程序中有效。服务器关闭后失效</p></blockquote><blockquote><p>领域越大，占用内存的时间越长，尽量使用范围小的域对象</p></blockquote>`,41),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","04-HttpSession对象.html.vue"]]);export{r as default};
