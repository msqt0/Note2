import{_ as n,p as s,q as a,a1 as e}from"./framework-7db056f4.js";const t={},p=e(`<h1 id="进阶内容" tabindex="-1"><a class="header-anchor" href="#进阶内容" aria-hidden="true">#</a> 进阶内容</h1><h2 id="lua-元表-metatable" tabindex="-1"><a class="header-anchor" href="#lua-元表-metatable" aria-hidden="true">#</a> Lua 元表 metatable</h2><h3 id="元方法" tabindex="-1"><a class="header-anchor" href="#元方法" aria-hidden="true">#</a> 元方法</h3><p>在 Lua table 中我们可以访问对应的 key 来得到 value 值，但是却无法对两个 table 进行操作。</p><p>因此 Lua 提供了元表(Metatable)，允许我们改变 table 的行为，每个行为关联了对应的元方法。</p><p>当 Lua 试图对两个表进行相加时，先检查两者之一是否有元表，之后检查是否有一个叫&quot;**add&quot;的字段，若找到，则调用对应的值。&quot;**add&quot;等即时字段，其对应的值（往往是一个函数或是 table）就是&quot;元方法&quot;。</p><p>有两个很重要的函数来处理元表:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 对指定table设置元表(metatable)，如果元表(metatable)中存在__metatable键值，setmetatable会失败 。</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span>metatable<span class="token punctuation">)</span>

<span class="token comment">-- 返回对象的元表(metatable)</span>
<span class="token function">getmetatable</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                          <span class="token comment">-- 普通表</span>
mymetatable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                      <span class="token comment">-- 元表</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span>mymetatable<span class="token punctuation">)</span>     <span class="token comment">-- 把 mymetatable 设为 mytable 的元表</span>

<span class="token comment">-- 可以简写为 mytable = setmetatable({},{})</span>

<span class="token function">getmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>
<span class="token comment">-- 返回mymetatable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="index-元方法" tabindex="-1"><a class="header-anchor" href="#index-元方法" aria-hidden="true">#</a> <code>__index</code> 元方法</h4><p>这是 metatable 最常用的键。</p><p>当你通过键来访问 <code>table</code> 的时候，如果这个键没有值，那么 Lua 就会寻找该<code>table</code>的<code>metatable</code>（假定有<code>metatable</code>）中的<code>__index</code> 键。如果<code>__index</code>包含一个表格，Lua 会在表格中查找相应的键。</p><p>我们可以在使用 lua 命令进入交互模式查看:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">&gt;</span> other <span class="token operator">=</span> <span class="token punctuation">{</span> foo <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> __index <span class="token operator">=</span> other <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> t<span class="token punctuation">.</span>foo
<span class="token number">3</span>
<span class="token operator">&gt;</span> t<span class="token punctuation">.</span>bar
<span class="token keyword">nil</span>
<span class="token comment">-- 如果__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__index</code> 元方法查看表中元素是否存在，如果不存在，返回结果为 nil；如果存在则由 <code>__index</code> 返回结果。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">&quot;key2&quot;</span> <span class="token keyword">then</span>
      <span class="token keyword">return</span> <span class="token string">&quot;metatablevalue&quot;</span>
    <span class="token keyword">else</span>
      <span class="token keyword">return</span> <span class="token keyword">nil</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span>mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span>

<span class="token comment">-- value1    metatablevalue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将以上代码简单写成</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> __index <span class="token operator">=</span> <span class="token punctuation">{</span> key2 <span class="token operator">=</span> <span class="token string">&quot;metatablevalue&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span>mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>总结:</p><p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤</p><ol><li>在表中查找，如果找到，返回该元素，找不到则继续</li><li>判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。</li><li>判断元表有没有<code>__index</code>方法，如果<code>__index</code>方法为<code>nil</code>，则返回<code>nil</code>；如果<code>__index</code>方法是一个表，则重复 1、2、3；如果<code>__index</code>方法是一个函数，则返回该函数的返回值。</li></ol><h4 id="newindex-元方法" tabindex="-1"><a class="header-anchor" href="#newindex-元方法" aria-hidden="true">#</a> <code>__newindex</code> 元方法</h4><p><code>__newindex</code> 元方法用来对表更新，<code>__index</code>则用来对表访问</p><p><mark>当你给表的一个缺少的索引赋值，解释器就会查找<code>__newindex</code> 元方法：如果存在则调用这个函数而不进行赋值操作</mark></p><ol><li>Lua 解释器先判断这个 table 是否有元表；</li><li>如果有了元表，就查找元表中是否有<code>__newindex</code> 元方法；如果没有元表，就直接添加这个索引，然后对应的赋值；</li><li>如果有这个<code>__newindex</code> 元方法，Lua 解释器就执行它，而不是执行赋值；</li><li>如果这个<code>__newindex</code> 对应的不是一个函数，而是一个 table 时，Lua 解释器就在这个 table 中执行赋值，而不是对原来的 table</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mymetatable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> __newindex <span class="token operator">=</span> mymetatable <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">)</span>

mytable<span class="token punctuation">.</span>newkey <span class="token operator">=</span> <span class="token string">&quot;新值2&quot;</span>
<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>newkey<span class="token punctuation">,</span>mymetatable<span class="token punctuation">.</span>newkey<span class="token punctuation">)</span>

mytable<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">&quot;新值1&quot;</span>
<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span>mymetatable<span class="token punctuation">.</span>key1<span class="token punctuation">)</span>

<span class="token comment">--[[
value1
nil    新值2
新值1    nil
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例中表设置了元方法 <code>__newindex</code>，在对新索引键<code>（newkey）</code>赋值时<code>（mytable.newkey = &quot;新值2&quot;）</code>，会调用元方法，而不进行赋值。而如果对已存在的索引键<code>（key1）</code>，则会进行赋值，而不调用元方法 <code>__newindex</code></p><p>以下实例使用了 <code>rawset</code> 函数来更新表</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  __newindex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token function">rawset</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token operator">..</span>value<span class="token operator">..</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

mytable<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">&quot;new value&quot;</span>
mytable<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token number">4</span>

<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span>mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span>

<span class="token comment">-- new value    &quot;4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为表添加操作符" tabindex="-1"><a class="header-anchor" href="#为表添加操作符" aria-hidden="true">#</a> 为表添加操作符</h4><p>以下实例演示了两表相加操作</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 计算表中最大值，table.maxn在Lua5.2以上版本中已无法使用</span>
<span class="token comment">-- 自定义计算表中最大值函数 table_maxn</span>
<span class="token keyword">function</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token keyword">local</span> mn <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token keyword">if</span> mn <span class="token operator">&lt;</span> k <span class="token keyword">then</span>
            mn <span class="token operator">=</span> k
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> mn
<span class="token keyword">end</span>

<span class="token comment">-- 两表相加操作</span>
mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  __add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> newtable<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span> <span class="token keyword">do</span>
      table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>newtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> mytable
  <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

secondtable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>

mytable <span class="token operator">=</span> mytable <span class="token operator">+</span> secondtable
    <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>
<span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">--[[
    1
    2
    3
    4
    5
    6
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的操作列表如下:</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>__add</code></td><td>对应的运算符 &#39;+&#39;</td></tr><tr><td><code>__sub</code></td><td>对应的运算符 &#39;-&#39;</td></tr><tr><td><code>__mul</code></td><td>对应的运算符 &#39;*&#39;</td></tr><tr><td><code>__div</code></td><td>对应的运算符 &#39;/&#39;</td></tr><tr><td><code>__mod</code></td><td>对应的运算符 &#39;%&#39;</td></tr><tr><td><code>__unm</code></td><td>对应的运算符 &#39;-&#39;</td></tr><tr><td><code>__concat</code></td><td>对应的运算符 &#39;..&#39;</td></tr><tr><td><code>__eq</code></td><td>对应的运算符 &#39;==&#39;</td></tr><tr><td><code>__lt</code></td><td>对应的运算符 &#39;&lt;&#39;</td></tr><tr><td><code>__le</code></td><td>对应的运算符 &#39;&lt;=&#39;</td></tr></tbody></table><h4 id="call-元方法" tabindex="-1"><a class="header-anchor" href="#call-元方法" aria-hidden="true">#</a> <code>__call</code> 元方法</h4><p><code>__call</code> 元方法在 <code>table</code> 被调用时调用。以下实例演示了计算表中元素的和</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 计算表中最大值，table.maxn在Lua5.2以上版本中已无法使用</span>
<span class="token comment">-- 自定义计算表中最大值函数 table_maxn</span>
<span class="token keyword">function</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token keyword">local</span> mn <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>
        <span class="token keyword">if</span> mn <span class="token operator">&lt;</span> k <span class="token keyword">then</span>
            mn <span class="token operator">=</span> k
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> mn
<span class="token keyword">end</span>

<span class="token comment">-- 定义元方法__call</span>
mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  __call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> newtable<span class="token punctuation">)</span>
    sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> mytable<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">end</span>
    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span> <span class="token keyword">do</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> newtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> sum
  <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
newtable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">mytable</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 70</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tostring-元方法" tabindex="-1"><a class="header-anchor" href="#tostring-元方法" aria-hidden="true">#</a> <code>__tostring</code> 元方法</h4><p><code>__tostring</code> 元方法用于修改表的输出行为。以下实例我们自定义了表的输出内容</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  __tostring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>
    sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> v
    <span class="token keyword">end</span>
    <span class="token keyword">return</span> <span class="token string">&quot;表所有元素的和为 &quot;</span> <span class="token operator">..</span> sum
  <span class="token keyword">end</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>

<span class="token comment">-- 表所有元素的和为 60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从本文中我们可以知道元表可以很好的简化我们的代码功能，所以了解 Lua 的元表，可以让我们写出更加简单优秀的 Lua 代码</p><h3 id="元表案例" tabindex="-1"><a class="header-anchor" href="#元表案例" aria-hidden="true">#</a> 元表案例</h3><p>所有用于表示集合的 table 共享一个元表，并且在该元表中定义如何执行一个加法操作。首先创建一个常规的 table，准备用作集合的元表，然后修改 Set.new 函数，在每次创建集合的时候，都为新的集合设置一个元表</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 集合的元表</span>

<span class="token comment">-- 根据参数列表中的值创建一个新的集合</span>
<span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
    <span class="token keyword">local</span> set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> mt<span class="token punctuation">)</span>
    <span class="token keyword">for</span> _<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token keyword">do</span> set<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
     <span class="token keyword">return</span> set
<span class="token keyword">end</span>

<span class="token comment">-- 并集操作</span>
<span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token keyword">local</span> retSet <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 此处相当于Set.new({})</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span> retSet<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">do</span> retSet<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
    <span class="token keyword">return</span> retSet
<span class="token keyword">end</span>

<span class="token comment">-- 交集操作</span>
<span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token keyword">local</span> retSet <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span> retSet<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token keyword">end</span>
    <span class="token keyword">return</span> retSet
<span class="token keyword">end</span>

<span class="token comment">-- 打印集合的操作</span>
<span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span>
     <span class="token keyword">local</span> tb <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
     <span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token keyword">do</span>
          tb<span class="token punctuation">[</span><span class="token operator">#</span>tb <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e
     <span class="token keyword">end</span>
     <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">..</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">&quot;}&quot;</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
     <span class="token function">print</span><span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面列举的那些可以重定义的元方法都可以使用上面的方法进行重定义。现在就出现了一个新的问题，set1 和 set2 都有元表，那我们要用谁的元表啊？虽然我们这里的示例代码使用的都是一个元表，但是实际 coding 中，会遇到我这里说的问题，对于这种问题，Lua 是按照以下步骤进行解决的</p><ol><li>对于二元操作符，如果第一个操作数有元表，并且元表中有所需要的字段定义，比如我们这里的<code>__add</code> 元方法定义，那么 Lua 就以这个字段为元方法，而与第二个值无关；</li><li>对于二元操作符，如果第一个操作数有元表，但是元表中没有所需要的字段定义，比如我们这里的<code>__add</code> 元方法定义，那么 Lua 就去查找第二个操作数的元表；</li><li>如果两个操作数都没有元表，或者都没有对应的元方法定义，Lua 就引发一个错误。</li></ol><p>以上就是 Lua 处理这个问题的规则，那么我们在实际编程中该如何做呢？比如<code>set3 = set1 + 8</code>这样的代码，就会打印出以下的错误提示</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
     <span class="token keyword">if</span> <span class="token function">getmetatable</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">~=</span> mt <span class="token keyword">or</span> <span class="token function">getmetatable</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">~=</span> mt <span class="token keyword">then</span>
          <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;metatable error.&quot;</span><span class="token punctuation">)</span>
     <span class="token keyword">end</span>

    <span class="token keyword">local</span> retSet <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 此处相当于Set.new({})</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span> retSet<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">do</span> retSet<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
    <span class="token keyword">return</span> retSet
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何保护元表" tabindex="-1"><a class="header-anchor" href="#如何保护元表" aria-hidden="true">#</a> 如何保护元表</h4><p>我们会发现，使用<code>getmetatable</code>就可以很轻易的得到元表，使用<code>setmetatable</code>就可以很容易的修改元表，那这样做的风险是不是太大了，那么如何保护我们的元表不被篡改呢？</p><p>在 Lua 中，函数<code>setmetatable</code>和<code>getmetatable</code>函数会用到元表中的一个字段，用于保护元表，该字段是<code>__metatable</code>。当我们想要保护集合的元表，是用户既不能看也不能修改集合的元表，那么就需要使用<code>__metatable</code>字段了；当设置了该字段时，<code>getmetatable</code>就会返回这个字段的值，而<code>setmetatable</code>则会引发一个错误；如以下演示代码：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
    <span class="token keyword">local</span> set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> mt<span class="token punctuation">)</span>
    <span class="token keyword">for</span> _<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token keyword">do</span> set<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token keyword">end</span>
     mt<span class="token punctuation">.</span>__metatable <span class="token operator">=</span> <span class="token string">&quot;You cannot get the metatable&quot;</span> <span class="token comment">-- 设置完我的元表以后，不让其他人再设置</span>
     <span class="token keyword">return</span> set
<span class="token keyword">end</span>

<span class="token keyword">local</span> tb <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getmetatable</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">--[[
 {1, 2}
You cannot get the metatable
lua: test.lua:56: cannot change a protected metatable
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> <code>__index</code></h4><p>下面通过一个实际的例子来说明<code>__index</code>的使用。假设要创建一些描述窗口，每个<code>table</code>中都必须描述一些窗口参数，例如颜色，位置和大小等，这些参数都是有默认值得，因此，我们在创建窗口对象时可以指定那些不同于默认值得参数</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Windows <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 创建一个命名空间</span>

<span class="token comment">-- 创建默认值表</span>
Windows<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token punctuation">{</span>r <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

Windows<span class="token punctuation">.</span>mt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 创建元表</span>

<span class="token comment">-- 声明构造函数</span>
<span class="token keyword">function</span> Windows<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> Windows<span class="token punctuation">.</span>mt<span class="token punctuation">)</span>
     <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token comment">-- 定义__index元方法</span>
Windows<span class="token punctuation">.</span>mt<span class="token punctuation">.</span>__index <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
     <span class="token keyword">return</span> Windows<span class="token punctuation">.</span>default<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> win <span class="token operator">=</span> Windows<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>win<span class="token punctuation">.</span>x<span class="token punctuation">)</span>               <span class="token comment">-- &gt;10 访问自身已经拥有的值</span>
<span class="token function">print</span><span class="token punctuation">(</span>win<span class="token punctuation">.</span>width<span class="token punctuation">)</span>          <span class="token comment">-- &gt;100 访问default表中的值</span>
<span class="token function">print</span><span class="token punctuation">(</span>win<span class="token punctuation">.</span>color<span class="token punctuation">.</span>r<span class="token punctuation">)</span>          <span class="token comment">-- &gt;255 访问default表中的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际编程中，<code>__index</code>元方法不必一定是一个函数，它还可以是一个<code>table</code>。当它是一个函数时，Lua 以<code>table</code>和不存在 key 作为参数来调用该函数，这就和上面的代码一样；当它是一个<code>table</code>时，Lua 就以相同的方式来重新访问这个<code>table</code>，所以上面的代码也可以是这样的</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 定义__index元方法</span>
Windows<span class="token punctuation">.</span>mt<span class="token punctuation">.</span>__index <span class="token operator">=</span> Windows<span class="token punctuation">.</span>default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="newindex-元方法-1" tabindex="-1"><a class="header-anchor" href="#newindex-元方法-1" aria-hidden="true">#</a> <code>__newindex</code> 元方法</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> tb1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">local</span> tb2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

tb1<span class="token punctuation">.</span>__newindex <span class="token operator">=</span> tb2
tb2<span class="token punctuation">.</span>__newindex <span class="token operator">=</span> tb1

<span class="token function">setmetatable</span><span class="token punctuation">(</span>tb1<span class="token punctuation">,</span> tb2<span class="token punctuation">)</span>
<span class="token function">setmetatable</span><span class="token punctuation">(</span>tb2<span class="token punctuation">,</span> tb1<span class="token punctuation">)</span>

tb1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现什么问题了么？是不是循环了，在 Lua 解释器中，对这个问题，就会弹出错误消息，错误消息<code>loop in settable</code></p><p>有的时候，我们就不想从<code>__index</code>对应的元方法中查询值，我们也不想更新<code>table</code>时，也不想执行<code>__newindex</code>对应的方法，或者<code>__newindex</code>对应的<code>table</code>。那怎么办？</p><p>在 Lua 中，当我们查询<code>table</code>中的值，或者更新<code>table</code>中的值时，不想理那该死的元表，我们可以使用<code>rawget</code>函数，调用<code>rawget(tb, i)</code>就是对<code>table tb</code>进行了一次“原始的（raw）”访问，也就是一次不考虑元表的简单访问；</p><p>你可能会想，一次原始的访问，没有访问<code>__index</code>对应的元方法，可能有性能的提升，其实一次原始访问并不会加速代码执行的速度。对于<code>__newindex</code>元方法，可以调用<code>rawset(t, k, v)</code>函数，它可以不涉及任何元方法而直接设置<code>table t</code>中与<code>key k</code>相关联的<code>value v</code></p><h2 id="lua-协同程序-coroutine" tabindex="-1"><a class="header-anchor" href="#lua-协同程序-coroutine" aria-hidden="true">#</a> Lua 协同程序(coroutine)</h2><h3 id="什么是协程-coroutine" tabindex="-1"><a class="header-anchor" href="#什么是协程-coroutine" aria-hidden="true">#</a> 什么是协程(coroutine)？</h3><h4 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h4><p>首先复习一下多线程。我们都知道线程——Thread。每一个线程都代表一个执行序列。</p><p>当我们在程序中创建多线程的时候，看起来，同一时刻多个线程是同时执行的，不过实质上多个线程是并发的，因为只有一个 CPU，所以实质上同一个时刻只有一个线程在执行。</p><p>在一个时间片内执行哪个线程是不确定的，我们可以控制线程的优先级，不过真正的线程调度由 CPU 的调度决定。</p><h4 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h4><p>协程跟线程都代表一个执行序列。不同的是，协程把线程中不确定的地方尽可能的去掉，执行序列间的切换不再由 CPU 隐藏的进行，而是由程序显式的进行。</p><p>所以，使用协程实现并发，需要多个协程彼此协作。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>coroutine.create()</code></td><td>创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td></tr><tr><td><code>coroutine.resume()</code></td><td>重启 coroutine，和 create 配合使用</td></tr><tr><td><code>coroutine.yield()</code></td><td>挂起 coroutine，将 coroutine 设置为挂起状态，这个和 resume 配合使用能有很多有用的效果</td></tr><tr><td><code>coroutine.status()</code></td><td>查看 coroutine 的状态 注：coroutine 的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序</td></tr><tr><td><code>coroutine.wrap（）</code></td><td>创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</td></tr><tr><td><code>coroutine.running()</code></td><td>返回正在跑的 coroutine，一个 coroutine 就是一个线程，当使用 running 的时候，就是返回一个 corouting 的线程号</td></tr></tbody></table><h3 id="coroutine-库讲解" tabindex="-1"><a class="header-anchor" href="#coroutine-库讲解" aria-hidden="true">#</a> coroutine 库讲解</h3><h4 id="coroutine-create-f" tabindex="-1"><a class="header-anchor" href="#coroutine-create-f" aria-hidden="true">#</a> coroutine.create(f)</h4><p>传一个函数，用来创建协程。返回一个<code>thread</code>对象</p><h4 id="coroutine-isyieldable" tabindex="-1"><a class="header-anchor" href="#coroutine-isyieldable" aria-hidden="true">#</a> coroutine.isyieldable()</h4><p>如果正在运行的协程可以让出，则返回真，值得注意的是，只有主协程(线程)和 c 函数中是无法让出的。</p><h4 id="coroutine-resume-co-val1" tabindex="-1"><a class="header-anchor" href="#coroutine-resume-co-val1" aria-hidden="true">#</a> coroutine.resume(co, [,val1,...])</h4><p>这是一个非常重要的函数，用来启动或再启动一个协程，使其由挂起状态变为运行状态</p><p>resume 函数相当与在执行协程中的方法。参数<code>val1...</code>是执行协程 co 时传递给协程的方法。</p><p><b>首次执行协程 co 时，参数<code>Val1...</code>会传递给协程 co 的函数</b></p><p><b>再次执行协程 co 时，参数<code>Val1...</code>会作为给协程 co 中上一次 yeild 的返回值。</b></p><p>resume 函数返回什么呢？有 3 种情况:</p><ol><li><p>如果协程 co 的函数执行完毕，协程正常终止，resume 返回 true 和函数的返回值</p></li><li><p>如果协程 co 的函数执行过程中，协程让出了（调用了 yeild()方法），那么 resume 返回 true 和协程中调用 yeild 传入的参数</p></li><li><p>如果协程 co 的函数执行过程中发生错误，resume 返回 false 与错误消息</p></li></ol><blockquote><p>以看到 resume 无论如何都不会导致程序崩溃。它是在保护模式下执行的</p></blockquote><h4 id="coroutine-status-co" tabindex="-1"><a class="header-anchor" href="#coroutine-status-co" aria-hidden="true">#</a> coroutine.status(co)</h4><p>返回一个字符串，表示协程的状态。有 4 种状态:</p><ol><li><p>running。如果在协程的函数中调用 status，传入协程自身的句柄，那么执行到这里的时候会返回 running 状态</p></li><li><p>suspended。如果协程还未结束，即自身调用了 yeild 或还没开始运行，那么就是 suspended 状态</p></li><li><p>normal。如果协程 A resume 协程 B 时，协程 A 处于的状态为 normal。在协程 B 的执行过程中，协程 A 就一直处于 normal 状态。因为它这时候既不是挂起状态、也不是运行状态</p></li></ol><h4 id="coroutine-wrap-f" tabindex="-1"><a class="header-anchor" href="#coroutine-wrap-f" aria-hidden="true">#</a> coroutine.wrap(f)</h4><p><code>wrap()</code>也是用来创建协程的。只不过这个协程的句柄是隐藏的。跟<code>create()</code>的区别在于</p><ol><li><p><code>wrap()</code>返回的是一个函数，每次调用这个函数相当于调用<code>coroutine.resume()</code>。</p></li><li><p>调用这个函数相当于在执行<code>resume()</code>函数。</p></li><li><p>调用这个函数时传入的参数，就相当于在调用<code>resume</code>时传入的除协程的句柄外的其他参数。</p></li><li><p>调用这个函数时，跟<code>resume</code>不同的是，它并不是在保护模式下执行的，若执行崩溃会直接向外抛出。</p></li></ol><h4 id="coroutine-yield-···" tabindex="-1"><a class="header-anchor" href="#coroutine-yield-···" aria-hidden="true">#</a> coroutine.yield(···)</h4><p>使正在执行的函数挂起。</p><ul><li><p><code>yeild</code>的参数会作为<code>resume</code>的额外返回值。</p></li><li><p>同时，如果对该协程不是第一次执行<code>resume</code>，<code>resume</code>函数传入的参数将会作为<code>yield</code>的返回值。</p></li></ul><h4 id="coroutine-running" tabindex="-1"><a class="header-anchor" href="#coroutine-running" aria-hidden="true">#</a> coroutine.running()</h4><p>返回当前正在执行的线程 ID</p><h3 id="以下实例演示了以上各个方法的用法" tabindex="-1"><a class="header-anchor" href="#以下实例演示了以上各个方法的用法" aria-hidden="true">#</a> 以下实例演示了以上各个方法的用法</h3><p>简单实用<code>resume、yield</code>，如下</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--创建一个协程coco</span>
coco <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;resume args:&quot;</span><span class="token operator">..</span>a<span class="token operator">..</span><span class="token string">&quot;,&quot;</span><span class="token operator">..</span>b<span class="token punctuation">)</span>
    <span class="token comment">--协程被挂起</span>
    yreturn <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- yreturn 应该是下次resume唤醒传递进来的参数</span>
    <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;yretur:&quot;</span><span class="token operator">..</span>yreturn<span class="token punctuation">)</span>

<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token comment">--第一次启动coco协程</span>
<span class="token function">print</span> <span class="token punctuation">(</span>coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>coco<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">--第二次启动coco协程</span>
<span class="token function">print</span> <span class="token punctuation">(</span>coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>coco<span class="token punctuation">,</span> <span class="token string">&quot;第二次传递的参数,作为上一次yield的返回值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">--[[
  resume args:0,1
  true
  yretur:第二次传递的参数,作为上一次yield的返回值
  true
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单使用 wrap，如下:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>coco2 <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
            <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;warp resume args:&quot;</span><span class="token operator">..</span>a<span class="token operator">..</span><span class="token string">&quot;,&quot;</span><span class="token operator">..</span>b<span class="token punctuation">)</span>
            yreturn <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;continue &quot;</span><span class="token operator">..</span>yreturn<span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token function">print</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>coco2<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">coco2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">coco2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">--[[
  function
  warp resume args:0,1
  continue 3
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个协程配合使用</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Co1&#39;s status:&quot;</span><span class="token operator">..</span>coroutine<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>co1<span class="token punctuation">)</span><span class="token operator">..</span><span class="token string">&quot;,&quot;</span><span class="token operator">..</span><span class="token string">&quot;co2&#39;s status:&quot;</span><span class="token operator">..</span>coroutine<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>co2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

co1 <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;arg is :&quot;</span><span class="token operator">..</span>a<span class="token punctuation">)</span>
        <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">local</span> stat<span class="token punctuation">,</span> rere <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co2<span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>
        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;resume&#39;s return is &quot;</span><span class="token operator">..</span>rere<span class="token punctuation">)</span>
        <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">local</span> stat2<span class="token punctuation">,</span>rere2 <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co2<span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span>
        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;resume&#39;s return is&quot;</span><span class="token operator">..</span>rere2<span class="token punctuation">)</span>
        <span class="token keyword">local</span> arg <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

co2 <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;arg is :&quot;</span><span class="token operator">..</span>a<span class="token punctuation">)</span>
        <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">local</span> rey <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span>
        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;yeild&#39;s return is &quot;</span><span class="token operator">..</span> rey<span class="token punctuation">)</span>
        <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

stat<span class="token punctuation">,</span>main_ret <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co1<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span> <span class="token punctuation">(</span><span class="token string">&quot;last return is &quot;</span><span class="token operator">..</span>main_ret<span class="token punctuation">)</span>

<span class="token comment">--[[
  arg is :1
  Co1&#39;s status:running,co2&#39;s status:suspended
  arg is :2
  Co1&#39;s status:normal,co2&#39;s status:running
  resume&#39;s return is 3
  Co1&#39;s status:running,co2&#39;s status:suspended
  yeild&#39;s return is 4
  Co1&#39;s status:normal,co2&#39;s status:running
  resume&#39;s return is5
  Co1&#39;s status:suspended,co2&#39;s status:suspended
  last return is 6
]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>感觉上 lua 的 coroutine 挺麻烦的, 没想到怎么写才比较优雅, 我可能是懒得动脑吧 💩</p></blockquote><h2 id="lua-文件-i-o" tabindex="-1"><a class="header-anchor" href="#lua-文件-i-o" aria-hidden="true">#</a> Lua 文件 I/O</h2><p>Lua I/O 库用于读取和处理文件。分为简单模式（和 C 一样）、完全模式。</p><ul><li>简单模式（simple model）拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作。</li><li>完全模式（complete model） 使用外部的文件句柄来实现。它以一种面对对象的形式，将所有的文件操作定义为文件句柄的方法</li></ul><p>简单模式在做一些简单的文件操作时较为合适。但是在进行一些高级的文件操作的时候，简单模式就显得力不从心。例如同时读取多个文件这样的操作，使用完全模式则较为合适。</p><p>打开文件操语句如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span> <span class="token punctuation">(</span>filename <span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件，该文件必须存在。</td></tr><tr><td>w</td><td>打开只写文件，若文件存在则文件长度清为 0，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td>a</td><td>以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF 符保留）</td></tr><tr><td>r+</td><td>以可读写方式打开文件，该文件必须存在。</td></tr><tr><td>w+</td><td>打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td>a+</td><td>与 a 类似，但此文件可读可写</td></tr><tr><td>b</td><td>二进制模式，如果文件是二进制文件，可以加上 b</td></tr><tr><td>+</td><td>号表示对文件既可以读也可以写</td></tr></tbody></table><h3 id="简单模式" tabindex="-1"><a class="header-anchor" href="#简单模式" aria-hidden="true">#</a> 简单模式</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 以只读方式打开文件</span>
file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 设置默认输入文件为 test.lua</span>
io<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token comment">-- 输出文件第一行</span>
<span class="token function">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 关闭打开的文件</span>
io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token comment">-- 以附加的方式打开只写文件</span>
file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 设置默认输出文件为 test.lua</span>
io<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token comment">-- 在文件最后一行添加 Lua 注释</span>
io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;--  test.lua 文件末尾注释&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 关闭打开的文件</span>
io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>io.&quot;x&quot;</code> 方法，其中 <code>io.read()</code> 中我们没有带参数，参数可以是下表中的一个</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>&quot;*n&quot;</td><td>读取一个数字并返回它。例：<code>file.read(&quot;*n&quot;)</code></td></tr><tr><td>&quot;*a&quot;</td><td>从当前位置读取整个文件。例：<code>file.read(&quot;*a&quot;)</code></td></tr><tr><td>&quot;*l&quot;（默认）</td><td>读取下一行，在文件尾 (EOF) 处返回 nil。例：<code>file.read(&quot;*l&quot;)</code></td></tr><tr><td>number</td><td>返回一个指定字符个数的字符串，或在 EOF 时返回 nil。例：<code>file.read(5)</code></td></tr></tbody></table><p>其他的 io 方法有：</p><ul><li><code>io.tmpfile()</code>:返回一个临时文件句柄，该文件以更新模式打开，程序结束时自动删除</li><li><code>io.type(file)</code>:检测 obj 是否一个可用的文件句柄</li><li><code>io.flush()</code>:向文件写入缓冲中的所有数据</li><li><code>io.lines(optional file name)</code>:返回一个迭代函数,每次调用将获得文件中的一行内容,当到文件尾时，将返回 nil,但不关闭文件</li></ul><h3 id="完全模式" tabindex="-1"><a class="header-anchor" href="#完全模式" aria-hidden="true">#</a> 完全模式</h3><p>通常我们需要在同一时间处理多个文件。我们需要使用 <code>file:function_name</code> 来代替 <code>io.function_name</code> 方法。以下实例演示了如同同时处理同一个文件</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 以只读方式打开文件</span>
file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 输出文件第一行</span>
<span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 关闭打开的文件</span>
file<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">-- 以附加的方式打开只写文件</span>
file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 在文件最后一行添加 Lua 注释</span>
file<span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;--test&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 关闭打开的文件</span>
file<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>read 的参数与简单模式一致。</p><p>其他方法:</p><ul><li><code>file:seek(optional whence, optional offset)</code>:设置和获取当前文件位置,成功则返回最终的文件位置(按字节),失败则返回 nil 加错误信息。参数 whence 值可以是: <ul><li><code>&quot;set&quot;</code>: 从文件头开始</li><li><code>&quot;cur&quot;</code>: 从当前位置开始[默认]</li><li><code>&quot;end&quot;</code>: 从文件尾开始</li><li><code>offset</code>:默认为 0 不带参数<code>file:seek()</code>则返回当前位置,<code>file:seek(&quot;set&quot;)</code>则定位到文件头,<code>file:seek(&quot;end&quot;)</code>则定位到文件尾并返回文件大小</li></ul></li><li><code>file:flush()</code>:向文件写入缓冲中的所有数据</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">for</span> line <span class="token keyword">in</span> io<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token string">&quot;main.lua&quot;</span><span class="token punctuation">)</span> <span class="token keyword">do</span>

　　<span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>

<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下实例使用了 <code>seek</code> 方法，定位到文件倒数第 25 个位置并使用 <code>read</code> 方法的 <code>*a</code> 参数，即从当期位置(倒数第 25 个位置)读取整个文件。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 以只读方式打开文件</span>
file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>

file<span class="token punctuation">:</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;*a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 关闭打开的文件</span>
file<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua-面向对象" tabindex="-1"><a class="header-anchor" href="#lua-面向对象" aria-hidden="true">#</a> Lua 面向对象</h2><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><p>在 C 中，如果一个类没有进行实例化，那这个类中对应的操作，基本就是一堆“没有用”的代码；而<b>Lua 则不一样，即使你不实例化一个“类”，你照样也可以使用“类”名直接调用它的方法</b>（对于 C++，请忽视静态的方法）；</p><p>在 Lua 中则没有类的概念，而我们都是通过 Lua 现有的支持，去模拟类的概念。<b>在 Lua 中，要表示一个类，只需创建一个专用作其他对象的原型（prototype）</b>。原型也是一种常规的对象，也就是说我们可以直接通过原型去调用对应的方法。当其它对象（类的实例）遇到一个未知操作时，原型会先查找它。</p><p>在 Lua 中实现原型是非常简单的，比如有两个对象 a 和 b，要让 b 作为 a 的原型，只需要以下代码就可以完成:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">setmetatable</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置了这段代码以后，a 就会在 b 中查找所有它没有的操作。若将 b 称为是对象 a 的“类”，就仅仅是术语上的变化。现在我就从最简单的开始，要创建一个实例对象，必须要有一个原型，就是所谓的“类”，看以下代码</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> Account <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 一个原型</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  <span class="token comment">-- 这里是冒号哦</span>
     o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 如果用户没有提供table，则创建一个</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
     <span class="token keyword">return</span> o
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先使用<code>Account:new</code>创建了一个新的实例对象，并将<code>Account</code>作为新的实例对象 a 的元表。再当我们调用<code>a:display</code>函数时，就相当于<code>a.display(a)</code>，冒号就只是一个“语法糖”，只是一种方便的写法，而<code>形参self接住了a</code>, 我们创建了一个实例对象 a，当调用<code>display</code>时，就会查找 a 中是否有<code>display</code>字段，没有的话，就去搜索它的元表，所以，最终的调用情况如下</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">getmetatable</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">__index</span><span class="token punctuation">(</span><span class="token function">display</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，其实我们可以看到的是，实例对象 a 表中并没有 display 方法，而是继承自<code>Account</code>方法的，但是传入<code>display</code>方法中的<code>self</code>确是 a。这样就可以让<code>Account</code>（这个“类”）定义操作。除了方法，a 还能从<code>Account</code>继承所有的字段。</p><p>继承不仅可以用于方法，还可以作用于字段。因此，一个类不仅可以提供方法，还可以为实例中的字段提供默认值。看以下代码：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> Account <span class="token operator">=</span> <span class="token punctuation">{</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  <span class="token comment">-- 这里是冒号哦</span>
     o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 如果用户没有提供table，则创建一个</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
     <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>value <span class="token operator">=</span> self<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">100</span>
     <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> a <span class="token operator">=</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 这里使用原型Account创建了一个对象a</span>
a<span class="token punctuation">:</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--100</span>
a<span class="token punctuation">:</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- self.value = self.value + 100</span>
a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getmetatable</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">__index</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次调用<code>display</code>时，等号左侧的<code>self.value</code>就是<code>a.value</code>，就相当于在 a 中添加了一个新的字段<code>value</code>；当第二次调用<code>display</code>函数时，由于 a 中已经有了<code>value</code>字段，所以就不会去<code>Account</code>中寻找<code>value</code>字段了</p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>由于类也是对象（准确地说是一个原型），它们也可以从其它类（原型）获得（继承）方法。这种行为就是继承，可以很容易的在 Lua 中实现。现在我们有一个类:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> CA <span class="token operator">=</span> <span class="token punctuation">{</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> CA<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
     o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
     <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
     <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token keyword">function</span> CA<span class="token punctuation">:</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> CA<span class="token punctuation">:</span><span class="token function">addValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>value <span class="token operator">=</span> self<span class="token punctuation">.</span>value <span class="token operator">+</span> v
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在需要从这个<code>CA</code>类派生出一个子类<code>CLittleA</code>，则需要创建一个空的类，从基类继承所有的操作</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> CLittleA <span class="token operator">=</span> CA<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我创建了一个<code>CA</code>类的一个实例对象，在 Lua 中，现在<code>CLittleA</code>既是<code>CA</code>类的一个实例对象，也是一个原型，就是所谓的类，就相当于<code>CLittleA</code>类继承自<code>CA</code>类。再如下面的代码</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> s <span class="token operator">=</span> CLittleA<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">{</span>value1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>CLittleA</code>从<code>CA</code>继承了<code>new</code>；不过，在执行<code>CLittleA:new</code>时，它的<code>self</code>参数表示为<code>CLittleA</code>，所以 s 的元表为<code>CLittleA</code>，<code>CLittleA</code>中字段<code>__index</code>的值也是<code>CLittleA</code>。</p><p>然后，我们就会看到，s 继承自<code>CLittleA</code>，而<code>CLittleA</code>又继承自<code>CA</code>。当执行<code>s:display</code>时，Lua 在 s 中找不到<code>display</code>字段，就会查找<code>CLittleA</code>；</p><p>如果仍然找不到<code>display</code>字段，就查找<code>CA</code>，最终会在<code>CA</code>中找到<code>display</code>字段。</p><p>可以这样想一下，如果在<code>CLittleA</code>中存在了<code>display</code>字段，那么就不会去<code>CA</code>中再找了。所以，我们就可以在<code>CLittleA</code>中重定义<code>display</code>字段，从而实现特殊版本的<code>display</code>函数</p><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h3><p>思想就是通过两个<code>table</code>来表示一个对象。一个<code>table</code>用来保存对象的私有数据；另一个用于对象的操作。对象的实际操作时通过第二个<code>table</code>来实现的。为了避免未授权的访问，保存对象的私有数据的表不保存在其它的<code>table</code>中，而只是保存在方法的<code>closure</code>中。看一段代码:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">newObject</span><span class="token punctuation">(</span>defaultName<span class="token punctuation">)</span>
     <span class="token keyword">local</span> self <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> defaultName<span class="token punctuation">}</span>
     <span class="token keyword">local</span> setName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> self<span class="token punctuation">.</span>name <span class="token operator">=</span> v <span class="token keyword">end</span>
     <span class="token keyword">local</span> getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token keyword">end</span>
     <span class="token keyword">return</span> <span class="token punctuation">{</span>setName <span class="token operator">=</span> setName<span class="token punctuation">,</span> getName <span class="token operator">=</span> getName<span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> objectA <span class="token operator">=</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token string">&quot;Jelly&quot;</span><span class="token punctuation">)</span>
objectA<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;JellyThink&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 这里没有使用冒号访问</span>
<span class="token function">print</span><span class="token punctuation">(</span>objectA<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种设计给予存储在<code>self table</code>中所有东西完全的私密性。当调用<code>newObject</code>返回以后，就无法直接访问这个<code>table</code>了。只能通过<code>newObject</code>中创建的函数来访问这个<code>self table</code>；</p><p>也就相当于<code>self table</code>中保存的都是私有的，外部是无法直接访问的。大家可能也注意到了，我在访问函数时，并没有使用冒号，这个主要是因为，可以直接访问的<code>self table</code>中的字段，所以是不需要多余的<code>self</code>字段的，也就不用冒号了。</p>`,159),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","02-advance.html.vue"]]);export{d as default};
