import{_ as n,p as s,q as a,a1 as e}from"./framework-7db056f4.js";const o={},i=e(`<h1 id="http-json" tabindex="-1"><a class="header-anchor" href="#http-json" aria-hidden="true">#</a> http/Json</h1><h2 id="json-与-go-struct" tabindex="-1"><a class="header-anchor" href="#json-与-go-struct" aria-hidden="true">#</a> Json 与 Go struct</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// json</span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;country&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;USA&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// go struct</span>
<span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ID <span class="token builtin">int</span>
    Name <span class="token builtin">string</span>
    Country <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags" aria-hidden="true">#</a> Tags</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Company <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ID <span class="token builtin">int</span>         <span class="token string">\`json:&quot;id&quot;\`</span>
    Name <span class="token builtin">string</span>    <span class="token string">\`json:&quot;name&quot;\`</span>
    Country <span class="token builtin">string</span> <span class="token string">\`json:&quot;country&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有不想序列化的字段，请使用<code>json:&quot;-&quot;</code></p><h3 id="类型映射" tabindex="-1"><a class="header-anchor" href="#类型映射" aria-hidden="true">#</a> 类型映射</h3><ul><li>Go <code>bool</code>: JSON <code>boolean</code></li><li>Go <code>float64</code>: JSON <code>Number</code></li><li>Go <code>string</code>: JSON <code>strings</code></li><li>Go <code>nil</code>: JSON <code>null</code></li></ul><h3 id="对于未知结构的-json" tabindex="-1"><a class="header-anchor" href="#对于未知结构的-json" aria-hidden="true">#</a> 对于未知结构的 JSON</h3><ul><li><code>map[string]interface{}</code> 可以存储任意 JSON 对象</li><li><code>[]interface{}</code> 可以存储任意的 JSON 数组</li></ul><h3 id="读写-json" tabindex="-1"><a class="header-anchor" href="#读写-json" aria-hidden="true">#</a> 读写 JSON</h3><h4 id="读取-json" tabindex="-1"><a class="header-anchor" href="#读取-json" aria-hidden="true">#</a> 读取 JSON</h4><ul><li>需要一个解码器: <code>dec := json.NewDecoder(r.Body)</code><ul><li>参数需实现 Reader 接口</li></ul></li><li>在解码器上进行解码：<code>dec.Decode(&amp;query)</code></li></ul><h4 id="写入-json" tabindex="-1"><a class="header-anchor" href="#写入-json" aria-hidden="true">#</a> 写入 JSON</h4><ul><li>需要一个编码器： <code>enc := json.NewEncode(w)</code><ul><li>参数需实现 Writer 接口</li></ul></li><li>编码：<code>enc.Encode(results)</code></li></ul><h4 id="marshal-和-unmarshal" tabindex="-1"><a class="header-anchor" href="#marshal-和-unmarshal" aria-hidden="true">#</a> Marshal() 和 Unmarshal()</h4><ul><li><p><code>Marshal()编码</code>：把 go struct 转化为 json 格式</p><ul><li><code>MarshalIndent()</code>: 带缩进</li></ul></li><li><p><code>Unmarshal()解码</code>: 把 json 转化为 go struct</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果处理的目标是 string 或 bytes, 使用 Marshal 与 Unmarshal 比较合适 如果处理的目标是 stream，使用 Encode, 和 Decode 比较合适</p></div>`,18),t=[i];function l(c,d){return s(),a("div",null,t)}const u=n(o,[["render",l],["__file","07-json.html.vue"]]);export{u as default};
