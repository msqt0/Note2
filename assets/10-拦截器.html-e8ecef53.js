import{_ as a,p as n,q as s,a1 as t}from"./framework-7db056f4.js";const e={},p=t(`<h1 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h1><h2 id="拦截器的配置" tabindex="-1"><a class="header-anchor" href="#拦截器的配置" aria-hidden="true">#</a> 拦截器的配置</h2><p>SpringMVC 中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC 中的拦截器需要实现<code>HandlerInterceptor</code></p><p>SpringMVC 的拦截器必须在 SpringMVC 的配置文件中进行配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.interceptor.FirstInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 以上两种配置方式都是对 DispatcherServlet 所处理的所有的请求进行拦截 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/**<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/testRequestEntity<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--
    以上配置方式可以通过 ref 或 bean 标签设置拦截器，通过 mvc:mapping 设置需要拦截的请求，通过 mvc:exclude-mapping 设置需要排除的请求，即不需要拦截的请求
--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拦截器的三个抽象方法" tabindex="-1"><a class="header-anchor" href="#拦截器的三个抽象方法" aria-hidden="true">#</a> 拦截器的三个抽象方法</h2><p>SpringMVC 中的拦截器有三个抽象方法：</p><p><code>preHandle</code>：控制器方法执行之前执行 preHandle()，其 boolean 类型的返回值表示是否拦截或放行，返回 true 为放行，即调用控制器方法；返回 false 表示拦截，即不调用控制器方法</p><p><code>postHandle</code>：控制器方法执行之后执行 postHandle()</p><p><code>afterComplation</code>：处理完视图和模型数据，渲染视图完毕之后执行 afterComplation()</p><h2 id="多个拦截器的执行顺序" tabindex="-1"><a class="header-anchor" href="#多个拦截器的执行顺序" aria-hidden="true">#</a> 多个拦截器的执行顺序</h2><ul><li>若每个拦截器的<code>preHandle()</code>都返回<code>true</code></li></ul><p>此时多个拦截器的执行顺序和拦截器在 SpringMVC 的配置文件的配置顺序有关：</p><p><code>preHandle()</code>会按照配置的顺序执行，而<code>postHandle()</code>和<code>afterComplation()</code>会按照配置的反序执行</p><ul><li>若某个拦截器的<code>preHandle()</code>返回了 false</li></ul><p>preHandle()返回 false 和它之前的拦截器的 preHandle()都会执行，postHandle()都不执行，返回 false 的拦截器之前的拦截器的 afterComplation()会执行</p>`,17),c=[p];function o(l,i){return n(),s("div",null,c)}const r=a(e,[["render",o],["__file","10-拦截器.html.vue"]]);export{r as default};
