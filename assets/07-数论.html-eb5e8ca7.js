import{_ as x,M as k,p as w,q,R as p,t as a,N as s,V as n,a1 as c}from"./framework-7db056f4.js";const N={},B=c('<h1 id="数论" tabindex="-1"><a class="header-anchor" href="#数论" aria-hidden="true">#</a> 数论</h1><h2 id="待总结" tabindex="-1"><a class="header-anchor" href="#待总结" aria-hidden="true">#</a> 待总结</h2><ul><li><p><code>( A + B ) % k = 0 &lt;=&gt; A % k = -B % k</code></p></li><li><p><code>A % k = a =&gt; A * 10 ^ n % k = a * 10 ^ n % k</code></p></li><li><p><code>一个负数模一个数在 cpp 中为负数，但在数学中的余数必须是正数，例如：-5 % 3 = -2 但在数学中结果应该是 1，因此需要做转换 ( -5 % 3 + 3 ) % 3 = 1</code></p></li><li><p><code>1 - n 中 p 的倍数的个数 为 [n / p]，[] 表示向下取整</code></p></li></ul><h2 id="素数判定" tabindex="-1"><a class="header-anchor" href="#素数判定" aria-hidden="true">#</a> 素数判定</h2><h3 id="试除法" tabindex="-1"><a class="header-anchor" href="#试除法" aria-hidden="true">#</a> 试除法</h3>',5),j={class:"katex"},A={class:"katex-mathml"},L=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8002800000000001em;"></span><span class="strut bottom" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="base textstyle uncramped"><span class="sqrt mord"><span class="sqrt-sign" style="top:0.03971999999999998em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">n</span></span></span><span style="top:-0.72028em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span>',1),O=p("p",null,"复杂度：",-1),M={class:"katex"},V={class:"katex-mathml"},P=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8002800000000001em;"></span><span class="strut bottom" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="sqrt mord"><span class="sqrt-sign" style="top:0.03971999999999998em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">n</span></span></span><span style="top:-0.72028em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),E=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">checkPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkPrime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="扩展-试除法求约数" tabindex="-1"><a class="header-anchor" href="#扩展-试除法求约数" aria-hidden="true">#</a> 扩展---试除法求约数</h4><p>和试除法判断素数的思路一样。</p><p>复杂度：</p>`,5),C={class:"katex"},D={class:"katex-mathml"},I=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8002800000000001em;"></span><span class="strut bottom" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="sqrt mord"><span class="sqrt-sign" style="top:0.03971999999999998em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">n</span></span></span><span style="top:-0.72028em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),R=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">getDivide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> x <span class="token operator">/</span> i<span class="token punctuation">)</span> d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意把另一个约数也加入集合。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> res <span class="token operator">=</span> <span class="token function">getDivide</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> res<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="因素分离-分解质因数" tabindex="-1"><a class="header-anchor" href="#因素分离-分解质因数" aria-hidden="true">#</a> 因素分离（分解质因数）</h2><h3 id="试除筛法" tabindex="-1"><a class="header-anchor" href="#试除筛法" aria-hidden="true">#</a> 试除筛法</h3><p>筛法只选出质数的原因：</p><p>可证明：若某数 n 含有因子 i 且 i 能被 2 到 i - 1 中的某些数整除（i 是合数），那么 n 也能被 2 到 i - 1 中的这些数整除，因此 i 被筛选出来前已经被除干净了，所以该方法只能筛出质因数。（其实也说明了任何一个合数都可分解为若干质数相乘）</p><p>复杂度：</p>`,7),S={class:"katex"},T={class:"katex-mathml"},Y=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8002800000000001em;"></span><span class="strut bottom" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="sqrt mord"><span class="sqrt-sign" style="top:0.03971999999999998em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">n</span></span></span><span style="top:-0.72028em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),F=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">,</span> cnt <span class="token operator">++</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//x 中最多有一个大于 sqrt(x)的质因数</span>

    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展——约数的个数" tabindex="-1"><a class="header-anchor" href="#扩展——约数的个数" aria-hidden="true">#</a> 扩展——约数的个数</h4>`,2),G=p("code",null,"N",-1),H={class:"katex"},J={class:"katex-mathml"},K=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.7520519999999999em;"></span><span class="strut bottom" style="height:1.0533599999999999em;vertical-align:-0.3013079999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.3013079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.45065999999999995em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15122857142857138em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),Q=p("code",null,"N",-1),U={class:"katex"},W={class:"katex-mathml"},X=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9367679999999998em;"></span><span class="strut bottom" style="height:1.2380759999999997em;vertical-align:-0.3013079999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.3013079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.45065999999999995em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15122857142857138em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),Z={class:"katex"},$={class:"katex-mathml"},ss=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">∗</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span>',1),ns=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> primes<span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展——约数之和" tabindex="-1"><a class="header-anchor" href="#扩展——约数之和" aria-hidden="true">#</a> 扩展——约数之和</h4>`,2),as={class:"katex"},es={class:"katex-mathml"},ts=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9367679999999998em;"></span><span class="strut bottom" style="height:1.2380759999999997em;vertical-align:-0.3013079999999999em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.3013079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.45065999999999995em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15122857142857138em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),ps={class:"katex"},ls={class:"katex-mathml"},is=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span>',1),cs={class:"katex"},os={class:"katex-mathml"},rs=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.1154159999999997em;vertical-align:-0.3013079999999999em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.24810799999999997em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.24810799999999997em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.24810799999999997em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.24810799999999997em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.2831079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.2831079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.3013079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.45065999999999995em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15122857142857138em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),us=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> prime <span class="token operator">:</span> primes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ll t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> prime<span class="token punctuation">.</span>first<span class="token punctuation">,</span> a <span class="token operator">=</span> prime<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">--</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="欧拉函数" tabindex="-1"><a class="header-anchor" href="#欧拉函数" aria-hidden="true">#</a> 欧拉函数</h2>`,2),ds={class:"katex"},ms={class:"katex-mathml"},ks=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">Φ</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),fs={class:"katex"},vs={class:"katex-mathml"},ys=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.751192em;"></span><span class="strut bottom" style="height:1.0175em;vertical-align:-0.266308em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.266308em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.4498em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.247em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">m</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">m</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),bs={class:"katex"},hs={class:"katex-mathml"},_s=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.897216em;"></span><span class="strut bottom" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">Φ</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mbin">∗</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">∗</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">∗</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">∗</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">m</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span>',1),zs=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> x<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res <span class="token operator">=</span> res <span class="token operator">/</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">/</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="素数筛选" tabindex="-1"><a class="header-anchor" href="#素数筛选" aria-hidden="true">#</a> 素数筛选</h2><h3 id="朴素法" tabindex="-1"><a class="header-anchor" href="#朴素法" aria-hidden="true">#</a> 朴素法</h3><p>在<code>2~n</code>中，通过把一个数的倍数删除掉的方式来筛选质数，若遇到没被删除的数，则把它加入质数的集合中。</p><p>复杂度：</p>`,5),gs={class:"katex"},xs={class:"katex-mathml"},ws=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),qs=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="埃氏筛法" tabindex="-1"><a class="header-anchor" href="#埃氏筛法" aria-hidden="true">#</a> 埃氏筛法</h3><p>容易发现朴素筛法会把同样的合数重复删除多次，而埃氏筛法优化于朴素筛法，可以由分解质因数部分的证明知道，每一个合数都能分解为若干质数相乘，因此只需要使用选出的素数去删除合数。</p><p>复杂度：</p><ul><li>时间：O(nloglogn) 可近似于 n</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线性筛法" tabindex="-1"><a class="header-anchor" href="#线性筛法" aria-hidden="true">#</a> 线性筛法</h3><p>埃氏筛法，已经快速很多了，但还是会发生重复删除同一个合数的情况。而线性筛法每次只使用某合数的最小质因子筛掉合数，这样就能避免重复筛选。</p><p>复杂度：</p>`,9),Ns={class:"katex"},Bs={class:"katex-mathml"},js=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),As=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//优化到 n 的关键</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为什么<code>i % p[j] == 0</code>时<code>break</code>，可以证明：</p><p>当 <code>i % p[j] == 0</code>时，设<code>m = i / p[j]</code>，则<code>i * p[j + 1] = ( m * p[j + 1] ) * p[j]</code></p><p>设<code>k = m * p[j + 1]</code>，则可得到<code>i * p[j + 1] = k * p[j]</code>，即<code>i * p[j + 1]</code>是<code>p[j]</code>的若干倍，这说明：如果不在<code>i % p[j] == 0</code>时<code>break</code>，那么<code>i * p[j + 1]</code>这个合数将会在<code>i = k</code>时又被筛一遍，此时退出可以避免重复筛选。</p></blockquote><h2 id="最大公约数-最小公倍数" tabindex="-1"><a class="header-anchor" href="#最大公约数-最小公倍数" aria-hidden="true">#</a> 最大公约数/最小公倍数</h2><h3 id="欧几里得算法-辗转相除法" tabindex="-1"><a class="header-anchor" href="#欧几里得算法-辗转相除法" aria-hidden="true">#</a> 欧几里得算法（辗转相除法）</h3><p>数论的基础知识：<code>若 d|a 且 d|b 则 d|ax+by （d|a 表示 d 能整除 a，x，y 为任意常数） </code></p><blockquote><p>证明：</p><p>设 c = floor(a/b)，则 a % b = a - c * b</p><p>则设 a 与 b 的公约数为 d，由基础知识：d|a 且 d|b，则有 d|a - c * b</p><p>那么可以得到(a, b) = (b, a % b)，即左边两数任何公约数都是右边两数的公约数，最终可以得到 gcd(a, b) = gcd(b, a % b)，它们的最大公约数也相等</p></blockquote><blockquote><p>交换 a 和 b 的位置是为了保证 a 永远大于 b ，以便递归能一直进行下去，当递归运算到 gcd(a, 0)时，可以知道 ax + by = a，此时返回 a</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最小公倍数公式：<code>最小公倍数 d = ( A * B ) / gcd(A, B)</code></p><blockquote><p>直觉上的证明（非常不严谨，只是方便记忆）:</p><p>A × B = a × c × b × c (c = gcd(A, B)，a = A / c，b = B / c)</p><p>因为 c 为 A, B 的最大公因数，因此 a 与 b 是互质的，而两质数的最小公倍数就是它们的乘积，那么 a × b | d</p><p>又因为 d|A × B，即 d|a × b × c × c</p><p>又由 A|d，B|d 可以知道 d = [a × b × c， a × b × c × c]</p><ol><li>当 A 与 B 互质，c = gcd(A, B) = 1，d 取 a × b × c × c 满足 A × B = d × c</li><li>当 A 与 B 互质，c = gcd(A, B) &gt; 1，d 取 a × b × c 满足 A × B = d × c</li><li>当 A|B or B|A ，c = A or B，则 a = 1, b = B / A or a = A / B, b = 1 ，d 取 a × b × c 满足 A × B = d × c</li></ol><p>综上可得：d = (A × B) / gcd(A, B)</p></blockquote>`,10),Ls={href:"https://blog.csdn.net/qq_37388085/article/details/103488541",target:"_blank",rel:"noopener noreferrer"},Os=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展欧几里得算法" tabindex="-1"><a class="header-anchor" href="#扩展欧几里得算法" aria-hidden="true">#</a> 扩展欧几里得算法</h2><p>再次由数论的基础知识：<code>若 d|a 且 d|b 则 d|ax+by （d|a 表示 d 能整除 a，x，y 为任意常数） </code><br></p><p>可以知道 存在 x， y，使得<code>a * x + b * y = gcd(a, b)</code> <br> 又因为 <code>gcd(a, b) = gcd(b, a % b)</code>，则<br><code> b * x&#39; + a % b * x&#39; = gcd(b, a % b)</code><br><code>b * x&#39; + ( a - [a / b] * b ) * x&#39; = gcd(b, a % b) ， []表示向下取整</code><br><code>a * x&#39; + b * (x&#39; - [a / b] * x&#39;) = gcd(b, a % b) = gcd(a, b)</code><br></p>`,4),Ms={class:"katex"},Vs={class:"katex-mathml"},Ps=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base textstyle uncramped"><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle uncramped"><span class="mord mathit">x</span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">⌊</span><span class="mord mathit">a</span><span class="mord mathrm">/</span><span class="mord mathit">b</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">⌋</span></span><span class="mbin">∗</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span>',1),Es=c(`<blockquote><p>注意：这里的 x 和 y 是 gcd(a, b)对应的参数， 而 x&#39;, y&#39; 是 gcd(b, a % b)对应的参数。</p></blockquote><p>边界：当 b = 0 时，可以知道 ax * by = a，则 x = 1，y = 0</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线性同余方程" tabindex="-1"><a class="header-anchor" href="#线性同余方程" aria-hidden="true">#</a> 线性同余方程</h3>`,4),Cs={class:"katex"},Ds={class:"katex-mathml"},Is=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mclose">)</span></span></span>',1),Rs={class:"katex"},Ss={class:"katex-mathml"},Ts=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mrel">≡</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">b</span><span class="mclose">)</span></span></span>',1),Ys=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> d<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1LL</span> <span class="token operator">*</span> x <span class="token operator">*</span> b <span class="token operator">/</span> d <span class="token operator">%</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逆元" tabindex="-1"><a class="header-anchor" href="#逆元" aria-hidden="true">#</a> 逆元</h2>`,2),Fs={class:"katex"},Gs={class:"katex-mathml"},Hs=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span><span class="mord mathrm">∣</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">a</span><span class="mord mathrm">/</span><span class="mord mathit">b</span><span class="mrel">≡</span><span class="mord mathit">a</span><span class="mbin">∗</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),Js=p("br",null,null,-1),Ks={class:"katex"},Qs={class:"katex-mathml"},Us=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mrel">≡</span><span class="mord mathit">a</span><span class="mbin">∗</span><span class="mord mathit">x</span><span class="mbin">∗</span><span class="mord mathit">b</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),Ws=p("br",null,null,-1),Xs={class:"katex"},Zs={class:"katex-mathml"},$s=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span><span class="mbin">∗</span><span class="mord mathit">x</span><span class="mrel">≡</span><span class="mord mathrm">1</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),sn=p("br",null,null,-1),nn={class:"katex"},an={class:"katex-mathml"},en=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),tn=p("p",null,[p("strong",null,"当且仅当 b 与 p 互质时，b 才有逆元")],-1),pn=p("blockquote",null,[p("p",null,"b 为 p 的倍数时，b * x % p = 0 ，x 为任意整数，那么 b 乘于逆元模 p 为 0 而不为 1，因此当 b 与 p 不互质时，b 没有模 p 的乘法逆元")],-1),ln=p("blockquote",null,[p("p",null,"逆元的作用：当模上一个数时，乘于数的逆元同等于除上这个数，那么可以避免做除法运算。")],-1),cn=p("h3",{id:"快速幂求逆元",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#快速幂求逆元","aria-hidden":"true"},"#"),a(" 快速幂求逆元")],-1),on={class:"katex"},rn={class:"katex-mathml"},un=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">p</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">≡</span><span class="mord mathit">a</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),dn={class:"katex"},mn={class:"katex-mathml"},kn=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">p</span><span class="mbin">−</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">∗</span><span class="mord mathit">a</span><span class="mrel">≡</span><span class="mord mathrm">1</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),fn=p("br",null,null,-1),vn={class:"katex"},yn={class:"katex-mathml"},bn=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">p</span><span class="mbin">−</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),hn=p("br",null,null,-1),_n=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>

LL <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> mod<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>
        LL ans <span class="token operator">=</span> <span class="token function">qmi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展欧几里得算法求逆元" tabindex="-1"><a class="header-anchor" href="#扩展欧几里得算法求逆元" aria-hidden="true">#</a> 扩展欧几里得算法求逆元</h3>`,2),zn=p("br",null,null,-1),gn={class:"katex"},xn={class:"katex-mathml"},wn=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">p</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span>',1),qn=p("br",null,null,-1),Nn={class:"katex"},Bn={class:"katex-mathml"},jn=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mbin">∗</span><span class="mord mathit">x</span><span class="mrel">≡</span><span class="mord mathrm">1</span><span class="mopen">(</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mspace"> </span><span class="mord mathit">p</span><span class="mclose">)</span></span></span>',1),An=p("br",null,null,-1),Ln={class:"katex"},On={class:"katex-mathml"},Mn=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mbin">∗</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">p</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span>',1),Vn=p("code",null,"exgcd(a, p, x, y)",-1),Pn=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>

        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">*</span> x <span class="token operator">%</span> b <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//扩展欧几里得算法得到的数可能是负的，但是数学中 mod 的结果必须为正，因此转换成正数。</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;impossible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function En(Cn,Dn){const e=k("mi"),l=k("mrow"),y=k("msqrt"),r=k("annotation"),u=k("semantics"),d=k("math"),t=k("mo"),i=k("mn"),o=k("msub"),m=k("msubsup"),b=k("mfrac"),z=k("ExternalLinkIcon"),v=k("msup"),h=k("mtd"),_=k("mtr"),g=k("mtable"),f=k("mtext");return w(),q("div",null,[B,p("p",null,[a("若某数 n 从 2 到 "),p("span",j,[p("span",A,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(y,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("n")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("\\sqrt{n}")]),_:1})]),_:1})]),_:1})]),L]),a(" 中都没有因数字，则这个数就是素数。试除法就是暴力地验证素数的方式。")]),O,p("ul",null,[p("li",null,[a("时间："),p("span",M,[p("span",V,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("O")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(y,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("n")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(\\sqrt{n})")]),_:1})]),_:1})]),_:1})]),P])])]),E,p("ul",null,[p("li",null,[a("时间："),p("span",C,[p("span",D,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("O")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(y,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("n")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(\\sqrt{n})")]),_:1})]),_:1})]),_:1})]),I])])]),R,p("ul",null,[p("li",null,[a("时间："),p("span",S,[p("span",T,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("O")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(y,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("n")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(\\sqrt{n})")]),_:1})]),_:1})]),_:1})]),Y])])]),F,p("p",null,[a("由分解质因数部分可知，任何一个合数"),G,a("都可以写成"),p("span",H,[p("span",J,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("N")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("N = p_1^{a_1}p_2^{a_2}...p_k^{a_k}")]),_:1})]),_:1})]),_:1})]),K]),a("，即若干个质数的若干次幂的积，所以"),Q,a("的任意约数 d 都可以表示为"),p("span",U,[p("span",W,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(i,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("≤")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("≤")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("d = p_1^{b_1}p_2^{b_2}...p_k^{b_k}, 0\\leq b_k \\leq a_k")]),_:1})]),_:1})]),_:1})]),X]),a(" 那么，约数的个数就为"),p("span",Z,[p("span",$,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("(")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("(a_1 + 1) * ... * (a_k + 1)")]),_:1})]),_:1})]),_:1})]),ss]),a("，即组合数")]),ns,p("p",null,[a("由前面的分析知道了，一个合数的任何约数可以表示为"),p("span",as,[p("span",es,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(i,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("≤")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("≤")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("d = p_1^{b_1}p_2^{b_2}...p_k^{b_k}, 0\\leq b_k \\leq a_k")]),_:1})]),_:1})]),_:1})]),ts]),a("，所以一个合数的所有约数之和（即"),p("span",ps,[p("span",ls,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("(")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("(a_1 + 1)...(a_k + 1)")]),_:1})]),_:1})]),_:1})]),is]),a("个因数之和）可以写为："),p("span",cs,[p("span",os,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("(")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(i,null,{default:n(()=>[a("0")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(i,null,{default:n(()=>[a("0")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(i,null,{default:n(()=>[a("0")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("k")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("( p_1^0 + p_1^1 + ... +p_1^{a_1} )( p_2^0 + p_2^2 + ... +p_2^{a_2} )...( p_k^0 + p_k^1 + ... +p_k^{a_k} )")]),_:1})]),_:1})]),_:1})]),rs]),a("，展开即得到所有质数选取任意次幂的全部组合之和。")]),us,p("p",null,[a("1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 "),p("span",ds,[p("span",ms,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,{mathvariant:"normal"},{default:n(()=>[a("Φ")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("N")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("\\Phi(N)")]),_:1})]),_:1})]),_:1})]),ks]),a(" 。 在算数基本定理中，"),p("span",fs,[p("span",vs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("N")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(m,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("N = p_1^{a_1}p_2^{a_2}...p_m^{a_m}")]),_:1})]),_:1})]),_:1})]),ys])]),p("p",null,[p("span",bs,[p("span",hs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,{mathvariant:"normal"},{default:n(()=>[a("Φ")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("N")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(e,null,{default:n(()=>[a("N")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(b,null,{default:n(()=>[s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(b,null,{default:n(()=>[s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a(".")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(b,null,{default:n(()=>[s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1})]),_:1}),s(l,null,{default:n(()=>[s(o,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("\\Phi(N) = N * \\frac{p_1 - 1}{p_1} * \\frac{p_2 - 2}{p_2} * ... * \\frac{p_2 - m}{p_m}")]),_:1})]),_:1})]),_:1})]),_s])]),zs,p("ul",null,[p("li",null,[a("时间："),p("span",gs,[p("span",xs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("O")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("n")]),_:1}),s(e,null,{default:n(()=>[a("l")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("g")]),_:1}),s(e,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(nlogn)")]),_:1})]),_:1})]),_:1})]),ws])])]),qs,p("ul",null,[p("li",null,[a("时间："),p("span",Ns,[p("span",Bs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("O")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("O(n)")]),_:1})]),_:1})]),_:1})]),js])])]),As,p("p",null,[a("贴一个完美证明的博客： "),p("a",Ls,[a("点击跳转"),s(z)])]),Os,p("p",null,[a("则可以得到 "),p("span",Ms,[p("span",Vs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,{fence:"true"},{default:n(()=>[a("{")]),_:1}),s(g,null,{default:n(()=>[s(_,null,{default:n(()=>[s(h,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("y")]),_:1}),s(l,null,{default:n(()=>[s(e,{mathvariant:"normal"},{default:n(()=>[a("′")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(_,null,{default:n(()=>[s(h,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("y")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("x")]),_:1}),s(l,null,{default:n(()=>[s(e,{mathvariant:"normal"},{default:n(()=>[a("′")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(l,null,{default:n(()=>[s(t,{fence:"true"},{default:n(()=>[a("⌊")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a("/")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,{fence:"true"},{default:n(()=>[a("⌋")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("y")]),_:1}),s(l,null,{default:n(()=>[s(e,{mathvariant:"normal"},{default:n(()=>[a("′")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("\\left\\{\\begin{matrix} x = y' \\\\ y = x' - \\left\\lfloor a/b \\right\\rfloor * y' \\end{matrix}\\right.")]),_:1})]),_:1})]),_:1})]),Ps]),a(" ，因此可以通过递归的方式求解出 x, y")]),Es,p("p",null,[a("注意：exgcd(a, b, x, y) 与 "),p("span",Cs,[p("span",Ds,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,null,{default:n(()=>[a("y")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(e,null,{default:n(()=>[a("g")]),_:1}),s(e,null,{default:n(()=>[a("c")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("ax + by = gcd(a, b)")]),_:1})]),_:1})]),_:1})]),Is]),a("中的 b 实际上是"),p("span",Rs,[p("span",Ss,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(e,null,{default:n(()=>[a("g")]),_:1}),s(e,null,{default:n(()=>[a("c")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("ax \\equiv gcd(a, b) (mod \\space b)")]),_:1})]),_:1})]),_:1})]),Ts]),a("中的 b")]),Ys,p("p",null,[a("若存在 b，使得"),p("span",Fs,[p("span",Gs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a("∣")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,{mathvariant:"normal"},{default:n(()=>[a("/")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("b|a, a/b \\equiv a * x (mod \\space p)")]),_:1})]),_:1})]),_:1})]),Hs]),a(),Js,a(" 两边同乘 b 可得到"),p("span",Ks,[p("span",Qs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a \\equiv a * x * b (mod \\space p)")]),_:1})]),_:1})]),_:1})]),Us]),a(),Ws,a(" 两边同约 a 可得到"),p("span",Xs,[p("span",Zs,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("b * x \\equiv 1 (mod \\space p)")]),_:1})]),_:1})]),_:1})]),$s]),a(),sn,a(" 则称 x 为 b 模 p 的乘法逆元，记为"),p("span",nn,[p("span",an,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("b")]),_:1}),s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("−")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("b^{-1}(mod \\space p)")]),_:1})]),_:1})]),_:1})]),en])]),tn,pn,ln,cn,p("p",null,[a("费马小定理：当 p 为质数，a 为任意自然数且 a 与 p 互质时，有"),p("span",on,[p("span",rn,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a^p \\equiv a (mod \\space p)")]),_:1})]),_:1})]),_:1})]),un]),a(" 可化简为"),p("span",dn,[p("span",mn,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a^{p-2} * a \\equiv 1(mod \\space p)")]),_:1})]),_:1})]),_:1})]),kn]),fn,a(" 那么，当且仅当 p 为质数且 a 与 p 互质时，可以由费马小定理得到 a 模 p 的乘法逆元为"),p("span",vn,[p("span",yn,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(v,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(i,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a^{p-2}")]),_:1})]),_:1})]),_:1})]),bn]),hn]),_n,p("p",null,[a("费马小定理成立的前提是 p 为质数，如果 p 为合数，只能通过扩展欧几里得算法求逆元了"),zn,a(" 由之前的分析知道，当且仅当 a 与 p 互质时， a 才有逆元，即"),p("span",gn,[p("span",xn,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("g")]),_:1}),s(e,null,{default:n(()=>[a("c")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("gcd(a, p) = 1")]),_:1})]),_:1})]),_:1})]),wn]),qn]),p("p",null,[a("假设 a 的逆元为 x，则有"),p("span",Nn,[p("span",Bn,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("≡")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(e,null,{default:n(()=>[a("m")]),_:1}),s(e,null,{default:n(()=>[a("o")]),_:1}),s(e,null,{default:n(()=>[a("d")]),_:1}),s(f,null,{default:n(()=>[a(" ")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a * x \\equiv 1 (mod \\space p)")]),_:1})]),_:1})]),_:1})]),jn]),An,a(" 即"),p("span",Ln,[p("span",On,[s(d,null,{default:n(()=>[s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("+")]),_:1}),s(e,null,{default:n(()=>[a("p")]),_:1}),s(t,null,{default:n(()=>[a("∗")]),_:1}),s(e,null,{default:n(()=>[a("y")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(i,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:n(()=>[a("a * x + p * y = 1")]),_:1})]),_:1})]),_:1})]),Mn]),a(" 那么可以用 "),Vn,a("，求解 x.")]),Pn])}const Rn=x(N,[["render",En],["__file","07-数论.html.vue"]]);export{Rn as default};
