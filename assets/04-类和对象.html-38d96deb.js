import{_ as n,p as s,q as a,a1 as t}from"./framework-7db056f4.js";const e={},p=t(`<h1 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h1><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p>相当于c里的指针，但是java里的引用只能指向对象</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>一个类可以通过 extends 从父类继承 方法和属性</p><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h2><p>通过一个类创建一个对象，叫做实例化</p><p>实例化是通过调用构造方法(构造器)实现的</p><ul><li>方法名和类名一样</li><li><strong>没有返回类型</strong></li><li>实例化一个对象时，必然调用构造方法</li><li>继承的类实例化时，父类的构造方法在子类前定义，调用，且不可更改顺序</li><li>如果提供了一个<strong>有参</strong>的构造方法，同时<strong>没有</strong>提供<strong>无参</strong>的构造方法，那么默认的无参构成方法会<strong>覆盖</strong>，需要重新定义 <ul><li>但构造方法可以<strong>重载</strong></li></ul></li></ul><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><p>代表当前对象</p><ul><li>如果要在一个构造方法中调用另一个构造方法，可以使用this()</li></ul><h2 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h2><ol><li>public</li><li>protected</li><li>package/default/friendly</li><li>private</li></ol><h3 id="类间的关系" tabindex="-1"><a class="header-anchor" href="#类间的关系" aria-hidden="true">#</a> 类间的关系</h3><ul><li>自身</li><li>同包子类 B是A的子类，且和A处于同一个包下</li><li>异包子类 B是A的子类，但在另一个包下</li><li>同包类 B和A是同一个包，但彼此没有继承关系</li><li>其他类 B和A在不同的包下，也没有继承关系</li></ul><table><thead><tr><th>修饰符</th><th>自身</th><th>同包子类</th><th>不同包子类</th><th>同包类</th><th>其他类</th></tr></thead><tbody><tr><td>private</td><td>可访问</td><td>不能继承</td><td>不能继承</td><td>不可访问</td><td>不可访问</td></tr><tr><td>default</td><td>可访问</td><td>可继承</td><td>不能继承</td><td>可访问</td><td>不可访问</td></tr><tr><td>protected</td><td>可访问</td><td>可继承</td><td>可继承</td><td>可访问</td><td>不可访问</td></tr><tr><td>public</td><td>可访问</td><td>可继承</td><td>可继承</td><td>可访问</td><td>可访问</td></tr></tbody></table><p>使用情况</p><ol><li><strong>属性</strong>通常使用<strong>private</strong>封装起来</li><li><strong>方法</strong>一般使用<strong>public</strong>用于被调用</li><li>会被<strong>子类继承</strong>的方法，通常使用<strong>protected</strong></li><li>package用的不多，一般新手会用package,因为还不知道有修饰符这个东西</li></ol><p><strong>作用范围最小原则</strong></p><p>能用private就用private，不行就放大一级，用package,再不行就用protected，最后用public。 这样就能把数据尽量的封装起来，没有必要<strong>露出来的</strong>，就不用<strong>露出来</strong>了</p><h2 id="类属性-static" tabindex="-1"><a class="header-anchor" href="#类属性-static" aria-hidden="true">#</a> 类属性(static)</h2><ul><li><p>当一个属性被<strong>static</strong>修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong></p></li><li><p>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong></p></li></ul><p><strong>类属性与对象属性不同</strong>：</p><ul><li>不同对象的 <strong>对象属性</strong> 的值都可能不一样</li><li>所有对象的<strong>类属性</strong>的值，都是一样的</li></ul><p>访问</p><p>访问类属性两种方式：</p><ul><li>对象.类属性</li><li>类.类属性(推荐)</li></ul><h2 id="类方法" tabindex="-1"><a class="header-anchor" href="#类方法" aria-hidden="true">#</a> 类方法</h2><ul><li><strong>类方法：</strong> 又叫做静态方法</li><li><strong>对象方法：</strong> 又叫实例方法，非静态方法</li></ul><p>区别：访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上，访问类方法，<strong>不需要对象</strong>的存在，直接就访问</p><p>访问类属性一样，调用类方法两种方式</p><ul><li>对象.类属性</li><li>类.类属性(推荐)</li></ul><p>使用原则：</p><ul><li>如果在某一个方法里，调用了对象属性，那么这个方法，就必须设计为对象，存在一个具体对象的时候，对象属性才有意义</li><li>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法 <ul><li>这样的方法，更带有<strong>功能性</strong>色彩就像取随机数一样，<code>Math.random()</code>是一个功能用途的方法</li></ul></li></ul><blockquote><p>静态方法、静态属性都是跟着类加载</p><p>静态方法优先对象方法加载进内存，若在类方法中调用对象方法，则无法加载对象方法</p></blockquote><h2 id="属性初始化" tabindex="-1"><a class="header-anchor" href="#属性初始化" aria-hidden="true">#</a> 属性初始化</h2><p>对象属性初始化方式：</p><ol><li>声明该属性的时候初始化</li><li>构造方法中初始化</li><li>初始化块</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>	<span class="token comment">//声明该属性的时候初始化</span>
    <span class="token keyword">protected</span> <span class="token keyword">float</span> a<span class="token punctuation">;</span>
    <span class="token keyword">float</span> b<span class="token punctuation">;</span>
    
    <span class="token punctuation">{</span>
        b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>		<span class="token comment">//初始化块</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>		<span class="token comment">//构造方法中初始化</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象属性初始化方式：</p><ol><li>声明该属性的时候初始化</li><li>静态初始化块</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> ver <span class="token operator">=</span> <span class="token number">1.2F</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        ver <span class="token operator">=</span> <span class="token number">1.3F</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为static静态属性，随着类初始化而初始化，而构造方法要在初始化对象时才能初始化属性，因此没有放在构造方法中的初始化方法</p><p>即初始化顺序：静态变量、静态初始化块）&gt;（变量、初始化块）&gt;构造器</p></blockquote><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p>又叫做 Singleton模式，指的是一个类，在一个JVM里，只有一个实例存在。</p><p>三元素</p><ol><li>构造方法私有化</li><li>静态属性指向实例</li><li>public static的 getInstance方法，返回第二步的静态属性</li></ol><hr><ul><li><p>饿汉式单例模式</p></li><li><p>懒汉式单例模式</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//饿汉式单例模式</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">{</span>

   <span class="token comment">//让构造方法为 private，这样该类就不会被实例化</span>
   <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  
   <span class="token comment">//创建 SingleObject 的一个对象</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
   <span class="token comment">//获取唯一可用的对象</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//懒汉式</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    	<span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。 如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p><p>想看更多详细的可以找找 java设计模式的单例模式</p></blockquote><h2 id="枚举-enum" tabindex="-1"><a class="header-anchor" href="#枚举-enum" aria-hidden="true">#</a> 枚举(enum)</h2><p>枚举是一种特殊的类，使用枚举可以很方便的定义常量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>
	<span class="token constant">SPRING</span><span class="token punctuation">,</span><span class="token constant">SUMMER</span><span class="token punctuation">,</span><span class="token constant">AUTUMN</span><span class="token punctuation">,</span><span class="token constant">WINTER</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Season</span> s <span class="token operator">:</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为是常量，所以一般都是全大写</p></blockquote>`,56),l=[p];function i(o,c){return s(),a("div",null,l)}const u=n(e,[["render",i],["__file","04-类和对象.html.vue"]]);export{u as default};
