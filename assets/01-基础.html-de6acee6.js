import{_ as n,p as a,q as s,a1 as e}from"./framework-7db056f4.js";const l={},i=e(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//单行注释</span>

<span class="token comment">/*
多行注释
*/</span>

<span class="token doc-comment comment">/**
*JavaDoc:文档注释
*@Description helloworld
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><ul><li>以字母，<code>$</code>，或<code>_</code>开始</li><li>首字母以后可以是字母，<code>$</code>，<code>_</code>，数字组合</li><li>不能使用关键字作为变量名(自个查)</li><li>大小敏感</li><li><s>可以用中文(笑)</s></li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li><strong>强类型语言</strong>(安全性好，速度低) <ul><li>要求变量的使用要严格符合规定，变量都必须先定义后才能使用</li></ul></li><li>数据类型分为两大类 <ul><li><strong>基本</strong>类型(primitive type) <ul><li>整数(byte 1, short 2, int 4, long 8)</li><li>浮点(float 4, double 8)</li><li>字符(char 2)</li><li>boolean 1bit</li></ul></li><li><strong>引用</strong>类型(reference type) <ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul></li></ul><blockquote><p>初始化 long 类型时可以在其数值后加 L 以区分, float 加 F</p><p>int 中 二进制使用0b 开头，八进制使用0开头，十六进制使用0x开头</p><p>最好避免使用浮点数进行比较</p></blockquote><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li>由于java是强类型语言，所以要进行有些运算的时候需要用到类型转换</li><li>低到高顺序</li></ul><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR<span class="token punctuation">;</span>
A<span class="token text string">[byte,short,char]</span><span class="token arrow operator">--&gt;</span>B<span class="token text string">[int]</span><span class="token arrow operator">--&gt;</span>C<span class="token text string">[long]</span><span class="token arrow operator">--&gt;</span>D<span class="token text string">[float]</span><span class="token arrow operator">--&gt;</span>E<span class="token text string">[double]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运算中，不同类型的数据先转化为同一类型，然后进行运算</li></ul><p><strong>强制</strong>类型转换 高到低</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自动</strong>类型转换 低到高</p><p>无需操作，直接赋值，自动进行</p><blockquote><ol><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>把大容量转换到小内存，要强制转换</li><li>转换有可能出现内存溢出或精度问题</li><li>若计算溢出，转换成更大的类型时，因为在转换之前已经出现问题了，需要强制转换</li></ol><p>int 可以使用<code>_</code>分割较大数字(jdk7特性) <code>int money = 10_000_000;</code></p></blockquote><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><ul><li>变量类型</li><li>变量名</li><li><strong>作用域</strong></li></ul><p><strong>变量作用域</strong></p><p>当一个变量被声明在类下面 变量就叫做<strong>字段</strong> 或者<strong>属性</strong>、<strong>成员变量</strong>、<strong>Field</strong></p><p>所以其作用域就是从其声明的位置开始的整个类</p><ul><li><p>类变量</p><ul><li>使用static 修饰的在类下声明的变量</li></ul></li><li><p>实例变量</p><ul><li>实例化后对象的属性</li></ul></li><li><p>局部变量</p><ul><li>声明在方法内的变量</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> allClicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">//类变量:从属于类，和类一起产生一起消失</span>
    <span class="token keyword">static</span> <span class="token keyword">double</span> salary <span class="token operator">=</span><span class="token number">2500</span><span class="token punctuation">;</span>		
    
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>		<span class="token comment">//属性:实例变量：从属于对象；如果不进行初始化，会自动赋予这个类型的默认值</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment">//其他方法</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		  <span class="token comment">//局部变量 </span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>		<span class="token comment">//局部变量必须声明和初始化</span>
        <span class="token class-name">Variable</span> wtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wtf<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>访问变量的原则仍然是就近访问，且方法内会优先传入的参数</p></blockquote><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><ul><li>初始化后不能再改变的值</li><li>常量名一般使用大写字符</li><li>使用 final 声明</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>修饰符不区分先后顺序<code>static final double PI = 3.14; final static double PI = 3.14;</code></p></blockquote><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>自个查吧</p><p>很多运算，使用工具类来操作，如<code>Math</code></p><blockquote><p>!= <code> instanceof</code></p><p>字符串连接符 <code>System.out.println(&quot;&quot;+a+b);</code></p><p>&quot;&quot;写在前会优先转换为字符串再连接，若写在后则先相加再转换为字符串</p></blockquote><h2 id="包机制" tabindex="-1"><a class="header-anchor" href="#包机制" aria-hidden="true">#</a> 包机制</h2><ul><li>为了更好地组织类，java提供了包机制，用于区别类名的命名空间</li><li>常使用公司域名倒置作为包名 <code>com.baidu.xxx</code></li><li>包语句的语法格式 <code>package pkg1[.pkg2[.pkg3]]</code></li><li>使用<code>imort</code> 导入包的内容，才能使用某一个包的成员(必须放在package 下面) <ul><li>*为通配符可以导入包内所有的类</li></ul></li></ul><p>将相同类型的类放在同一个包下，方便管理</p><ol><li>使用同一个包下的其他类，直接使用即可</li><li>但是要使用其他包下的类，必须import</li></ol><h2 id="javadoc" tabindex="-1"><a class="header-anchor" href="#javadoc" aria-hidden="true">#</a> javaDoc</h2><ul><li><code>javadoc</code>命令是用来生成自己API文档的</li><li>参数信息 <ul><li>@author</li><li>@version</li><li>@since 需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@author</span> mosquito
* <span class="token keyword">@version</span> 1.0
* <span class="token keyword">@since</span> 1.8
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),t=[i];function o(p,c){return a(),s("div",null,t)}const r=n(l,[["render",o],["__file","01-基础.html.vue"]]);export{r as default};
